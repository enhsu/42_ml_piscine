node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tensors/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content: "6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277\223\277\217\357\016\272\006\300p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?\223\277\217\357\016\272\006\3006\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?\223\277\217\357\016\272\006\300p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?\223\277\217\357\016\272\006\3006\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277\223\277\217\357\016\272\006\3006\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?\223\277\217\357\016\272\006\300S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?\223\277\217\357\016\272\006\300p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277\223\277\217\357\016\272\006\300p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\277S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277"
      }
    }
  }
}
node {
  name: "tensors/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content: "\022\236\202a\301?\353\277\342k(m\231\330\000@k\236\357QV\257\355\277K\316w\006:\027\322?\014\233\251\204\261v\311?\364\260\257\356\374\365\372\277\260)R\322\224\264\352?c\325p\221\030\370\274\277\364\260\257\356\374\365\372\277\346\3543\000\235\324\315\277\353\323sl\r\275\262\277\342o\226D\020\210\363\277\314/{\010+\354\362\277J`,$\376\010\243?\300N\322\013\342A\325?\230\036&\312 \347\356\277F\317utA\351\330?~]hn\330:\347\277\217\236\201\030\305\250\356\277\307\323\341\245\236\303\261\277]HP`\217\202\341?\000\232b\263\362\'\302?\375\323\274\317\3049\263\277\235\217\333\243\311\244\361\277\222\353\310\241\000\223\304\277\354<\267g\206E\343\277a7\241c\314^\325\277\355\017\244\342\002\326\363\277}\232aj\366\220\305?+7\3069\246\350\323\277v\234\363uG\013\340\277?\325\014\344h\'\360?\346\354\312\214\374\350\007@\213\217\222@\022(\361\277\234\233\361\236l\\\315?y\035\226\225\252\033\347\277@\351\311\245\032\251\347?u\351\244\317@\037\351?Rw_\301!\226\376?\331\357\361\222\264I\363\277 \035)\245\025\254\344\277\207\3250qF\032\362?\215\257\373,\2517\361\277:\225:\013;\010\360?cO.\241u\017\360\277\367\025\271\235\300%\365?\270\017\311\270\334_\362\277\210\337\364\335\257\020\361\277WvaS\032\304\367?\200\275\3147w\242\220?cO.\241u\017\360\277c26{k\033\271?\00282\341>\301\331\277}\014~%G\014\005@\377\017\355E\272R\364\277\205O\365O\303\235\332?=\220\241\t\033\234\337?\220]\261\321\217\267\347\277\244}c!\336C\350\277\027\340<\370j\366\364\277o\221E\271iO\376\277\203\\j\000\321h\340\277\035\007\271\r\307\'\375?\213G\273\264\034q\222\277A\320s\342H\273\337?\274\325\013\233l\220\363?^\336x\307\314Q\355\2771Vf\240\024\273\366?r/\016\030\226|\360\277?\325\336\312\251\376\273\277J`,$\376\010\243?\321\274\311Rs\212\342\277\275\337\317\007\326\206\362\277Q\036\002=C\364\354\277\243\266W\271%\326\371?<x\337\343\222V\333\277\303v\027\247f\260\372?\340\026n\250\020{\373?Z]\326\247iA\346\277LP\343\253\305d\366\277d\337b\027A\027\360\277\376}\320\021s\263\352\277cO.\241u\017\360\277\325\257\037\272\206*\363\277\250l\264$\033 \314\277\3162\354\316\267\007\274?\216I)\370\274\312\351?\231\325K\273>n\276\277\377\017\355E\272R\364\277c\325p\221\030\370\274\277\3231\356`\2605\265?\014\233\251\204\261v\311?#\020\177\014)L\365\277\037\314>\\\204}\002@\036\320\341\033\332\301\336?\3147W\267\030K\330\277\034b\2269\236\263\257?\253\325\224\036\366\352\276\277\344\244\355\216\004\004\241\277\227\206\025\245g\200\371?,\016\270\030\371<\321?\036\320\341\033\332\301\336?\005fd\236\025\213\365?\371\257\261\200\365#\364\277\211k$\360\244T\304\277\331\323*\tV@\262\277p\336\301*\204\316\355\277\251O\207\0262\227\333?\301^\212i\275\377\357\277e\365\007\227n0\361?5\020\310o\340\310\365\277Q\036\002=C\364\354\277Q\036\002=C\364\354\277T\026\375b74s\277P\210\331\325\005%\341?1\320\365\226\262\251\365\277\304?\013\315\232\265\362\277\345\217\3770\247\227\363\277;\251\367\314\354\211\347?]\033r\303\352\247\313?Z\240\216\254\032\312\366\277\377\017\355E\272R\364\277Y\232\317\243\207\227\304?\302\350\312\356\026@\344?<l\376\320\3163\311\277\236\037\020\032\225\254\361\277*\366*\333O\214\366?\236\037\020\032\225\254\361\277\314\275\307\300z\\\351\277K\316w\006:\027\322?\270\231>&\0255\300?Uj\265(56\357?\'Hu6i\014\340?\014\306\237c\332\271\365?\234\021|14\207\377\277=O\321\302\345\252\330?\366N\2555\010\270\326?\233or\2672\225\361\277\037NA\216o\337\320?\314o\210\302bQ\025@B\314\320\"\363v\003@\246\017\200U%\343\361\277|\317P\236g_\332?\322N\033o\231\276\325?-\036pv\324\372\353\277\305\317?Cf\275\362\277K\005O\370&}\360?\233kmS\\\321\304\277Y\020Z6O\302\366\277\355\017\244\342\002\326\363\277\027\235\204\363\271m\344\277=7\017\235]e\324\277L\247Xr(o\376?>\026\335*\236\030\367?\376}\320\021s\263\352\277E\350\3137\023\327\340?\320\270\371\326{[\337\277\304v\342\276\207\033\321\277\020\301\321y\333\270\373\277h\035M2\363\236\346\277\236\334W\025\344#\341\277-\036pv\324\372\353\277\366\233^\217\001\314\317?\017\276\024R2\210\224?\306\034\274\264\200<\342\277V\350\024\233\312S\341?\247\251\255 9v\352?\307\353:X\206\035\000@l\234i8[\227\004@\317\246Y\273$\006\373?\231\3516\226\257\030\352?\331\357\361\222\264I\363\277\341y\t;xy\211?\2361\0237\212\277\263?n\274\322$\362\246\004@\356\231\031P;\253\301?o\2463\027\307\273\253\2779\017\377\351\267\213\330?\00774s7\357\322\277\3162\354\316\267\007\274?\261\3709\351:\201\336\277H\236]\213\347\265\354\277\211o)T{\030\361\277\n\355\305\306\013\316\316\277\376\211\261$7\326\354?\032O?\374v\261\327?\273\016\0003\264\"\325?9I\223\003N\"\236\277\3436\242\254\310\365\321\277\334\235\2477\233\311\351\277\361\366\0307RS\322\277\007\376t\303\316\361\352\277\3607\351}\207D\331\277\242]\3724G4\350\277\371\267\215/\343\202\331\277)\352~\260j\376\355?\201<\001\024:Y\340\277\310\367\204\336\352+\330\277\234\217\020\214\2509\333?Sw*\331B\001\325\277\003`\010\227 \026\241?\013k%9\241\353\300\277O7X\000\025\342\324\277\347\253\372E\307\367\000@n\367\027\356U\274\325\277l\317\322R\321M\360\277Cjl\305}\271\356?\233\375\276o\202\005\350\277,\032\231+\275_\303?\316O\344\364\301\373\362\277\034\246\177\332\372&\366?W\370\314\370\245\021\334\277\262\374\te2\260\341\277V\324)\300Y\251\265\277\372v\275\350\255\221\322\277Q2\355\027\264\236\270?\226lk\301c\243\313\277h\035M2\363\236\346\277+7\3069\246\350\323\277\205O\365O\303\235\332?\314/{\010+\354\362\277\2507\305\360\251Q\327\277\377\215\201\240.\005\320?\205\275\2433\235i\347\277\260\324\226\260\356\030\270\277\310<%\241\027L\342\277\213\035\337\370a\230\347\277y\217I\335Z\253\360\277x\233_\330\375b\314?\033\335V\314\347\214\344\277\244\357\026i\216\323\361\277\361Hovp/\234\277\355\017\244\342\002\326\363\277\251|e\263\326q\341\277XIN\316\226T\350?\313lF\353\211\031\315\277\330\034\005\0308\271\342\277\263\236\023\3373\242\357\277Q\325UG \244\360?\253\337\206\244\036\n\362\277\217\0205`u8\370\277\252\214\264\235\021D\006@\262\317+\310\215\325\333?\227DQ\177t\303\005@\001iJ\312\230\364\345?Aw\341u\213\204\324\277\222\353\310\241\000\223\304\277w\375,\251\023\014\347\277$\236\313\304x\274\353\277B@\n\204\236\036\366\277\254\250\257\2621\244\343?D\324\340\\\242,\265\277\323G\337A\372c\224\277\257`)\304\201\032\371\277F=$X\033\265\345\277\020~\031u*0\353\277\264\034sQ\311\277\341\277\013\270\326\222\232\377\331\277t\032\275\270\232R\305?p\225\0255a~\361?\332\211\037^\310\334\353?\330\034\005\0308\271\342\277\314/{\010+\354\362\277\344\233\025,JO\317?aOc\211T\244\331?\201\211\262m3m\351?n\367\027\356U\274\325\277\377\017\355E\272R\364\277\237~a\217\345\025\357\277\233kmS\\\321\304\277`\2655\276@\021\361?n\367\027\356U\274\325\277\326IM\205\232\275\353?\257\035q\277\320\221\350\277\264\034sQ\311\277\341\277\246\336\234T\252D\357\277\025\017m#I\222\327?\361\210jSx\207\345?2\324\227\371\352\257\264\277\3011\245\375\370\270\264?A\320s\342H\273\337?\364\260\257\356\374\365\372\277\0043\307\370\335}\275?>\220l!<\007\366\277=O\321\302\345\252\330?\'\246\017\212\351\310\251\277\260\350\201\213_\303\343?\205\275\2433\235i\347\277.\277\244\206\250S\234?c\325p\221\030\370\274\277\330\214V\000MK\205\277\355\017\244\342\002\326\363\277\325\267\373ht\211\330\277\2532Z\010I\016\273?:P\232H\016\350\365\277\036\320\341\033\332\301\336?\304\216\244\344\017a\325?\314/{\010+\354\362\277\34517\304g\262\265?Q\3351\366\r\003\346\277\342k\221\3409\304\306\277,\245\021\034\342\366\242\277\267\177\224B\021X\362\277\352]\036\302$\'\352\277b\032tU\343\325\304?\367)v_r\247\354?;\235\026\272(g\345\2776&m\357\r\342\366?.\246\310=\262\243\366?\031\000\246\344\001\006\365\277\276k\377\031\313\312\305\277\021\216\312\003\346\201\320?B@\n\204\236\036\366\277\351\313c2^\007\001@\0043\307\370\335}\275?\332\246\351j\023\250\256\277\352\034N{\3575\343\277z\334\305Nu*\340\277;\251\367\314\354\211\347?Q\036\002=C\364\354\277\252HK\351\222<\232\277\253\234\316\237m\201\341\277\2438\303^\261#\336\277\355\017\244\342\002\326\363\277\256N\211\250*\305\324?\014\233\251\204\261v\311?\364o\337\247\307\004\364\277\017\370\250k\310\036\332\277\323G\337A\372c\224\277\355\017\244\342\002\326\363\277\264\034sQ\311\277\341\277\240vP\370\030\"\320\277#\020\177\014)L\365\277O7X\000\025\342\324\277\357l\330\261\370\022\316\277\031\376\275&\206n\353\277z\334\305Nu*\340\277\253\325\224\036\366\352\276\277\323\035\003\206?\213\351\277\255k\266\266\023N\305\2771N\212\361&\\\321?\355\017\244\342\002\326\363\277u\351\244\317@\037\351?\222`P\261\333\373\244?\344\310\363\310\356)\345?&\312\025\304\323\356\355?E\350\3137\023\327\340?y\217I\335Z\253\360\277\364kq\320PU\001@\202\017\356\216\266\351\360\2778t\335?\346,\003@\356SP\306q*\001@\366\233^\217\001\314\317?\035\270\037\366Q|\332\277\322N\033o\231\276\325?\204/W{M\371\360\277\254>\330\031os\357\277}\2368\265\r,\356\277xN\256~\004O\323?\212\205\316\323\2501\362?Z\252\207\001cU\357?\304\374R\310\351,\342\277\311\005N\257*\346\363?\307(\235\307D_\344?h\035M2\363\236\346\277\032H\003\317\327V\226\277\354\367\026\245Y%\331\277\320\270\371\326{[\337\277\342k\221\3409\304\306\277/k\267\377\017\345\301\277\352\034N{\3575\343\277K\316w\006:\027\322?\00774s7\357\322\277*l\265m\027\267\310\277X\267\374\261p \325\277\242]\3724G4\350\277\216\006q\363\013B\371?\271h&=\273\001\344?d\337b\027A\027\360\277\263\232<\224\034\007\307?\367\035\225L\256\204\352\277\036\233\362\347h\363\311?I\214\016\346\221e\201\277V\035\004\317;\"\346\277\3011\245\375\370\270\264?O\311\251\034;\026\350?\371\267\215/\343\202\331\277\246\225\360^\207\364\362?\025\027I\3226\361\374?\205O\365O\303\235\332?H]\215D\262\304\345\277+\220X\246c\037\337?\204/W{M\371\360\277\225h\224vL\010\343?4\317,\021\212l\330?\025\004\200\357B;\002@\350vt\205\366\024\322\277\221(\302\235\036\351\342?\352\034N{\3575\343\277\244\266\"\321FA\320\277c\325p\221\030\370\274\277\001\367\226\202\350d\374?\306im\016zP\353?\334\235\2477\233\311\351\277\255\375\007\3239\202\350\277\355\017\244\342\002\326\363\277_h\271L&\222\341?x\233_\330\375b\314?\336+V\224k\271\000@\325\267\373ht\211\330\277jI\2271N\321\350?\332\246\351j\023\250\256\277\234\320\253\352\376\225\370\277\'\017\266\206\000\017\330?\237\370\360\205\203\004\336\277x\205\205p\361\264\361?\355\017\244\342\002\326\363\277\331ub\234\026[\364?0\233;K p\312?Q\036\002=C\364\354\277eJ\225\237U\243\357?t\2455\251\277\351\244\277\325\267\373ht\211\330\277\256\217Y\357_\266\333?\232e\256J\311\236\362?4\317,\021\212l\330?\020\267\330$\223-\323\277\233kmS\\\321\304\277\273|\256\026\216\356\341\277u\325\347\r\217\235\361?\355\017\244\342\002\326\363\2773~\253;\231)\354\277\361\016\333\\\332\230\326?-\036pv\324\372\353\277=\275\177\246\277v\345\277P\016J\337g6\322?\363\234\362,Kt\343\277\004\035V\004r\273\010@\234N@EsH\324?\t\036\336\257e\001\353\277\371a\004s/\272\256?B\t3\222\261\270\347?>\016\001|\260\271\321?4\267j\353\001\'\324\277\273\210\217)R\021\344?b\032tU\343\325\304?\344\244\355\216\004\004\241\277\240Ir[tG\352?\317\3350\255\021l\351\2771^BO\002\032\354\277\246\017\200U%\343\361\277\203hK\023\225\213\342?\344\314a\240e\331\007@<h\'\206\267\230\340?y^f\334\337\014\356\277\210\270\325I\236h\335\277@w\026^j\031\376?\267\005\005Lsi\363?\\\312\360\355\371d\357?\214\350\357\304\360\311\342?\230\036&\312 \347\356\277\254\260\213a\037\003\371\277j\317\007;\260\342\331?\356\231\031P;\253\301?\357l\330\261\370\022\316\277\370\357\276:-\211\026@\321\t{\254l\236\353?\032H\003\317\327V\226\277\17781\230B*\335\277V\350\024\233\312S\341?#\020\177\014)L\365\277Q\036\002=C\364\354\277\252OR.S\002\362\277\021\0206\251q\317\364\277\027\251e\006~\220\346?\3475\331&\240\270\364?S>k)\332\003\355\277\226xL\324\'\306\335\277\350vt\205\366\024\322\277tE\263\227\303\225\361?\355\017\244\342\002\326\363\277\000gb\014\035]\374?1^BO\002\032\354\277\235\035(\\\031\025\350\277\351\232\027\276B}\310?\007\376t\303\316\361\352\277\n\355\305\306\013\316\316\277\361\277AEe\355\363\277|=\377\201A+\347\277V\\N\374u\373\003@\351\232\027\276B}\310?\\\353\355w\332\034\303\277f\233\026uF\346\313?V\350\024\233\312S\341?\322\310\252e7\255\344?}\216\200W2n\323?i5\332o\234O\361?\261=\332\253g\241\350\277\205\000\\8N\362\367\277\334\231\320\354\203.\301?\022\226\246\262\323\340\365?\364o\337\247\307\004\364\277\020\200\0013\246\307\364\277`xq\252\001P\334\277\344\233\025,JO\317?\240vP\370\030\"\320\277]\005\230[\336\371\360?\332`t>\271\356\246?V1\357\251\254\314\261?\251\277\035\270\207\372\361\277*l\265m\027\267\310\277\017\276\024R2\210\224?#\317\343\255\322\357\327?9\017\377\351\267\213\330?\315O\031\335\240\220\334? \035)\245\025\254\344\277\207\351\3552\370\233\351?\364o\337\247\307\004\364\277a\311\362\177\362\222\350?\003P\364\006\307\006\336?j\317\007;\260\342\331?B\233\204\256\327\354\312?,\245\021\034\342\366\242\277@\260\325\r\323\026\366\277\205\311\204Fa\214\351?\306im\016zP\353?TN\034\270\225U\322?f\377\313\003\330&\360\277\020\267\330$\223-\323\277\377\017\355E\272R\364\277\323)\344\230\003\256\353??\325\014\344h\'\360?\350\010\306\241\034I\345?\241U\036\206Y\325\362?\360+\237\367\"6\001@\231\234\205<\266\004\341\277\303\257\326V\317\255\362\277\270\017\311\270\334_\362\277(\316\345?\313\035\321?\244\266\"\321FA\320\277Cjl\305}\271\356?6\236\024(09\354\277^\247\241\325\337\353\376?\313ho\240r~\344?:\316.\243\202\232\321?\025\017m#I\222\327?\270\017\311\270\334_\362\277\014\320\230\270\"E\336?\324\354\352\234\345W\315\277Q\036\002=C\364\354\277\303v\027\247f\260\372?\303=#\017\037\036\351\277c\325\236\252\327 \361?2`*\r~\261\365\277V\035\004\317;\"\346\277\'}dj\332\332\344\277\334\235\2477\233\311\351\2773\350\202\324[Z\340?c\351[l\211\242\350?fNe\033M\322\322?\267<\334=`\317\341\277Y\010~\207ac\341?(\316\345?\313\035\321?9\017\377\351\267\213\330?\325\363\313\235\365~\000@\344\233\025,JO\317?\0307\262\276\315\000\375?\376\266\217\301\333\260\322\277\332\246\351j\023\250\256\277\352\034N{\3575\343\2774\267j\353\001\'\324\277V\035\004\317;\"\346\277\223\316\233\223\027\n\324?Ak\000c\307a\302\277\313\\\216\215\256[\342\277\307\323\341\245\236\303\261\277Y\010~\207ac\341?t\2455\251\277\351\244\277|\006(\220T\305\370?\356\231\031P;\253\301?\367\334\304\005y\223\343\277t\2455\251\277\351\244\277;\255e\244c9\n@\265\357_\314EP\362\277\311\033(\0277\224\316?\3162\354\316\267\007\274?D\324\340\\\242,\265\277\315O\031\335\240\220\334?\036\320\341\033\332\301\336?\363\234\362,Kt\343\277\220]\261\321\217\267\347\277\003\300\212\250\034j\364\277\317\351\021\300\325\216\353?\273|\256\026\216\356\341\277\3436\242\254\310\365\321\277d\337b\027A\027\360\277/k\267\377\017\345\301\277\275\234\027\003%\376\341\2779I\223\003N\"\236\277\004\027\000o\177t\374?\363e\033;^\016\365?\330\034\005\0308\271\342\277KH\007\375\327\005\341?Ak\000c\307a\302\277\317\234`f\334z\342\277\261=\332\253g\241\350\277\026\224\264e\016C\002@X\317\276\327\370e\331?\2267|\215\362\324\326\2776\236\024(09\354\277\337\20692Es\373?\217\317d\031@G\361\277AJ\003\331\346\251\356?\350?\235\223\t\257\363\277z1\201p\033\306\262?\211\365\231]\335)\362?\030ll\n`:\310\277\032\032P\310\005\343\302?\251\366\364\251t`\320\277x\233_\330\375b\314?\211o)T{\030\361\277h).E\267\301\350?l\317\322R\321M\360\2777(U\255\211y\340?\322N\033o\231\276\325?tOw\004-\214\360\277\\\353\355w\332\034\303\2772\346\232\026\340\302\366?]\017\221\260&\205\331?\231\234\205<\266\004\341\277Q\036\002=C\364\354\277\377\316Q\347c\366\326?pzQU3_\215?\'\246\017\212\351\310\251\277\2072\310A\332\024\272?\317\234`f\334z\342\277\3162\354\316\267\007\274?@\250\371^\345\267\340?\0043\307\370\335}\275?j\317\007;\260\342\331?Y\232\317\243\207\227\304?h).E\267\301\350?\311\316v\275=\200\325?(\316\345?\313\035\321?A>\"\306\"\207\354\277\036<\n\346\270u\002@\307\353\243\313&\t\306\277\213\217\222@\022(\361\277\301^\212i\275\377\357\277cO.\241u\017\360\277-\036pv\324\372\353\277\273O\320y\351\023\334?=O\321\302\345\252\330?\324\324(w]\022\271\277:\316.\243\202\232\321?\326\317\275\216\374\316\334?\341\333\363\366\315\320\000@0\020\003Q\352\016\030@G\020\021\323\227E\366\277\235\035(\\\031\025\350\277\244\266\"\321FA\320\277%m\263\333\036\211\317\277 \031\273\315\236\374\001\300\352\034N{\3575\343\277*l\265m\027\267\310\277\312\231\207\211\314\261\300?O\334\205\336B\363g?\320\270\371\326{[\337\277\303\257\326V\317\255\362\277H]\215D\262\304\345\277}\317\033\266\210\312\360\277\265\266\240\034\335R\372?\242\034*\356\021C\341\277\355\017\244\342\002\326\363\277\356\251\321\255\026i\354?li\000\036\345\340\350?e\365\007\227n0\361?\377\215\201\240.\005\320?\362\032\274o\236\273\310?a7\241c\314^\325\277\220i\222\344S\332\351?\322\310\252e7\255\344?\327\317\210\246\035:\363\277B\233\204\256\327\354\312?\\8\237\321\3230\334\277P\026&\216U\225\367?#\020\177\014)L\365\277\330\345-&KS\364?\361\210jSx\207\345?\366\233^\217\001\314\317?\271h&=\273\001\344?\2532Z\010I\016\273?g\025q\203\005@\361?\273\311_p\207\002\353?\256VeW\030$\372?\252\325\3027\265\023\363?\352\034N{\3575\343\277\005\352\354\351\373\004\355?KF\037?\\n\367?\214\350\357\304\360\311\342?\307(\235\307D_\344?\035wO\257\034\213\323\277]\316\300i\361\223\322?rl\331\372\364\251\312\277\034\3517\337\253\257\346?\253\234\316\237m\201\341\277\256\233:\002$\331\315?\202\017\356\216\266\351\360\277\344Nd\322P;\326?\035>\220\377\263\215\353\277\231\234\205<\266\004\341\277J`,$\376\010\243?\364\260\257\356\374\365\372\277\334\235\2477\233\311\351\277\026\316\234\334\023\241\320?h\035M2\363\236\346\277KH\007\375\327\005\341?!a\230\313\226\341\250?CG\227\'?~\220\2778\353[\261k#\302\277\307\323\341\245\236\303\261\277d\337b\027A\027\360\277\305\020\020\212\233\256\371\277\342\365\006Nr\231\364?\027\3525M\263\201\355?\222}\032\276&\307\347\277\224\235\203\252\275\326\347\277\256\310\030\237\310\263\343?\255\365+$L#\363?/6\375\263}\253\366?\343\t\304\017$\033\354?\003\300\212\250\034j\364\2777(U\255\211y\340?y\'\217\352\362\246\377?\355\316\010\204\254y\326?k\2167\364z\361\322?\2776\020\346Y\374\320\277\273\016\0003\264\"\325?x\227Zt\'\237\377?\030ll\n`:\310\277#\020\177\014)L\365\277\332\266\375\372l\267\321\277/k\267\377\017\345\301\277W\370\314\370\245\021\334\277 \324N\22633\264\2774\212\214N]L\356?\0332\022\356\215(\267?G\216\245-\014\370\321?\374\034\227\336\246\262\343\2778P\3170\355|\337?\302)\2335L1\353?\013\270\326\222\232\377\331\277\242]\3724G4\350\277\025P=j~\203\336?\347\370\024\023a\367\337\277\321\375\231\231\250{\351\277\373]g%\334\243\352\277\2742\243k\000\213\273?\200\275\3147w\242\220?O\265\354Z\211\224\360?O7X\000\025\342\324\277\177(y:gl\342?i~\206e\277\237\355\277S\007\2247\355\235\376?9I\223\003N\"\236\277\376\005)\331P\\\365?\332\266\375\372l\267\321\277\276\270\260s\304\336\336\277)\251\256i5\r\347?\322N\033o\231\276\325?\355\017\244\342\002\326\363\277\025\017m#I\222\327?\227O>\263z\032\333?\277w\340,\217\355\327\2772-\301\362\007\373\t@\035wO\257\034\213\323\277\371\267\215/\343\202\331\277Y\020Z6O\302\366\277\376}\320\021s\263\352\277\020=I.\365>\344\277c\325p\221\030\370\274\277Q\246Z\004!\235\367?\377\017\355E\272R\364\277\177\266\305\362\266\334\370?=7\017\235]e\324\277\204\265\307\204\257\n\362?s7\352\306\203\333\325\277>\351\230SZi\037@O7X\000\025\342\324\277\205\311\204Fa\214\351?h\324r#\021&\266\277\272\265\242\256\325\200\363?j\317\007;\260\342\331?\036\320\341\033\332\301\336??\036\271\331\213w\354\277j\317\007;\260\342\331?\234V\034\364`\247\371?c\335zY\305\177\346\277b\032tU\343\325\304?c\351[l\211\242\350?\372v\275\350\255\221\322\277_\235\250\200\227`\346\277/\270hY\t\371\332\277~\034\230\'\243I\340\277\375\353~\365L\177\307\277Ak\000c\307a\302\277q\235\361\343N\335\346\277p\225\0255a~\361?\300\233\203e\333U\316?\217\216\311\272\351\352\323?\302\334\351\333R\035\342\277l]\037\013!\276\346\277\264]C\230\376\260\350\277;\235\026\272(g\345\277\374\034\227\336\246\262\343\277\342k\221\3409\304\306\277\314/{\010+\354\362\277\255\t\351\345\375\244\352?E\350\3137\023\327\340?\252OR.S\002\362\277k\020\243\231\006?\367\277\240\317\342d\326X\333?\032\032P\310\005\343\302?.\355W\215z\307\317\277\254\270g\020\rb\336\277F\212\325\261\024\311\356?|\267\216x\337\031\326\277v\234\363uG\013\340\277Y\327\232\206\346\304\376?\316\026%EY\376\372?\376\266\217\301\333\260\322\277\013\213\252y\274\022\020@Rw_\301!\226\376?\224\0177\362mf\361\277\270\017\311\270\334_\362\277h18\rdI\262?\217\317d\031@G\361\277\313ho\240r~\344?\247\\\374\306?b\341\277\367\035\225L\256\204\352\277z\334\305Nu*\340\277\274\032\341ExE\307?\244\211D4\242f\352?\337\366\317\323\232\326\321\277\221\323\006|xM\260\277?\036\271\331\213w\354\277\3216YI\021y\321\277&8\304\247\255\272\332\277\301^\212i\275\377\357\277\'\246\017\212\351\310\251\277\314\265\353\021\215\375\363?\254\270g\020\rb\336\277\302\334\351\333R\035\342\277\241\317\255|\367\303\361\277\261\267i\242\005\220\327\277\223\033M\355\020\036\315?\331\323*\tV@\262\277\016\035\340A^/\344\277\032O?\374v\261\327?\270\017\311\270\334_\362\277\231\325y\324\375\226\362?\335l\217NA\226\315\277wo\340\360\303\233\360\277^\336x\307\314Q\355\277F\317utA\351\330?\034\355\016*\303J\317\277\024\367\252\375\300L\323\277\2658\014\302h\240\336\277\332\246\351j\023\250\256\277\031\220\017C\254\242\336?\'\300\034o\213c\365\277i\3609\255o/\367\277Y\305\305\202\260\332\360?h\215\236\032\0101\211\277\243\323O\337/\312\260\277\202\017\356\216\266\351\360\277Q\036\002=C\364\354\277Q\036\002=C\364\354\277[(\347s\370r\341?\333\013\355\247\324\251\000@\260\324\226\260\356\030\270\277\026\316\234\334\023\241\320?x\205\205p\361\264\361?9\033\340\374{\256\312?Mf\210+\363}\367?R\254\260\231\023\344\003@HU\261\225\304e\360?s7\352\306\203\333\325\277\314/{\010+\354\362\277B\217\243\233\023\312\330?\232e\256J\311\236\362?x\274\\b\336\032\340\277\270\017\311\270\334_\362\277y\217I\335Z\253\360\277\227\210\375b\343\027\343?\340252o\204\274?\217\0205`u8\370\277\352i\377\324\350I\354?\025\033N6\r\265\311?k\232\030\007?\024\305?\351\232\027\276B}\310?Y\232\317\243\207\227\304?\221\345\t\231m`\362?\025\017m#I\222\327?\207\3250qF\032\362?R\260\036q\212\223\366\277:P\232H\016\350\365\277\014\217\310q\355S\327?\300\205\251\375\316\247\363?4\317,\021\212l\330?\376\266\217\301\333\260\322\277Nhp\351n\025\341?\026\316\234\334\023\241\320?\221\323\006|xM\260\277\211>FS\000z\356\277(3Y\277Lw\276?\352]\036\302$\'\352\277\302\334\351\333R\035\342\277\362Ov\2730\365\363\277q\235\361\343N\335\346\277\252HK\351\222<\232\2778}\255\315\221W\345\277\275\351\310\\\036\022\353?\\\312\360\355\371d\357?\357l\330\261\370\022\316\277!a\230\313\226\341\250?\233wNf \364\326\277\2507\305\360\251Q\327\277V1\357\251\254\314\261?KLu\324N\265\003@\013\276a\020l\333\017@\2267|\215\362\324\326\277Q\347*KV\216\376?O\334\205\336B\363g?+\376\006\212=\353\353\277\2375\265\231\302\305\362?]\033r\303\352\247\313?\005\235;\220\002\361\343\277\324\324(w]\022\271\277\306\034\274\264\200<\342\277\212\233\250;\265\337\314?\252OR.S\002\362\277$\236\313\304x\274\353\277\034b\2269\236\263\257?\345\330\r\313Jg\000\300q\340\251\350\377e\367\277\316O\344\364\301\373\362\277\000]i\267\324\321\343\277\335l\217NA\226\315\277\275\351\310\\\036\022\353?\377\017\355E\272R\364\277ews<\372}\325\277G\020\021\323\227E\366\277\217\317d\031@G\361\277\033\335V\314\347\214\344\277\361\311:\232\255x\354?j\317\007;\260\342\331?^P,\017}\341\366\277cO.\241u\017\360\277\264\034sQ\311\277\341\277d\337b\027A\027\360\277HinWv\347\347?h\035M2\363\236\346\277c\036K\240\372p\355\277O\265\354Z\211\224\360?\253\335\236\346\242r\350\277X\317\276\327\370e\331?\302\334\351\333R\035\342\277\007\000]\201J\211\364\277\345\035L\351\366\007\352\277\355\017\244\342\002\326\363\277\221(\302\235\036\351\342?\261=\332\253g\241\350\277\270\017\311\270\334_\362\277:\326\nRp\371\366?\253\337\206\244\036\n\362\277\272/2\245so\362\277Q\036\002=C\364\354\277\310\266\264\227\265:\321\277\223\005s\205\004p\362?\273\311_p\207\002\353?\332`t>\271\356\246?\2438\303^\261#\336\277\202\017\356\216\266\351\360\277\321\375\231\231\250{\351\277\036\320\341\033\332\301\336?]\316\300i\361\223\322?\357l\330\261\370\022\316\277<l\376\320\3163\311\277f\233\026uF\346\313?\216\374w\236\303\266\340\277Y\020Z6O\302\366\277\300\233\203e\333U\316?\375\353~\365L\177\307\277\352\034N{\3575\343\277\307\323\341\245\236\303\261\277*l\265m\027\267\310\277O7X\000\025\342\324\277r\366Nh-\177\370?C\320>\372i&\366\2778\353[\261k#\302\277\355\017\244\342\002\326\363\277\355\017\244\342\002\326\363\277A\320s\342H\273\337?-\036pv\324\372\353\277\301\217mj8\236\362\277\331\323*\tV@\262\277\206\032\006\034R\317\305?@\250\371^\345\267\340?\357h\001g\341w\345?\302\334\351\333R\035\342\277i5\332o\234O\361?c\325p\221\030\370\274\277\3318\236\210\327\231\337\277h\215\236\032\0101\211\277r\366Nh-\177\370?\343\373\\\343d\340\000@\304v\342\276\207\033\321\277\325=lr\326\232\351\277\353u\253\377\315\327\364?t\2455\251\277\351\244\277F\267\263N\271\243\324\277\301^\212i\275\377\357\277\234V\034\364`\247\371?\020\200\0013\246\307\364\277\'\027\2225\356m\375?y\025\272\346\274\274\361?\306_t\2711\305\362\277v6!A[\236\370?\314/{\010+\354\362\277\3622~\225&\001\275?\377\017\355E\272R\364\277\300N\322\013\342A\325?\016\324\0053|\266\263\277\376\266\217\301\333\260\322\277c\325p\221\030\370\274\277\021\327v\371\010\322\374?Nhp\351n\025\341?D\324\340\\\242,\265\277}\232aj\366\220\305?7(U\255\211y\340?>\016\001|\260\271\321?\364\260\257\356\374\365\372\277Cjl\305}\271\356?P\016J\337g6\322?\247h\335\331\003\205\343?\2546\374j\201\024\372?\017\370\250k\310\036\332\277\220\034\341\212Z\306\340\277\207\234<\331\376\207\340\277KH\007\375\327\005\341?4=\333\364c8\345\277(3Y\277Lw\276?HinWv\347\347?\357\\ T\035U\343\277\341\351Z#\215\013\354?\2267|\215\362\324\326\277\2438\303^\261#\336\277z\334\305Nu*\340\277K\316w\006:\027\322?\030ll\n`:\310\277Q\246Z\004!\235\367?\032O?\374v\261\327?\003\221\217e\035c\373\277:\336\346\000^X\354\277v\234\363uG\013\340\277\301^\212i\275\377\357\277\373]g%\334\243\352\277m\345w\322\376f\361?\244\353\021\005\270\017\305\277qh\002\260\335\016\342?u\335\303\274|\374\346\277\332\246\351j\023\250\256\277\2601\\\232A<\264?\363\234\362,Kt\343\277\355\017\244\342\002\326\363\277-\036pv\324\372\353\277Y\327\232\206\346\304\376?e\375\343E\\\217\346\277\334\235\2477\233\311\351\277\211k$\360\244T\304\277\357l\330\261\370\022\316\277c\325p\221\030\370\274\2773~\253;\231)\354\277\223\325\203cG\235\014@Nx(GJ\323\333\277NpL\230\\t\366\277\334\235\2477\233\311\351\277q\340\251\350\377e\367\277\201\017#w\225~\332?\366\233^\217\001\314\317?\262\3052sEJ\363?\270\231>&\0255\300?\251O\207\0262\227\333?Q\036\002=C\364\354\277\270\017\311\270\334_\362\277\351UB\0237\310\364?\223\316\233\223\027\n\324?\260u\332d\361g\r@\3147W\267\030K\330\277\326\203\000\024\301\206\000@\361\366\0307RS\322\277\320\270\371\326{[\337\277\340252o\204\274?\323\035\003\206?\213\351\277d\337b\027A\027\360\277\021\317\232J\033s\327?\312e\223\0039\033\016@\326\317\275\216\374\316\334?gj\376\213\354\262\357?O7X\000\025\342\324\277\266}\254\204\225\300\350\277h\324r#\021&\266\277\213\217\222@\022(\361\277\223\316\233\223\027\n\324?#\264\313\352\254\270P?\205O\365O\303\235\332?\252HK\351\222<\232\277B\233\204\256\327\354\312?z\324\273\206\310\242\266\27721]\343=\323\260?\3436\242\254\310\365\321\277\324\033}lDs\000@ews<\372}\325\277\256\310\030\237\310\263\343?\0067i[\026\204\374?h\215\236\032\0101\211\277wk\333\214\355\327\303\277/\270hY\t\371\332\277\223\316\233\223\027\n\324?K\017HMo\010\331?\355\017\244\342\002\326\363\277\361Hovp/\234\277\205\206\314A\260\003\371?\370\350\245\030=\266\345?.\277\244\206\250S\234?\332\246\351j\023\250\256\277\364\260\257\356\374\365\372\277\352\034N{\3575\343\277n\274\322$\362\246\004@\024\353\311\352\374)\301\277\246\235\314\ruS\350\277p\225\0255a~\361?\225\237kh9n\361\277\241\232\3630e\212\306?&8\304\247\255\272\332\277\010\220\221\367\025\221\364\277\345)-\374\272*\354?\254>\330\031os\357\277\204/W{M\371\360\277\035\364\357*\323q\002@4=\333\364c8\345\277\311H\006\264\333n\344?v\234\363uG\013\340\277\270\017\311\270\334_\362\277Q\036\002=C\364\354\277\310\275\360\304T\225\222?\0067i[\026\204\374?6\335^Uj\022\n@6]D\341\372G\345\277\276\250\370\025\351 \344?\004\336\013\3277\342\352\277\215v<}@:\371?\315\277\257~\366\363\362\277\230\245\307o.\343\245\277\317\351\021\300\325\216\353?\241\236\312{|%\357\277c\325p\221\030\370\274\277"
      }
    }
  }
}
node {
  name: "tensors/component_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content: "\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277\217W\243\027u\307\000@\255[N\177\202I\370\277g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\255[N\177\202I\370\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\n?\262\302L\220\006@o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\255[N\177\202I\370\277o\031aR\246o\351\277)\340(\331:\375\365?\217W\243\027u\307\000@)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277Q\025\266\352\230\355\001\300\217W\243\027u\307\000@\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277\314\374\304\225p\266\007\300o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\255[N\177\202I\370\277\255[N\177\202I\370\277\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277\314\374\304\225p\266\007\300\n?\262\302L\220\006@\217W\243\027u\307\000@o\031aR\246o\351\277g\"\026\006\027\327\344?\n?\262\302L\220\006@)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277Q\025\266\352\230\355\001\300\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277Q\025\266\352\230\355\001\300o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?\217W\243\027u\307\000@g\"\026\006\027\327\344?\217W\243\027u\307\000@\255[N\177\202I\370\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?\255[N\177\202I\370\277)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277\255[N\177\202I\370\277\255[N\177\202I\370\277\037\334+1=b\262\277\255[N\177\202I\370\277\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\n?\262\302L\220\006@\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277g\"\026\006\027\327\344?\n?\262\302L\220\006@)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?\217W\243\027u\307\000@o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?\255[N\177\202I\370\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\255[N\177\202I\370\277\255[N\177\202I\370\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?\n?\262\302L\220\006@\217W\243\027u\307\000@o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277\n?\262\302L\220\006@\217W\243\027u\307\000@)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\217W\243\027u\307\000@o\031aR\246o\351\277\217W\243\027u\307\000@\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\255[N\177\202I\370\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\255[N\177\202I\370\277)\340(\331:\375\365?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\217W\243\027u\307\000@)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?\037\334+1=b\262\277\217W\243\027u\307\000@g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?\217W\243\027u\307\000@g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?\217W\243\027u\307\000@\217W\243\027u\307\000@)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\n?\262\302L\220\006@g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277\217W\243\027u\307\000@\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277g\"\026\006\027\327\344?)\340(\331:\375\365?)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277Q\025\266\352\230\355\001\300\037\334+1=b\262\277\217W\243\027u\307\000@\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?Q\025\266\352\230\355\001\300o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?\255[N\177\202I\370\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?)\340(\331:\375\365?\217W\243\027u\307\000@\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\n?\262\302L\220\006@\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?\217W\243\027u\307\000@o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?)\340(\331:\375\365?\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277\255[N\177\202I\370\277\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?\255[N\177\202I\370\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?\255[N\177\202I\370\277g\"\026\006\027\327\344?\255[N\177\202I\370\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?\217W\243\027u\307\000@g\"\026\006\027\327\344?)\340(\331:\375\365?\255[N\177\202I\370\277\217W\243\027u\307\000@\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277\217W\243\027u\307\000@g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?\217W\243\027u\307\000@o\031aR\246o\351\277\n?\262\302L\220\006@o\031aR\246o\351\277\255[N\177\202I\370\277\255[N\177\202I\370\277\037\334+1=b\262\277F\344\323@H\177\r\300g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\217W\243\027u\307\000@\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?g\"\026\006\027\327\344?)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?\217W\243\027u\307\000@o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277\255[N\177\202I\370\277\217W\243\027u\307\000@o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277\255[N\177\202I\370\277\217W\243\027u\307\000@o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?)\340(\331:\375\365?\255[N\177\202I\370\277\255[N\177\202I\370\277\255[N\177\202I\370\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\217W\243\027u\307\000@g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?)\340(\331:\375\365?\255[N\177\202I\370\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277Q\025\266\352\230\355\001\300o\031aR\246o\351\277o\031aR\246o\351\277Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\n?\262\302L\220\006@o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277\n?\262\302L\220\006@o\031aR\246o\351\277)\340(\331:\375\365?\255[N\177\202I\370\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277\n?\262\302L\220\006@\037\334+1=b\262\277\n?\262\302L\220\006@g\"\026\006\027\327\344?Q\025\266\352\230\355\001\300o\031aR\246o\351\277g\"\026\006\027\327\344?\255[N\177\202I\370\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277\255[N\177\202I\370\277\255[N\177\202I\370\277g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?\217W\243\027u\307\000@\037\334+1=b\262\277o\031aR\246o\351\277\255[N\177\202I\370\277)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277\217W\243\027u\307\000@g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?Q\025\266\352\230\355\001\300\255[N\177\202I\370\277)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\255[N\177\202I\370\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277)\340(\331:\375\365?\n?\262\302L\220\006@o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?)\340(\331:\375\365?o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\314\374\304\225p\266\007\300\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277)\340(\331:\375\365?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277Q\025\266\352\230\355\001\300\255[N\177\202I\370\277\217W\243\027u\307\000@g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277F\344\323@H\177\r\300g\"\026\006\027\327\344?Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\n?\262\302L\220\006@\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?\255[N\177\202I\370\277\255[N\177\202I\370\277\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?)\340(\331:\375\365?o\031aR\246o\351\277\217W\243\027u\307\000@o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277\n?\262\302L\220\006@)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?\255[N\177\202I\370\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\217W\243\027u\307\000@o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277"
      }
    }
  }
}
node {
  name: "tensors/component_8"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_9"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_10"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_11"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_12"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_13"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_14"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_15"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_16"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_17"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_18"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_19"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "tensors/component_20"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_21"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "tensors/component_22"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_23"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content: ".\000*\353\270Sm?Ay\035\'E\225\355?\376\263\350\356\004\330\274\277\364Yf/\217-\277\277\300\367\302\271y\204\364?\351N\251\267q-\357\277\236\247\025\345[\354\342\277\377\257kD\373\207\335\277\351N\251\267q-\357\277C\372\316 >\234\341\277\303\221<l\347\247\334\277\245\002%\200\3357\334\277xk9Gz\327\327\277\250\300\3709\317\302\360?K\324M\016\027w\323\277\376\263\350\356\004\330\274\277\226{\341\340,\270\337\277\003\341\251\316?\255\273\277\010\016k\256z\202\272\277d5\366\362\211\332\354?\342\233F\000?W\306?4s\213\201\215\034\345\277\313>\001\036\277L\347\277\322\227\357]\357\266\321\277K\323\237\346\272?\353?(\300!&!\247\324?X\203:\277y\234\344?\245\002%\200\3357\334\277\214\037>\306e,\323\277\224\241i\227\215|\345?0\006\314\n!/\364\277ri\021H\357V\301\277\263\306\2273\022\267\363?\270\343\343:\312\302\316\277\207\333\3104|\240\364?`\005f\220\241\354\306?\202mh\352>\367\325?\372\202\252d\300\262\336\277\370\2502\033!w\344?\221\300T\343`H\003\300C\372\316 >\234\341\277\263\266\"[\217\355\317\2776M\003\313,X\317\277\007\273\177\251@\364\001@\346x\256\030\334A\304\277\376\263\350\356\004\330\274\277\303\020\254\276>7\325\277|\305\264b\266\342\315\277@8\213\020\316<\370?\353z\326\027g\302\332\277,\306\306\317\265w\332\277P\352Z<\243\225\362?\2134\243|\347\357\374\277 \375V\352\366\202\362?\233\250\242\300g\215\336\277^\307\242\374\327\254\370?kd\371yf\'\347\277\354\365\310\277\264\001\304?\263\014U\034\357\226\260\277\221\300T\343`H\003\300\263\234\254z\276\231\363\277\253\327\222Cg\202\333?\227\366\323\210z\367\310?cs\323.j\021\360?.\332\236\252+\232\370?FO9\022+\027\325?Z\006\r\024\304\204\347\277\313\023h=\017\370\356?T[\212\t\216W\310\277x\225$\000\316\364\347\277\221\300T\343`H\003\300\270\343\343:\312\302\316\277\240T\323\362\371\361\325\277\221\300T\343`H\003\300pp\232\272\2674\007@7\035z\014~\t\341?\306e\026\260+\262\350?\361\244\310t\364~\342?\316\347A\201S\002\313?\370T\\\251y<\344\277\245@\365g2\363\364\277\004\211V\262\216\"\314\277\346x\256\030\334A\304\277o|4W\317\242\377\277\026e\004C,\035\354\2771\363\207\257\360L\331\277\247%\304\013z\354\265?d5\366\362\211\332\354?\233\250\242\300g\215\336\277\250\202(Rz\007\350\277\2215K\364\361J\362?\370T\\\251y<\344\277C\372\316 >\234\341\277\302M\333\322\3026\360?\210\207\345nI\352\371?\337F\334\016R\334\342?\270\343\343:\312\302\316\277\214\312\271,b\272\352\277cs\323.j\021\360?\2717\272\254q\375\336\277\262\233\013\247\355\335\365?1\363\207\257\360L\331\277\264g\261(6A\005@H\'\220\000yq\340\277\021\013\211\'\360\021\346?\014_X\365]\255\356?+I\263\314\026W\262\277\035|\262D\211\367\370?h\017\217\210y\254\303\277\235\010\367\325eW\244\277\2134\243|\347\357\374\277\235\010\367\325eW\244\277\235\010\367\325eW\244\277\264\010\330q\345F\321\277\264\010\330q\345F\321\277z\353<\031\027\247\343\277\334r\002\313\r\322\326\277\341 TX\361\027\335\277\221\300T\343`H\003\300\035,\373\361\020\227\023@\226$<\354\327d\350\277\233\250\242\300g\215\336\277F\247\214.\334\241\324\277\031:\214\256\314^\340\277\007\261\006hzg\350?2r\367\001H\334\321\277\270\343\343:\312\302\316\277\014\212\361\325\r\002\347\277\235\313AL\004B\270?H\'\220\000yq\340\277\325\230\203\3354\367\344\277\331\332\251s\361\217\375?\346M\0258,\355\333\277\240~\276\253M\017\346\277m$\373\3424\017\365\2773\007`\212fo\367?c\364c\334\022\202\367?\023\343\337\025>l\321\277\352\267\005,\353\301\365??X\n\334\346H\t@\021\214\031\325\230\202\355?\315j.~\264\341\322\277<w\365\'\272\024\347\277se\224\235\345\006\322?\340\216\235 =\261j\277\245\002%\200\3357\334\277\225\376\315\335\215\227\267\277\361%Y\"\235\357\351?4s\213\201\215\034\345\277\245\002%\200\3357\334\277\337s\226JS\022\352\277R\2033\033@\375\354\277\363\333\370\031\223\323\001@\216D\376\254S\302\273?|\035\010\177gm\275\277\271\266)\377\310\214\327\277\311\345\031\202\310\201\324?_\207\244e\246\224\346?\364\347\2342\rO\363\277\245\002%\200\3357\334\2772\2334\223?\302\331?\340\216\235 =\261j\277mN\346\233\210,\365?}@\247\n\004\"\327?H\'\220\000yq\340\277\203Z$\217\016\025\373?\225\246z\301\334\014\310\277\313\023h=\017\370\356?3\246N\250\326\n\001@u\240\355\327\216\255\255\277t\323\340\357]\225\376?\360\247\227\367\241\227\331\277\376\263\350\356\004\330\274\277\344\240W*\216\347\350\277\036\247>\321\255\320\366?\221\300T\343`H\003\300Z\006\r\024\304\204\347\277F$\2401{\302\314?\257\005\002K\376\216\342\277p\221\272Y\241\374\345\277\234\317\276\366\r\222\327?\326X\205F\003\337\362\277\"\353\263b\227\\\325\277\377\331V\375N\245\355\277\311#W\240\264\253\221?|\253>\202\345\216\361\277\350\340\\e\371\236\362?SVy\337>\307\345?\217t\250\267R\247\346?G\221yP\376\246\362\277\303:\227w\222T\345\277\274)\"R\003,\242?\250\202(Rz\007\350\277$\217\343\233\334\201\266?\002\003\265\332\226!\342?\271\266)\377\310\214\327\277\n\262\232\347\277\247\333?_\264^\241\247\312\355\277O.\311)S\202\311\277\030\273\034\\u\317\347\277%*\030\3121X\361?x\225$\000\316\364\347\277\026e\004C,\035\354\277\217\3658e\373\027\356?\311\273.\311td\344?\334\036,Yf\227\306\277j_\350O\027\227\304?3nzW>\214\302?U.\320\315\214!\321\277\245\002%\200\3357\334\277\337s\226JS\022\352\277R\2033\033@\375\354\2776M\003\313,X\317\277x\225$\000\316\364\347\277\2714\353)\304\344\347?\270\363X\023M\214\362?#\024\361\363\216B\335?V\253\343\320+B\311?\317c\274\275+V\205?\221\300T\343`H\003\300\245\002%\200\3357\334\277]\260\373\236\264q\343?\033\346\233\224\016-\353?W\260\364\372z\322\353\277\320@)\035J\315\355?\036f\237f\253\374\326?>N\236\356\2537\352\277\0218Cc\361G\355\277>\315\rA\003\307\342\277\202FL\264\230\362\334\277\221\300T\343`H\003\300n;\242@XJ\352\277\245\002%\200\3357\334\277\342\233F\000?W\306?Az\313N\241\314\325\277>N\236\356\2537\352\277\202mh\352>\367\325?\322\227\357]\357\266\321\277\005\331\257y,\r\315?\252\256U\262o\234\323\277\007\336\300\243{\235\357\277\0020o\026\230W\351\277\360\3220\330Q\354\301\277b^M,\230\267\351?\334r\002\313\r\322\326\2778\233;7ya\301?\235\313AL\004B\270?\374&\332\235\005\330\277?\235\010\367\325eW\244\277K\3768\307j\224\343\277\351\315\030\n\311\274\347\277^\235\267C\204\217\370\277\221\315\217SIr\331\277\214\312\271,b\272\352\277S\337\017\315\265\003\216\277\241\273M\242\335\001\233?\344\037\307|\345v\341\277\351N\251\267q-\357\277\202\357\246\277C\237\345\277\373\251\306\232f\267\327?K\262\226\027\277\000\000@\202mh\352>\367\325?xk9Gz\327\327\277@\267\372b%\314\360?\237\022\223\264&b\370?xk9Gz\327\327\277P*L\177I2\332?\233\250\242\300g\215\336\277v\360F\237,\230\276\277^\235\267C\204\217\370\277\034\033\241b\371\222\002@\311\273.\311td\344?=\310\374\026\2646\300?63\215\352[\004\363\277\221\300T\343`H\003\300w\226\322\'*,\300\277O.\311)S\202\311\277q\321\253\234G\231\375?ib\267\322\304\257\353?d6\244\032\346\021\325\277\322\227\357]\357\266\321\277\351N\251\267q-\357\277\325\230\203\3354\367\344\2774s\213\201\215\034\345\277*\330iW\025\236\367?\031\220\203{\305z\357?\327\304\260=*\214\320\277\240T\323\362\371\361\325\277^F\022O/<\361?\250\202(Rz\007\350\277\240~\276\253M\017\346\277\245\002%\200\3357\334\277\200l\324j\371\266\342?n\272\021\223\257\331\342\277\375\201\035\211\264\021\343\277\030\273\034\\u\317\347\277+I\263\314\026W\262\277xk9Gz\327\327\277\332F\325j\030=\353\277\375\201\035\211\264\021\343\277\236||\004\254\227\352?g\014\237\271{\375\357?\243\324\326\304\226\301\341\277&\034\362\354\333\201\263\277\373*WH\017(\337?4s\213\201\215\034\345\277<\312\035r\005\030\317?\003\341\251\316?\255\273\277\332\0056\000\026i\373?\226\243\253>/\364\340\277\274\267\275~\016\315\352\277r{\247{\303\001\364?4s\213\201\215\034\345\277i\214\242\213\030\315\333?\247by\225\333\001\242\277i\215P\263t\004\344\277\227!mi*L\321?\327\360\274Q\317\212\357\277\003\233\354\345b\315\376?\221\300T\343`H\003\300\302M\333\322\3026\360?\366|\005\273+\342\330?H\'\220\000yq\340\277\245\002%\200\3357\334\277\345\212DL\260\354\366?Z\331R\330\302N\340?\341 TX\361\027\335\277\226\367\201\260\326.\341?\2121\341M\305R\360?\245\002%\200\3357\334\277=p\251\372\002\254\260?ZZ\343\205k\277\347?C\372\316 >\234\341\277\0268J\007+\347\344?\353\244\301\320\272\337\352\277\311#W\240\264\253\221?\"\226/\311\223\352\354\277*\031\t\302\027r\347\277\333\205F&>\264\361\277\274\013\224\360\265\007\353?F\321w\347/\277\344\277\245\002%\200\3357\334\277zl\315\306\277\027\353\277n\016\350\004W\024\343?\0167\257\343\253\007\332\277\225\376\315\335\215\227\267\277\305\245\024G]\312\372?\315\227\350\271\265\027\312\277\220\373\035Jx\002\200\277\216\241b\363S\335\355\277P*L\177I2\332?\362\260l\215n\372\003@T\354\217\217\271\221\363?\205\231\225J4\214\341?\244?T\224a7\367?@\247\205\212\242\002\315\277\353\371Ej\276Q\323\277\370T\\\251y<\344\277\243\324\326\304\226\301\341\277\345\177A\007\007-\003@\233\250\242\300g\215\336\277\247\003\271\377\"x\357\277\351\240^\316\307\206\340?\023\020\232Q?\242\310\277V\253\343\320+B\311?v\022R\253\203\014\345?\235\010\367\325eW\244\277\371\024^\022H$\362\277Y\210K\351\310,\307\277X\004\313l\"\r\354?4s\213\201\215\034\345\277\372.\324\362\030x\316\277^\235\267C\204\217\370\277\221\367z\014\235\217\351\277N)\270\377\003\362\346?\214I)\177\271I\343\277\270\343\343:\312\302\316\277\234\274z\233\335\257\374?\245@\365g2\363\364\277\321U\257\037\034\'\364?\205:\325\264{\002\257?\311f\252/q\362\333?\337\362\005\235\252\241\342\277LQa\021\266\227\313?\202\305\273\006\360\201\325\277\207\034h\237~t\344\277\353\245o\370\026\027\303\277;\316\232\034\017h\336\277\006ptQ\003\017\363?\303\020\254\276>7\325\277d\2674\310\216\202\334\277\221\300T\343`H\003\300\243H\\\363\334\001\250?\220\213O\025v\342\373?4s\213\201\215\034\345\2774H\362\240\335\307\354?1\363\207\257\360L\331\277\202\305\273\006\360\201\325\277\210\232)\312y\314\324?%\354G\342\334\234\350\277\250\202(Rz\007\350\277\026\243\324*\201\330\364?U.\320\315\214!\321\277.\351e[R,\264?=\310\374\026\2646\300?\245\002%\200\3357\334\277m<Ph\264\201\302\277\336\206\332\245\203\364\364?\237\221\002\007~\361\360?\200l\324j\371\266\342?\216 \322E\253l\346\277\036\275D[\000P\356?\003\360p\177f?\367\277\351\214y\237\306\350\367?<vG\000^\335\336?h\026\"w\244\227\002@\245\002%\200\3357\334\277\020\333\336\034\361,\273?\037\322\312]\322\251\364?\235\010\367\325eW\244\2771\363\207\257\360L\331\277\0072\227\025#\330\357?\200l\324j\371\266\342?\177\231\216\246\372\354\351\277\020\333\336\034\361,\273?\370T\\\251y<\344\277\2620\201\203\227\354\345?^\235\267C\204\217\370\277Z\204\316>\277\334\327?\303\020\254\276>7\325\277\245\002%\200\3357\334\277\376\263\350\356\004\330\274\277\250\326\376\303!B\350?\340\216\235 =\261j\277\277`\376\341\242\202\316?\322\301\332\026C\324\341\277\332F\325j\030=\353\277@\271\033\276v\255\377?\243(\2556>\374\341?\257\232w\'\250\235\362\277p\221\272Y\241\374\345\277\313~\362`e\351\376?n\272\021\223\257\331\342\277i\214\242\213\030\315\333?H_E\222\307\256v\277\375\026\223e^ \363\277\214\312\271,b\272\352\277\252Z\177@\310a\303\277\037b\"\274\241\254\267?\220\373\035Jx\002\200\277\315j.~\264\341\322\277+I\263\314\026W\262\277\306\220\257\220\333\006\341\277\020\333\336\034\361,\273?!\3570\r\241\254\264\277\031\272n4\031\230\337?\361\"\212\237\357\326\302?\370)\303\310\311\347\353?j_\350O\027\227\304?\363\'\233\311>g\345\277\376\263\350\356\004\330\274\277&\254IK\253\204\366\277\317\377\226\006\323t\370?\305$\204\231\264Y\363?\007\261\006hzg\350?\003:\333\003\323h\010@\301c\356\260\2401\342\277v\022R\253\203\014\345?\330n~|\312\342\337?\203Z$\217\016\025\373?C\372\316 >\234\341\277\221\300T\343`H\003\300K\324M\016\027w\323\277H\'\220\000yq\340\277\016\266\0366\003\227\322\277m\231\361\363\305\021\004@\230\3335\366*\202\245\277%\354G\342\334\234\350\277\303\221<l\347\247\334\277\353#1#\022o\343\277\245\002%\200\3357\334\277\177\030\376\370Q|\342\277\322\227\357]\357\266\321\277t\271j\017\215A\302?`\035\273\025!_\364?\274)\"R\003,\242?x\351\372qu/\350?\303\221<l\347\247\334\277\371\024^\022H$\362\277\320@)\035J\315\355?\354\342\221\270\017\233\363?ib\267\322\304\257\353?\256\231\326S\327\341\364?\203Z$\217\016\025\373?\364\347\2342\rO\363\2776\241\331<\324\222\337\277\275\020\245\032\005\230\315\277\302#\360\031o\031\360\277\374l\227\206\342\267\374\277q\345\220\313H7\346?\241\210*\231\210 \005@\341 TX\361\027\335\277\031:\214\256\314^\340\277\257\333\026\222\252q\322\277\200\355d\030\242\'\352?ZZ\343\205k\277\347?|\325);9\254\361?/\307ZO\373\267\355\277jw=\325\226\t\362?\353\371Ej\276Q\323\277 \023]tI\002\352?\213\244K\036\030\355\271\277O\277\316\257~\274\364?\212\262q\373m\303\367?\313\277\221\313g\275\356\277>N\236\356\2537\352\277\243\251=\344\346l\351?\341 TX\361\027\335\277\236\033\233\023\242,\251?\237g\027N*\324\360\277\317\377\226\006\323t\370?\363\'\233\311>g\345\277p\022K\007Jm\355\2774s\213\201\215\034\345\277\214I)\177\271I\343\277\257\005\002K\376\216\342\277^\034\'\226\333\036\361\277\"\227\335\360\357!\305\277\2620\201\203\227\354\345?\233\250\242\300g\215\336\277\300\006\212j\240\026\260?6\250\203\373\354\006\002@\353\245o\370\026\027\303\277\030\022\302P\312\"\337\277\245\377U\375/\037\345?\303\020\254\276>7\325\277\245\002%\200\3357\334\277\303\020\254\276>7\325\277\231\356\3313gW\252?q\345\220\313H7\346?\221\300T\343`H\003\300\003\341\251\316?\255\273\277?!\344\262\252\001\343?\364Yf/\217-\277\277y\177\021\"\360\371\365?\003\032\\8\272\\\367?\303\020\254\276>7\325\277\315j.~\264\341\322\277\226$<\354\327d\350\277\235\010\367\325eW\244\277\323L\327\261&V\010@\223q\277\214\216\227\272?\177\372o\227\004X\253\277%\354G\342\334\234\350\277.\351e[R,\264?|G\031\313\214\255\204\277\221\300T\343`H\003\300\036\350\335;\260\244\346\277\013sJx\352\306\361\277h!%\274MW\366?@\215\017\252\321\256\360\277*W\331\251l-\360?\032\245\t~\227\324\365?p\221\272Y\241\374\345\2777\236\n\272&z\350?\250\202(Rz\007\350\277`\005f\220\241\354\306?\375\201\035\211\264\021\343\277\255\204PQ\005\210\356?\245\002%\200\3357\334\277\247\373\262\277T\254\216?\221\300T\343`H\003\300\213\335\375\207\222\234\365?\326X\205F\003\337\362\277\277\213\227\302R\327\326?7J4H\177?\350\277\327EA\353\322\374\327\277\245\253\177\213\210\344\344\277}\227L\377Xu\356?\305$\204\231\264Y\363?A%G\265\235Z\355\277<L\\G\n\300\356?[\345\366\360<\312\001@i\344\365\247\311W\333\277\250\202(Rz\007\350\277\243H\\\363\334\001\250?N)\270\377\003\362\346?\240\000\375\200R\267\305\277\346M\0258,\355\333\277\n1\n:\0277\324?\221\300T\343`H\003\300\221\300T\343`H\003\3009\240La\310\361\343\2779\240La\310\361\343\277\332F\325j\030=\353\277\245@\365g2\363\364\277\202\305\273\006\360\201\325\277\212r\200\270\307&\340\277\223`\327\200\026$\360?\351\240^\316\307\206\340?\332y\242\r\3048\000@\260\203\303u\371\346\322?\240\225\005\'eW\221\277\370)\303\310\311\347\353?\000\327\207z\241\214\326?\333\205F&>\264\361\277\330A\304@\311\254\310?\257\\\247?S\342\331\277\033e\013\347e\274\343?g\223\024L\241X\211\277\250Un\026y\321\340?\263\266\"[\217\355\317\277\250\202(Rz\007\350\277&\254IK\253\204\366\277\232dA\'C\034\362?\270\343\343:\312\302\316\277C\372\316 >\234\341\277\365U\351\204\205\335\337\277\000\254\356\231\3617\316?n\271ckS\242\332?\310=m\236y\014\324\277\221\300T\343`H\003\300\334\036,Yf\227\306\277\310=m\236y\014\324\277\345\212DL\260\354\366?\322\304\251\231\360\354\310\277\017^\313\031R\014\323?H_E\222\307\256v\277nO\207oY\350\362\277\227a\313\342gW\235?\235\010\367\325eW\244\277\222\341g.\277\224\367?\354\241\362M\r\307\323?\031\220\203{\305z\357?\351!\357{p\367\347?\000\327\207z\241\214\326?\337\261f2\250\315\362?\351\315\030\n\311\274\347\277]\260\373\236\264q\343?\245\002%\200\3357\334\277\270\363X\023M\214\362?\340\336\023\032\036\210\377?Y]\262\010\031\330\336\277\032\245\t~\227\324\365?\334\035~1\n`\356\277\374\226\202?6\325\374?-D\210\372\260\317\352?\270\343\343:\312\302\316\277h\017\217\210y\254\303\277\023\343\337\025>l\321\277\340\216\235 =\261j\277|V\272\350\341\034\371?H\'\220\000yq\340\277\263\234\254z\276\231\363\277x\024\224R%\204\340\277\013\036\306\336\346T\371?A\370\214y\234$\346?\010\314\3318X\370\022@9\240La\310\361\343\277\235\010\367\325eW\244\277S\337\017\315\265\003\216\277\026e\004C,\035\354\277\221\300T\343`H\003\300@\215\017\252\321\256\360\277\335\360\303\365\010*\347?eJ|\365[4\363?\2746-\321e\\\343\277#\024\361\363\216B\335?,\306\306\317\265w\332\277\304\215\277\301\335W\315?,\306\306\317\265w\332\277\237XP\235\003B\265\277s\346$K\216w\331?\245\002%\200\3357\334\277\360P\362\002MD\342\277=p\251\372\002\254\260?\330n~|\312\342\337?\372.\324\362\030x\316\277B\216\243)\027\357\363?\221\300T\343`H\003\300\237\223#b\317\322\377?m<Ph\264\201\302\277\226{\341\340,\270\337\277\363\'\233\311>g\345\277%\354G\342\334\234\350\277j_\350O\027\227\304?C\372\316 >\234\341\277\005\004IZ\334a\325?8C\350\032\310\326\261?\207\362|\346*W\324\277\234\274z\233\335\257\374?\257\304b\340\373\272\362?q\345\220\313H7\346?\373k\366\262\021\374\376?se\224\235\345\006\322?\271\266)\377\310\214\327\277@\215\017\252\321\256\360\277|G\031\313\214\255\204\277\016\343\330q\004\315\311\277d\037\360h7[\365?\026$e\330)I\374?MVr;\005(\356\277\226{\341\340,\270\337\277\35397\255d\356\372\277\250\300\3709\317\302\360?\366|\005\273+\342\330?7\237\270\341\202\261\320\277\303=f\372?m\314\277\003\032\\8\272\\\367?\340\216\235 =\261j\277\303\020\254\276>7\325\277\221\300T\343`H\003\300\351N\251\267q-\357\277G\221yP\376\246\362\277\273\312\001\332>\257\365?V\253\343\320+B\311?\214\211\032\302_\346\372?\344\336\'\022\343\242\361?\262\317\237\222\215\201\244?\267\tl\361*\207\344\277/\0331\301\242\362\355?\245@\365g2\363\364\277\026e\004C,\035\354\277%\354G\342\334\234\350\277\222\200VL/0\001@.A\271w\003\267\303?\221\300T\343`H\003\300\335qT\243\261\232\356?\267\336\322\020{2\354?\002\003\265\332\226!\342?C\372\316 >\234\341\277\2717\272\254q\375\336\277\306\220\257\220\333\006\341\277^\034\'\226\333\036\361\277%@\036T\204\327\350?\201\362uB\361\267\314\277\370T\\\251y<\344\2779u\263\200\030\235\353?\204\306O\2065\302\350\277,\306\306\317\265w\332\277C\372\316 >\234\341\2773\026\';\215\001\263?X\004\313l\"\r\354?\026e\004C,\035\354\277^\235\267C\204\217\370\2778\233;7ya\301?\361\017S\230Jp\362?\320\277\230o\241\\\346?%\354G\342\334\234\350\277\247%\304\013z\354\265?\330\303\002\026\316T\350?DN\245\222\345\326\341?\216\241b\363S\335\355\277Y\232\341\034\235\327\371?P*L\177I2\332?\235\010\367\325eW\244\277\243H\\\363\334\001\250? >\366T\371V\342\277\332\031\033/\027\007\344?\353\245o\370\026\027\303\277\2642\303*9d\341\277\235\010\367\325eW\244\277\263\014U\034\357\226\260\277\226y\300\205\333\326\320\277\216 \322E\253l\346\277\355\203\253\2553%\005@\356N\260[\253\314\346?\240}\020\204\361\327\335?\024\r\313\316\221\211\341\277\244?T\224a7\367?\245\002%\200\3357\334\277O.\311)S\202\311\277\023\216[|:\372\350\277\201\330\377a d\360\277/\005+7Ps\366?\332F\325j\030=\353\277\250\202(Rz\007\350\2774s\213\201\215\034\345\277\252Z\177@\310a\303\277_\264^\241\247\312\355\277\250\202(Rz\007\350\277\225\246z\301\334\014\310\277\233\250\242\300g\215\336\277\206\260<\250W\307\366?1\363\207\257\360L\331\277\253\252\330\007fL\304?\233\322\215y\273\252\356\277]?\306\236\264\010\'@&\034\362\354\333\201\263\277H\'\220\000yq\340\277\365S\310)4\374\320\277\350\340\\e\371\236\362?\317\377\226\006\323t\370?\346M\0258,\355\333\277\213\341\000\250y\002\226\277\245\002%\200\3357\334\277\332F\325j\030=\353\277\'\231\005\360z\242\333\277\236fvzY\030\363?g\223\024L\241X\211\277f\270\310G\324\302\357\277\334\036,Yf\227\306\277I{fr \254\340?\303\020\254\276>7\325\277!\177\210kp\257\367\277\370)\303\310\311\347\353?[\330\244\260f\027\310?\210\027=\315\030\355\274?\236\247\025\345[\354\342\277\002\204E\210?\222\351?Z\006\r\024\304\204\347\277\330A\304@\311\254\310?\242\370\002,?\027\267?<\312\035r\005\030\317?\237g\027N*\324\360\277\236||\004\254\227\352?xk9Gz\327\327\277\217\224Wt\361\254\254?\206\0377\",\215\313\277\026e\004C,\035\354\277\255\257\3511\265\334\346\277>\315\rA\003\307\342\277\301c\356\260\2401\342\277\202\305\273\006\360\201\325\277\3049\351O6\035\335?\'\231\005\360z\242\333\2775\307a\3634W\345?@\215\017\252\321\256\360\277C{_\316\346\014\351\277\2023\304u\244\221\022@\271\364\371\346\035H\360\277\237\223#b\317\322\377?\246)A\266\203<\325?\221\300T\343`H\003\300\303\020\254\276>7\325\277p\221\272Y\241\374\345\277\245\002%\200\3357\334\277;M\nof\367\326\277&\254IK\253\204\366\277\231\356\3313gW\252?zl\315\306\277\027\353\277\370T\\\251y<\344\277\240\225\005\'eW\221\277\026e\004C,\035\354\277^\235\267C\204\217\370\277,\361_\260e\314\302\277N)\270\377\003\362\346?}\3017\270\254\222\336?h\017\217\210y\254\303\277W/dM\322a\344\277\273\257\267>@\001\212?\036\347/\024Tm\336?<\365\266R\265l\327?P\001\017\356QL\322\277\377\257kD\373\207\335\277uS\361\025\206\340\364\277\014_X\365]\255\356?\261];\277\230\"\355\277\240\325c\240\242b\335\277\264\211h\037\216\267\330\277\213\244K\036\030\355\271\277^\235\267C\204\217\370\277O.\311)S\202\311\277\010\016k\256z\202\272\277\"lD\020@\315\334\2772\234\342\272\233\371\341\277\232+\217\275\310l\266\277\335\233?\\\005\270\336?\014\212\361\325\r\002\347\277\247\373\262\277T\254\216?\322\301\332\026C\324\341\277\263\234\254z\276\231\363\277%\000-\021\336:\361\277\342\236\025\203\354o\355?\177\231\216\246\372\354\351\277\303=f\372?m\314\277\221\300T\343`H\003\300\221\300T\343`H\003\300\214I)\177\271I\343\277\222\364\253\211\357v\322?\320@)\035J\315\355?zl\315\306\277\027\353\277\231\356\3313gW\252?\337\261f2\250\315\362?\243(\2556>\374\341?^\307\242\374\327\254\370?\353\245o\370\026\027\303\277\373~-\272\266b\317?xk9Gz\327\327\277xT\205\225\313 \370?\0319\336\206p\'\330?\207\033\272w\"=\334?\303\020\254\276>7\325\277@\215\017\252\321\256\360\277\365S\310)4\374\320\277\375\201\035\211\264\021\343\277%\354G\342\334\234\350\277\244\336B\262\321\322\000@\202mh\352>\367\325?\023\241\237\327j\334\363?\017329\242\267\312?*\356o\341g\035\357?\353\244\301\320\272\337\352\277O.\311)S\202\311\2771{\302\033\2621\003@w~}\242\252\271\362\277\375\201\035\211\264\021\343\277\345\212DL\260\354\366?6]x\243\257!\363?\257\\\247?S\342\331\277q\345\220\313H7\346?\\\\%-\r7\343\277\343\263\233\205\276\311\363?/\307ZO\373\267\355\2774s\213\201\215\034\345\277 >\366T\371V\342\277=p\251\372\002\254\260?\026e\004C,\035\354\277\226{\341\340,\270\337\277|\253>\202\345\216\361\277\267\tl\361*\207\344\277\253\252\330\007fL\304?\"lD\020@\315\334\277\n\006qYg\342\313?\353\244\301\320\272\337\352\277\344\336\'\022\343\242\361?\273\257\267>@\001\212?\026e\004C,\035\354\277shc \223\037\351\277d5\366\362\211\332\354?\210\027=\315\030\355\274?5\307a\3634W\345?A\"x2\360A\326?\214I)\177\271I\343\277a\276`9\326\tP\277g\014\237\271{\375\357?`\035\273\025!_\364?\017^\313\031R\014\323?Z\333s3\0240\357?}@\247\n\004\"\327?O\277\316\257~\274\364?\026e\004C,\035\354\277\357\227\213w\005\000x?\177\030\376\370Q|\342\277\037)pR\'\375\373\277\036\350\335;\260\244\346\2776 I\217+\"\330\277\013\256\035=\266W\274?g\213\016\014\323\214\350?\303=f\372?m\314\277\233\250\242\300g\215\336\277\221\312\300\320\233Y\342?9\240La\310\361\343\277\263\266\"[\217\355\317\277\227!mi*L\321?Y\210K\351\310,\307\277\317\377\226\006\323t\370?\230\373\344\262\311\207\353\277\032{\036\305C\267\365\277\"\376\367\275\307>\360\277\245@\365g2\363\364\277\245\201\224\3224\307\324\277V\253\343\320+B\311?u\240\355\327\216\255\255\277\215\234Q\311\004M\313?\373|\014_e\201\300?V\3038V\253\264\366?\026e\004C,\035\354\277\365\376C\2200\212\350\277\267\374`r\310V\243?\245\002%\200\3357\334\277\321\326?\315\304\227\373?\305\372\230\340`<\363\277\303\020\254\276>7\325\277LQa\021\266\227\313?,\306\306\317\265w\332\277m\256mz5^\001\300\221\300T\343`H\003\300\226{\341\340,\270\337\277tGM\375\013e\003@\372\202\252d\300\262\336\277,E6\"\r\007\323\277\335\233?\\\005\270\336?\303=f\372?m\314\277\242\370\002,?\027\267?\257\\\247?S\342\331\277\240\325c\240\242b\335\277\007\261\006hzg\350?\370T\\\251y<\344\277\357\344\306\013&\227\364?\316\223k\017\254\307\332?4s\213\201\215\034\345\277&\277\215\246\333f\341?\017\265p\016\247_\352?\210\232)\312y\314\324?7J4H\177?\350\277\222\364\253\211\357v\322?\007\336\300\243{\235\357\277\221\300T\343`H\003\300z\353<\031\027\247\343\277\377\257kD\373\207\335\277\245\002%\200\3357\334\277\245\002%\200\3357\334\277eJ|\365[4\363?\340\216\235 =\261j\277\t4\331\274\304O\353\277\217\3658e\373\027\356?\226{\341\340,\270\337\277JU\336\273\277\347\332\277\370T\\\251y<\344\277\026e\004C,\035\354\277\264\021\243\213O\234\002@\377\257kD\373\207\335\277d_\341\253\335\367\334?i\215P\263t\004\344\2770vt\254Q,\261\277\356N\260[\253\314\346?\370T\\\251y<\344\277^\034\'\226\333\036\361\277Z\005_\354gM\337?\0072\227\025#\330\357?\371\024^\022H$\362\277h\017\217\210y\254\303\277\240T\323\362\371\361\325\277\031:\214\256\314^\340\277)\274\244{\027W\265?5\2435\214\214\001\260\277\245\002%\200\3357\334\2777Ge\305\321&\321?xk9Gz\327\327\277\017\237j\204T\340\362?\233\250\242\300g\215\336\277s\347\322r\352\256\341\277A\244\266\007\365\351\345\277q\345\220\313H7\346?\272\337f\220\300r\337?\007\261\006hzg\350?\370T\\\251y<\344\277\177\231\216\246\372\354\351\277B\216\243)\027\357\363?\373i\325W\300\032\360?\353\245o\370\026\027\303\277\351N\251\267q-\357\277Yd\\\3071L\001@a\211\346\014H\014\342\277\032&\232+@E\375?m<Ph\264\201\302\277\024`\363\030\335\214\311?n\271ckS\242\332?\354\"\203\373\2657\333?\3372\367\337P>\372?\304\215\277\301\335W\315?\337\261f2\250\315\362?\213L\370\001gb\312\277\334r\002\313\r\322\326\277t\361>`%\300\000@zl\315\306\277\027\353\277\335\233?\\\005\270\336?\327\360\274Q\317\212\357\277\221\300T\343`H\003\300a\nw\272\360|\351\277\277\213\227\302R\327\326?\"\251s$\304\314\367?\302#\360\031o\031\360\277\240\225\005\'eW\221\277\023\241\237\327j\334\363?h\017\217\210y\254\303\277\243H\\\363\334\001\250?H\'\220\000yq\340\277V\253\343\320+B\311?\232\273\346\033\230o\371\277^\034\'\226\333\036\361\277*\356o\341g\035\357?\255\003\300\243\\\027\347?\n1\n:\0277\324?\245\002%\200\3357\334\277\340\216\235 =\261j\277\373~-\272\266b\317?\024`\363\030\335\214\311?.\351e[R,\264?\2134\243|\347\357\374\277\007\261\006hzg\350?\250\202(Rz\007\350\277|G\031\313\214\255\204\277\370)\303\310\311\347\353?\273\257\267>@\001\212?kd\371yf\'\347\277\274\313\242\255\017k\363\277@\215\017\252\321\256\360\277\372\202\252d\300\262\336\277mN\346\233\210,\365?\332\232\253\334\277w\353?\037\322\312]\322\251\364?F\247\214.\334\241\324\277\247\373\262\277T\254\216?\303\020\254\276>7\325\277\024`\363\030\335\214\311?V\3038V\253\264\366?\250\202(Rz\007\350\277\214\037>\306e,\323\277\"\376\367\275\307>\360\277\303:\227w\222T\345\277#\024\361\363\216B\335?w\250h[\376\326\362?$\217\343\233\334\201\266?\245@\365g2\363\364\277\327\361jy+\302\307\277\217\3658e\373\027\356?\221\013`;\236-\362\277\347\000\3340\022\253\003@\271\266)\377\310\214\327\277|,\317/\216\377\370\277\\\\%-\r7\343\277\270\343\343:\312\302\316\277\257\\\247?S\342\331\277\020\312\366\020y\271\360?^\307\242\374\327\254\370?\351\242\177)\031h\357?\363\'\233\311>g\345\277p\221\272Y\241\374\345\277.\351e[R,\264?\217t\250\267R\247\346?\311f\252/q\362\333?\263\014U\034\357\226\260\277\253V\002\226\276\021\324?8\233;7ya\301?i\215P\263t\004\344\277\224\"\372D6\355\354?\313\021G\342\275\026\340?\226{\341\340,\270\337\277\315j.~\264\341\322\277\245\002%\200\3357\334\277\255\257\3511\265\334\346\277\363\250+w\347\327\354\2774\263|\3043\271\374?^F\022O/<\361?\014\212\361\325\r\002\347\277\351N\251\267q-\357\277\210\232)\312y\314\324?{?\023\213\276\341\343?\253\252\330\007fL\304?y\346+\357\307\026\301?\316\022\333a\003W\323?7\237\270\341\202\261\320\277\327\361jy+\302\307\277\221\300T\343`H\003\300\026e\004C,\035\354\277H\'\220\000yq\340\277\327\304\260=*\214\320\277@\247\205\212\242\002\315\277\276d{\214\254\322\335\277\245\201\224\3224\307\324\277%k\26744,\341\277\347\365\301\033{b\334?\221\300T\343`H\003\300\235\010\367\325eW\244\277p\221\272Y\241\374\345\2770vt\254Q,\261\2779:x\264\017\211\023@\240\325c\240\242b\335\277\235\010\367\325eW\244\277\340\216\235 =\261j\277_2 \314\242\"\336?\2717\272\254q\375\336\277\014_X\365]\255\356?\026\344s\225\203\254\344\277\364Yf/\217-\277\277a\211\346\014H\014\342\277"
      }
    }
  }
}
node {
  name: "tensors/component_24"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content: "\000\000\000\000\000Pc@\000\000\000\000\000Pt@\000\000\000\000\000\300\\@\000\000\000\000\000\340c@\000\000\000\000\000\270s@\000\000\000\000\000\340R@\000\000\000\000\000xs@\000\000\000\000\000@b@\000\000\000\000\000 U@\000\000\000\000\000\360`@\000\000\000\000\000 b@\000\000\000\000\000@`@\000\000\000\000\000@T@\000\000\000\000\000\300j@\000\000\000\000\000\240f@\000\000\000\000\000\320`@\000\000\000\000\000\360f@\000\000\000\000\000\340`@\232\231\231\231\231\231]@\000\000\000\000\000@l@\000\000\000\000\000`c@\000\000\000\000\000@j@\000\000\000\000\000\260e@\000\000\000\000\000 `@\000\000\000\000\000\000h@\315\314\314\314\314<c@?5^\272I\244f@\000\000\000\000\000\240a@\000\000\000\000\000\240f@\315\314\314\314\314\034j@\000\000\000\000\000\300_@\000\000\000\000\000\300q@\000\000\000\000\000\020i@\000\000\000\000\000\370`@\000\000\000\000\000\340o@\000\000\000\000\000\200a@\000\000\000\000\000@a@\000\000\000\000\000pk@\000\000\000\000\000`s@\000\000\000\000\000@X@\000\000\000\000\000\240\\@\000\000\000\000\000\240i@\000\000\000\000\000\340]@L7\211A`\251o@\000\000\000\000\000\020`@\000\000\000\000\000`]@\000\000\000\000\000\300\\@\000\000\000\000\000\300_@33333?|@\000\000\000\000\000\000b@\000\000\000\000\000\300]@\000\000\000\000\000\200h@\000\000\000\000\000\300\\@\000\000\000\000\000\360q@\000\000\000\000\000\020b@\000\000\000\000\000@p@\000\000\000\000\000\240j@\000\000\000\000\000\340e@\000\000\000\000\000\300Z@\000\000\000\000\000\340Z@\000\000\000\000\000 Q@\000\000\000\000\000@c@\000\000\000\000\000\320s@\'1\010\254\034\202p@\305 \260rh\267q@\000\000\000\000\000`n@\000\000\000\000\000@[@\000\000\000\000\000\020s@\000\000\000\000\000`W@\000\000\000\000\000\000f@\364\375\324x\351\266]@\000\000\000\000\000\300`@\215\227n\022\203@[@\000\000\000\000\000`W@\307K7\211A\035\203@\000\000\000\000\000\240e@\000\000\000\000\000\300u@\000\000\000\000\000Pu@\000\000\000\000\000\240a@\232\231\231\231\2319_@\000\000\000\000\000\200]@\000\000\000\000\000\300P@\000\000\000\000\000@\\@33333\323V@\000\000\000\000\000\260b@\000\000\000\000\000\240`@\000\000\000\000\000\240p@\000\000\000\000\000\300g@\315\314\314\314\314|c@\037\205\353Q\270zc@\000\000\000\000\0000c@\000\000\000\000\000\000c@\000\000\000\000\000 _@\000\000\000\000\000\320r@\000\000\000\000\000\020a@H\341z\024\256?e@\000\000\000\000\000\240i@\315\314\314\314\314\374f@\315\314\314\314\314\234i@\000\000\000\000\000@p@\000\000\000\000\000pd@\315\314\314\314\314\034l@\000\000\000\000\000\200n@\000\000\000\000\000\200`@\000\000\000\000\000@h@\000\000\000\000\000\220c@\000\000\000\000\000\200c@\000\000\000\000\0000q@\000\000\000\000\000 b@\000\000\000\000\000\340`@\000\000\000\000\000\000N@\000\000\000\000\000\000_@\000\000\000\000\000\300_@\000\000\000\000\0000a@\000\000\000\000\000\260j@\000\000\000\000\000\300]@\232\231\231\231\231\371Z@\000\000\000\000\000\300^@\000\000\000\000\000\000\\@\000\000\000\000\000\300q@\000\000\000\000\000\240`@\000\000\000\000\000\240b@\000\000\000\000\000 e@\000\000\000\000\000\340i@\000\000\000\000\000\340e@\000\000\000\000\000 a@\000\000\000\000\000\200m@\000\000\000\000\000\340S@\000\000\000\000\000\000b@\315\314\314\314\314\\d@\315\314\314\314\314<g@fffff\036w@\315\314\314\314\314\274h@\000\000\000\000\000\000Z@+\207\026\331\316\247A@\000\000\000\000\000\030u@b\020X9\264\364v@\000\000\000\000\000H`@\000\000\000\000\000\300l@\000\000\000\000\000\230\207@\000\000\000\000\0000y@\000\000\000\000\000\200`@\000\000\000\000\000@f@\000\000\000\000\000\020a@\000\000\000\000\000 b@\000\000\000\000\000\300^@\000\000\000\000\000@o@33333cg@\315\314\314\314\314\274`@\000\000\000\000\000\300P@\000\000\000\000\0000a@\000\000\000\000\000`c@\207\026\331\316\367\023i@\232\231\231\231\231Ic@\000\000\000\000\000\300V@\000\000\000\000\000\000a@L7\211A`=[@\000\000\000\000\000\200a@\000\000\000\000\000\200U@\315\314\314\314\314l`@\315\314\314\314\314|f@\000\000\000\000\000\000b@\254\034Zd;Qr@\000\000\000\000\000\020b@\000\000\000\000\000\240]@\000\000\000\000\000\240a@\000\000\000\000\000\340m@\000\000\000\000\000@q@\317\367S\343\245d\201@\315\314\314\314\314\214n@\000\000\000\000\000\200v@\315\314\314\314\314\314Y@\000\000\000\000\000\200Y@\000\000\000\000\000\340b@\000\000\000\000\000\320q@\347\373\251\361\322\315`@\000\000\000\000\000@\\@\000\000\000\000\000pg@\000\000\000\000\000`_@\000\000\000\000\0000f@\315\314\314\314\314|f@\311v\276\237\032\377K@\000\000\000\000\000\220`@\000\000\000\000\000\340`@\000\000\000\000\000\340o@\000\000\000\000\000\200a@\000\000\000\000\000\360p@\321\"\333\371~\322n@\000\000\000\000\000Pi@\000\000\000\000\000\300R@\000\000\000\000\000\240^@\037\205\353Q\270\036[@\000\000\000\000\000\000d@\000\000\000\000\000`e@\000\000\000\000\000\200h@\000\000\000\000\000 l@\000\000\000\000\000\240h@\000\000\000\000\000\000D@\000\000\000\000\000\220e@\315\314\314\314\314\\c@\000\000\000\000\000\200q@\000\000\000\000\000\340e@\000\000\000\000\000`b@\000\000\000\000\000\260s@\000\000\000\000\000 g@\000\000\000\000\000\360`@\000\000\000\000\000\360m@\000\000\000\000\000`a@\000\000\000\000\000\200a@\000\000\000\000\000\200[@\000\000\000\000\000 l@\000\000\000\000\000\360a@fffff\036`@\000\000\000\000\000\220e@\000\000\000\000\0000n@\000\000\000\000\000hp@\337O\215\227nFh@\000\000\000\000\000\340a@\000\000\000\000\000@`@\000\000\000\000\000\200_@\000\000\000\000\000\320a@\000\000\000\000\000\300o@\000\000\000\000\0000k@\000\000\000\000\000\240P@\000\000\000\000\000 i@\000\000\000\000\000`c@\232\231\231\231\231\031Q@\000\000\000\000\000 P@\000\000\000\000\000\240e@\213l\347\373\251\261Y@\232\231\231\231\2319U@33333\263d@\000\000\000\000\000\000^@\000\000\000\000\000\340`@\000\000\000\000\000\200k@fffff2c@\315\314\314\314\314lh@\000\000\000\000\000`b@\000\000\000\000\000Pq@\000\000\000\000\000\340a@\232\231\231\231\231yZ@\000\000\000\000\000@n@\000\000\000\000\000Ph@\024\256G\341zl{@\000\000\000\000\000 g@\000\000\000\000\000\340Z@\000\000\000\000\000\240d@\000\000\000\000\000\000f@\315\314\314\314\314<`@\000\000\000\000\000\300\\@\024\256G\341z\004h@\000\000\000\000\000\000d@\000\000\000\000\000 b@\000\000\000\000\000\200U@\000\000\000\000\000\300c@\000\000\000\000\000\340_@\000\000\000\000\000\300\\@\000\000\000\000\000\340]@\315\314\314\314\314\374e@\000\000\000\000\000\000n@\000\000\000\000\000\260x@\000\000\000\000\000\240d@fffff\006`@\000\000\000\000\0000q@\313\241E\266\363}s@\000\000\000\000\000\300j@\000\000\000\000\0000c@\000\000\000\000\000\000b@\000\000\000\000\000\300\\@\000\000\000\000\000\200f@\000\000\000\000\000\020}@\000\000\000\000\000\200f@\000\000\000\000\000\240o@\000\000\000\000\000@U@33333sY@\000\000\000\000\000\220b@\000\000\000\000\0000a@\345\320\"\333\371\340s@\000\000\000\000\000\340a@\000\000\000\000\000\200a@\000\000\000\000\000\020h@\000\000\000\000\000\000W@\000\000\000\000\000\240h@\000\000\000\000\000`[@\000\000\000\000\000\220r@\000\000\000\000\0008g@\000\000\000\000\000\300l@\240\032/\335$^V@\000\000\000\000\000@p@\000\000\000\000\000\240g@\000\000\000\000\000\000[@\000\000\000\000\000 _@\000\000\000\000\000 b@\000\000\000\000\000@f@\000\000\000\000\000@U@\000\000\000\000\000\340e@\000\000\000\000\000\300_@\315\314\314\314\314\274b@\000\000\000\000\000\300e@\000\000\000\000\000`_@\000\000\000\000\000\360e@\000\000\000\000\000 l@\000\000\000\000\000 `@fffff\376c@\000\000\000\000\000\240c@\000\000\000\000\000\240i@\000\000\000\000\000\200a@\000\000\000\000\000\000i@\000\000\000\000\000 k@\000\000\000\000\000@_@\000\000\000\000\000\360c@\000\000\000\000\000\000g@\000\000\000\000\000 X@\000\000\000\000\000\000i@\000\000\000\000\000\240b@\315\314\314\314\314\\f@\315\314\314\314\314\034g@fffff\226d@\000\000\000\000\000\360t@\000\000\000\000\000\340U@=\n\327\243p%m@33333\253b@\000\000\000\000\000\240`@\000\000\000\000\000\200X@\000\000\000\000\000\360i@\000\000\000\000\000\300b@\315\314\314\314\314\334`@\000\000\000\000\000xg@\000\000\000\000\000\260b@33333\003]@\020X9\264\310*c@\000\000\000\000\000\240d@\000\000\000\000\000P`@\232\231\231\231\231\311i@\000\000\000\000\000@b@\000\000\000\000\000\240_@\000\000\000\000\000`a@\000\000\000\000\000@\\@\000\000\000\000\000\300S@\000\000\000\000\000\300f@\000\000\000\000\000\200g@\000\000\000\000\000 `@\000\000\000\000\000\000d@\000\000\000\000\000\300e@\037\205\353Q\270fk@\000\000\000\000\000`s@\000\000\000\000\000`w@\000\000\000\000\000\000Y@\000\000\000\000\000@o@\000\000\000\000\000 b@\000\000\000\000\000Pt@\000\000\000\000\000\300w@\000\000\000\000\0000q@\000\000\000\000\000\200f@33333\253n@\000\000\000\000\000\360b@\000\000\000\000\000\320`@\000\000\000\000\000\200W@\000\000\000\000\000\000k@\000\000\000\000\000\340u@\000\000\000\000\000`h@\000\000\000\000\000\000^@\000\000\000\000\000\220l@\000\000\000\000\000\000o@\000\000\000\000\000\000_@\000\000\000\000\000\340g@\000\000\000\000\000\240f@\000\000\000\000\000@Z@\315\314\314\314\314|a@\315\314\314\314\314\274c@\000\000\000\000\000P`@\315\314\314\314\314\214e@\000\000\000\000\000@`@\000\000\000\000\000@f@\000\000\000\000\0000d@\232\231\231\231\231\371]@\000\000\000\000\000\340m@\000\000\000\000\000\300g@\232\231\231\231\231YU@\000\000\000\000\000\240i@\000\000\000\000\000\300`@\000\000\000\000\000\000e@\000\000\000\000\000 g@\000\000\000\000\000\220f@\000\000\000\000\000\000c@\000\000\000\000\000\340j@\000\000\000\000\000 c@\000\000\000\000\000\200Z@\000\000\000\000\000@u@\000\000\000\000\000\340c@\000\000\000\000\000\000^@\000\000\000\000\000\300\\@\000\000\000\000\000\000`@^\272I\014\002\255s@\000\000\000\000\000``@\031\004V\016-\344{@\000\000\000\000\000\340_@\000\000\000\000\000`c@\000\000\000\000\0000f@\000\000\000\000\000\020`@\000\000\000\000\000\000f@\000\000\000\000\000 y@\000\000\000\000\000@`@\000\000\000\000\000 b@\000\000\000\000\000`b@\000\000\000\000\000\300\\@\000\000\000\000\000\240g@\000\000\000\000\000\340a@\000\000\000\000\000\000n@\000\000\000\000\000\300l@\000\000\000\000\000\300g@\000\000\000\000\000\240j@\000\000\000\000\000\240T@fffff.q@\000\000\000\000\000`c@\000\000\000\000\000pz@\000\000\000\000\000\020`@\000\000\000\000\000\360t@\000\000\000\000\000`p@\000\000\000\000\0000`@\000\000\000\000\000\320k@\000\000\000\000\000\340p@\000\000\000\000\000\360i@\000\000\000\000\000\340e@\000\000\000\000\000\300m@\315\314\314\314\314\374`@\000\000\000\000\000\000l@\000\000\000\000\000@e@\000\000\000\000\000 g@\000\000\000\000\000pp@\033/\335$\0061O@\000\000\000\000\000\300b@\000\000\000\000\000`e@\000\000\000\000\000`a@33333\213_@fffff\276i@\000\000\000\000\000\200[@\000\000\000\000\000P~@\000\000\000\000\000\300e@\000\000\000\000\000 b@fffff\346j@\000\000\000\000\000\000t@\000\000\000\000\000\200j@\000\000\000\000\000\020e@\000\000\000\000\000\240g@\000\000\000\000\000\200a@\000\000\000\000\000pg@\315\314\314\314\314\334o@\000\000\000\000\000\340`@\000\000\000\000\000\340b@\000\000\000\000\000 \\@\000\000\000\000\000\000g@\000\000\000\000\000\240h@\000\000\000\000\0000d@\000\000\000\000\000@U@\000\000\000\000\000`i@\000\000\000\000\000Pt@\000\000\000\000\000\220s@\000\000\000\000\000\240m@\000\000\000\000\000\220f@\000\000\000\000\000 a@fffff\226V@\315\314\314\314\314\334b@\000\000\000\000\000\300j@\000\000\000\000\000`^@\000\000\000\000\000H\207@\000\000\000\000\000\300g@\000\000\000\000\000\240f@\000\000\000\000\000\000N@\000\000\000\000\000\340m@\000\000\000\000\000\240]@\000\000\000\000\000`[@\000\000\000\000\000\200[@\000\000\000\000\000`Z@\315\314\314\314\314\374h@fffff\376p@\000\000\000\000\000p`@\000\000\000\000\000\340`@\000\000\000\000\000\300]@\000\000\000\000\000\340j@\000\000\000\000\000\260`@\000\000\000\000\000 e@\000\000\000\000\0000a@\000\000\000\000\000`b@\000\000\000\000\000\000m@\000\000\000\000\000\200c@\000\000\000\000\000@e@\000\000\000\000\000\240T@\000\000\000\000\000`c@R\270\036\205\353\215z@\000\000\000\000\000\220m@\000\000\000\000\000@k@\000\000\000\000\000\240j@\000\000\000\000\000\210s@\000\000\000\000\000`g@\000\000\000\000\000\240f@\000\000\000\000\000 m@\000\000\000\000\000\300W@\000\000\000\000\000\000J@\000\000\000\000\000\240f@\010\254\034Zd]\177@\000\000\000\000\000\000V@\000\000\000\000\000\000\\@\000\000\000\000\000\200a@\000\000\000\000\000\340d@\000\000\000\000\000(b@\000\000\000\000\000@j@\000\000\000\000\000\260c@\315\314\314\314\314\234j@\000\000\000\000\000`]@\000\000\000\000\0000g@\000\000\000\000\000@U@\000\000\000\000\000 b@\000\000\000\000\000\360o@\000\000\000\000\000\000_@\315\314\314\314\314\334`@\000\000\000\000\000\320l@\000\000\000\000\000\200[@\217\302\365(\\\'m@\000\000\000\000\000\240c@33333\323a@\000\000\000\000\000@c@\341z\024\256Guf@\000\000\000\000\000\300V@\315\314\314\314\314\274h@\000\000\000\000\000\240i@\000\000\000\000\000 d@\315\314\314\314\314\274b@\000\000\000\000\000\340i@\000\000\000\000\000\340a@\000\000\000\000\000\220q@\000\000\000\000\000Hw@\000\000\000\000\000`m@\000\000\000\000\000\320j@\000\000\000\000\000@p@fffff\266b@\000\000\000\000\000``@\000\000\000\000\000\000b@\000\000\000\000\000\340j@\000\000\000\000\000\000f@\000\000\000\000\000\000b@\000\000\000\000\000`c@\000\000\000\000\000 r@\000\000\000\000\000\300l@\000\000\000\000\000 r@fffff\216t@\000\000\000\000\000\300a@\000\000\000\000\000\360l@\000\000\000\000\000@d@\000\000\000\000\000\240`@\000\000\000\000\000$x@\000\000\000\000\000\240[@\000\000\000\000\000<u@\000\000\000\000\000\300U@\000\000\000\000\000\320c@\000\000\000\000\000@e@\000\000\000\000\000\200K@\252\361\322Mb\\a@\000\000\000\000\000@e@\000\000\000\000\000\000n@\315\314\314\314\314lb@\000\000\000\000\000\020r@\000\000\000\000\000\340`@\000\000\000\000\000\200a@\246\233\304 \260\322t@\000\000\000\000\000Pb@\000\000\000\000\000 v@\000\000\000\000\000\340a@fffff\236p@\000\000\000\000\000@b@\000\000\000\000\000\240d@\000\000\000\000\000\200T@\000\000\000\000\000\250j@\000\000\000\000\000\300S@\000\000\000\000\000\340a@\000\000\000\000\000P`@\315\314\314\314\314\374m@\000\000\000\000\0000f@\024\256G\341zdp@\000\000\000\000\000`l@\000\000\000\000\000\360c@\000\000\000\000\000 k@\000\000\000\000\000\240y@\000\000\000\000\000\200b@\000\000\000\000\000@f@\315\314\314\314\314\\d@\000\000\000\000\000pg@\000\000\000\000\000\000d@\000\000\000\000\000\200j@\000\000\000\000\000`a@\000\000\000\000\000\000[@\000\000\000\000\000\000U@\000\000\000\000\000\200e@\232\231\231\231\2319Z@\307K7\211A\240\\@\000\000\000\000\000\200Z@\315\314\314\314\314|f@\000\000\000\000\000\200Y@\000\000\000\000\000\300g@\000\000\000\000\000@u@\000\000\000\000\000\200f@\000\000\000\000\000\300i@\000\000\000\000\000p`@\000\000\000\000\000\300b@\000\000\000\000\000@g@\232\231\231\231\2319]@\315\314\314\314\314\274r@\000\000\000\000\000\200g@\000\000\000\000\000\340a@\000\000\000\000\000Pa@\000\000\000\000\000@p@\000\000\000\000\000\300]@\000\000\000\000\000\360d@\000\000\000\000\000`U@\000\000\000\000\0000j@\315\314\314\314\314\334i@\000\000\000\000\000\000\\@\000\000\000\000\000 h@\000\000\000\000\000\260h@\000\000\000\000\000`a@\000\000\000\000\000\360]@\000\000\000\000\000\320h@\000\000\000\000\000\340`@\000\000\000\000\000\360k@\000\000\000\000\0000s@\000\000\000\000\000\200`@\000\000\000\000\000\000e@\000\000\000\000\000\360q@\000\000\000\000\000\240h@fffff\316`@fffff\266`@\000\000\000\000\000 s@\000\000\000\000\000\200f@33333\023m@\315\314\314\314\314\374e@\000\000\000\000\000@f@\000\000\000\000\000`l@\315\314\314\314\314\244d@\000\000\000\000\000\360k@\000\000\000\000\000\360i@\315\314\314\314\314\004p@\211A`\345\320\226w@\000\000\000\000\000\020l@fffff6o@\000\000\000\000\000\000Y@X9\264\310vR{@\000\000\000\000\000\220f@\000\000\000\000\000@^@\000\000\000\000\000\200c@\000\000\000\000\000\200f@\000\000\000\000\000\300Z@\000\000\000\000\000\230w@\000\000\000\000\000 g@\000\000\000\000\000\340e@\000\000\000\000\000`h@fffff\376s@\000\000\000\000\000\300g@\000\000\000\000\000\030g@\000\000\000\000\000`[@\000\000\000\000\000 `@\000\000\000\000\000\200b@\315\314\314\314\314\334c@fffff\246C@\000\000\000\000\000\340b@H\341z\024\256Wf@\000\000\000\000\000\000_@\000\000\000\000\000\300l@\000\000\000\000\000 b@\000\000\000\000\000`_@\000\000\000\000\000\300c@\000\000\000\000\000pd@\000\000\000\000\000 `@\000\000\000\000\000Ph@\000\000\000\000\000\300_@\000\000\000\000\000\220l@\000\000\000\000\000\200q@\000\000\000\000\000@m@\000\000\000\000\000\340e@\000\000\000\000\000 h@\000\000\000\000\000\000^@P\215\227n\022\263x@\315\314\314\314\314\034a@\000\000\000\000\000\000b@\000\000\000\000\000\360e@\000\000\000\000\000\200[@\315\314\314\314\314\374o@\000\000\000\000\000\200[@\000\000\000\000\000\240l@\232\231\231\231\2319_@\000\000\000\000\000\200d@\000\000\000\000\000\020p@\000\000\000\000\000\340m@\000\000\000\000\000\000i@\000\000\000\000\000`e@\000\000\000\000\000\320q@\000\000\000\000\0000h@\276\237\032/\335\004b@\000\000\000\000\000@o@\000\000\000\000\000\000o@\000\000\000\000\000\340r@\000\000\000\000\000`t@\000\000\000\000\000\340_@\000\000\000\000\000\200f@\000\000\000\000\000`V@\000\000\000\000\000\300g@\000\000\000\000\000\240g@\000\000\000\000\000\000h@\000\000\000\000\000\260W@\000\000\000\000\000\000t@\000\000\000\000\000\000`@\000\000\000\000\000\340`@\004V\016-\262\275]@\000\000\000\000\000@T@\000\000\000\000\000\000V@\000\000\000\000\000Pt@fffff~a@\000\000\000\000\000`b@\000\000\000\000\000\240i@\000\000\000\000\000\300_@\000\000\000\000\000\300e@\000\000\000\000\000\340g@\000\000\000\000\000`V@\000\000\000\000\000@\\@\000\000\000\000\000pf@fffff\036s@\000\000\000\000\000`c@\000\000\000\000\000@W@\000\000\000\000\000\030p@\000\000\000\000\000Pq@\000\000\000\000\000\200t@\000\000\000\000\000\240d@\000\000\000\000\0000`@\000\000\000\000\000\230i@\000\000\000\000\000\340g@\000\000\000\000\000\260d@\000\000\000\000\000\240e@\000\000\000\000\000\340]@\000\000\000\000\000\340_@\000\000\000\000\000\360c@\315\314\314\314\314<c@\315\314\314\314\314<`@\000\000\000\000\000\000c@\000\000\000\000\000 g@\000\000\000\000\000\300_@\000\000\000\000\000\020e@q=\n\327\243\334p@\000\000\000\000\000\240n@\000\000\000\000\000\000p@\000\000\000\000\000\340`@\000\000\000\000\000\300U@!\260rh\221\371m@\354Q\270\036\205\017f@\000\000\000\000\000\000]@5^\272I\014.w@\000\000\000\000\000\000f@\000\000\000\000\000\000c@\315\314\314\314\314\274b@\000\000\000\000\000\000e@\000\000\000\000\000@p@\000\000\000\000\000\300j@\000\000\000\000\0000a@\000\000\000\000\0000e@\000\000\000\000\000\240]@\315\314\314\314\314\354b@\315\314\314\314\314\274e@\000\000\000\000\000\300p@\000\000\000\000\000Pi@\000\000\000\000\000 g@\315\314\314\314\314\334j@\000\000\000\000\000\340s@\000\000\000\000\000@X@\000\000\000\000\000@`@\232\231\231\231\2319Z@\000\000\000\000\000\300^@\000\000\000\000\000\000t@\000\000\000\000\000\300_@\000\000\000\000\000 S@\000\000\000\000\000\240`@\000\000\000\000\000\200]@\000\000\000\000\000\000^@\341z\024\256Gqf@\000\000\000\000\000\300l@\000\000\000\000\000\200a@\000\000\000\000\000\240z@\000\000\000\000\000@]@\000\000\000\000\000`m@\000\000\000\000\000\000[@\000\000\000\000\000\000d@\000\000\000\000\000\000b@)\\\217\302\365vp@\000\000\000\000\000\340`@\000\000\000\000\000hp@\000\000\000\000\000@_@fffffVl@\000\000\000\000\000\340`@\000\000\000\000\000\300g@\000\000\000\000\000\200^@\000\000\000\000\000pg@\000\000\000\000\000\000q@\000\000\000\000\000\220e@\000\000\000\000\000`_@\000\000\000\000\000\340^@\343\245\233\304 <h@\000\000\000\000\000\300U@33333\003g@\315\314\314\314\314\334f@\000\000\000\000\000 U@\000\000\000\000\000\000i@\000\000\000\000\000\340f@\000\000\000\000\0000h@\000\000\000\000\000``@\000\000\000\000\000\300`@\000\000\000\000\000\260d@\000\000\000\000\000@_@\000\000\000\000\000\200S@33333sf@\000\000\000\000\000@`@\000\000\000\000\000\200o@\000\000\000\000\000\360l@\000\000\000\000\000\000T@\000\000\000\000\000@_@\000\000\000\000\000pk@\000\000\000\000\000@f@\000\000\000\000\000\300d@\000\000\000\000\000\000f@\232\231\231\231\231+q@\315\314\314\314\314\374d@\000\000\000\000\000\000d@\000\000\000\000\000\000a@\000\000\000\000\000X\201@\000\000\000\000\000\000`@\000\000\000\000\000\210\203@\000\000\000\000\000 r@\000\000\000\000\000\200T@\000\000\000\000\000@_@\000\000\000\000\000Pg@\000\000\000\000\000\300[@\004V\016-\262\225o@\000\000\000\000\000\200[@\000\000\000\000\000\240a@\000\000\000\000\000\000]@\315\314\314\314\314\374d@\000\000\000\000\000\200m@fffff\346Y@\315\314\314\314\314|d@\000\000\000\000\000@\\@\303\365(\\\217Ro@\000\000\000\000\000\200k@\000\000\000\000\000\200_@\000\000\000\000\000pa@\000\000\000\000\000\200q@q=\n\327\243\374c@\232\231\231\231\231\tj@\000\000\000\000\000\000_@\000\000\000\000\000`b@\000\000\000\000\000@]@\000\000\000\000\000\260c@\000\000\000\000\000@T@\000\000\000\000\000\020j@\000\000\000\000\000\200c@\000\000\000\000\000 g@\000\000\000\000\000\360d@\000\000\000\000\000\220`@\315\314\314\314\314<e@\000\000\000\000\000\220h@\000\000\000\000\000@W@\000\000\000\000\000 f@\000\000\000\000\000\360d@\000\000\000\000\000\300e@\000\000\000\000\000\340m@\000\000\000\000\000\200[@\000\000\000\000\000 U@\000\000\000\000\000@n@\000\000\000\000\000\340e@\000\000\000\000\000\300e@\000\000\000\000\000 `@\232\231\231\231\231y[@\000\000\000\000\000\200V@33333\003i@\022\203\300\312\241\367r@\315\314\314\314\314\274b@\000\000\000\000\000`a@\000\000\000\000\000\200l@\000\000\000\000\000`m@\000\000\000\000\000 l@X9\264\310v7\202@\000\000\000\000\000\200n@\000\000\000\000\000\240c@\000\000\000\000\000\200[@\000\000\000\000\000@t@\000\000\000\000\000\360p@\000\000\000\000\000\000d@\000\000\000\000\000\000^@33333\363B@\000\000\000\000\000\240m@\000\000\000\000\000\300g@33333sA@\000\000\000\000\000\260s@\000\000\000\000\000Pi@\000\000\000\000\000\340j@\000\000\000\000\000\000c@\000\000\000\000\000\360i@\000\000\000\000\000\300c@\000\000\000\000\000@`@\000\000\000\000\000\200n@\000\000\000\000\000\300S@\000\000\000\000\000\200K@\000\000\000\000\000\200l@D\213l\347\373Yt@\000\000\000\000\000\340g@\000\000\000\000\000`d@\000\000\000\000\000`j@\000\000\000\000\000\210x@\000\000\000\000\000\340a@\000\000\000\000\000\000V@\000\000\000\000\000\240`@\315\314\314\314\314\034b@\000\000\000\000\000\340V@\000\000\000\000\000 a@\000\000\000\000\000 X@\000\000\000\000\000\240b@\315\314\314\314\314\334e@\000\000\000\000\000\020k@\000\000\000\000\000\320k@\000\000\000\000\0008d@\000\000\000\000\000\200k@\000\000\000\000\000\330b@\000\000\000\000\000\000`@\315\314\314\314\314|f@\000\000\000\000\000\340r@\000\000\000\000\000\260}@\000\000\000\000\000@e@\000\000\000\000\000\360t@\000\000\000\000\000\300\\@\000\000\000\000\000@[@\232\231\231\231\231\311s@\000\000\000\000\000\340p@\000\000\000\000\000\300a@\230n\022\203\300\256q@\000\000\000\000\000\200d@\000\000\000\000\000@o@\232\231\231\231\231\271^@\000\000\000\000\000@c@\000\000\000\000\000`c@\000\000\000\000\000\000N@\000\000\000\000\000\000T@\000\000\000\000\000\000Y@\000\000\000\000\000\220`@\000\000\000\000\000\340c@\000\000\000\000\000 _@\000\000\000\000\000p`@\000\000\000\000\000\200f@\000\000\000\000\000\000S@\000\000\000\000\000\000[@\000\000\000\000\000\240c@\000\000\000\000\000 l@\000\000\000\000\000\200g@\000\000\000\000\000@R@\000\000\000\000\000\300V@\372~j\274t\267e@\000\000\000\000\000\240W@\000\000\000\000\000@j@\000\000\000\000\000 `@\000\000\000\000\000\200b@\000\000\000\000\000`j@\000\000\000\000\000\340c@\315\314\314\314\314\274h@\000\000\000\000\000\200]@\000\000\000\000\000\200T@\000\000\000\000\000@e@\000\000\000\000\000\020a@\000\000\000\000\000\360s@\000\000\000\000\000@Y@\000\000\000\000\000`b@\000\000\000\000\000 r@\000\000\000\000\000\340]@\000\000\000\000\000\000]@\232\231\231\231\2319W@\000\000\000\000\000@Z@T\343\245\233\304\364y@\000\000\000\000\000\340j@\000\000\000\000\000\260a@\000\000\000\000\000\200`@\000\000\000\000\000 [@\000\000\000\000\000 b@\000\000\000\000\000`d@\000\000\000\000\000\200a@\000\000\000\000\000\200[@\000\000\000\000\000\220`@\331\316\367S\343wr@\315\314\314\314\314\374h@\000\000\000\000\0000`@\000\000\000\000\000\000l@\000\000\000\000\000\200x@\000\000\000\000\000`f@\000\000\000\000\000\000g@\000\000\000\000\000\020f@\000\000\000\000\000\200X@\000\000\000\000\000 e@\000\000\000\000\000\000Y@\000\000\000\000\000\220b@\000\000\000\000\000\340_@\000\000\000\000\000 ^@\000\000\000\000\000\200[@\000\000\000\000\000\300a@\000\000\000\000\000\200N@\000\000\000\000\000\300k@\232\231\231\231\231\331Z@\000\000\000\000\000 h@\000\000\000\000\000\260h@\000\000\000\000\000@\\@\000\000\000\000\000\020x@\000\000\000\000\000\220b@\000\000\000\000\000pb@fffff\346f@\000\000\000\000\0008p@\000\000\000\000\000\340m@\000\000\000\000\000\240a@\000\000\000\000\000\200a@\315\314\314\314\314<b@\000\000\000\000\000\240k@\000\000\000\000\000\000\\@fffff\346^@\000\000\000\000\000\000n@\000\000\000\000\000@]@\305 \260rh\223q@\000\000\000\000\0008q@\000\000\000\000\000@`@\000\000\000\000\000\220u@\000\000\000\000\000\300^@fffffff@\000\000\000\000\000\240a@\000\000\000\000\000\000b@\000\000\000\000\000\300_@fffffVh@\000\000\000\000\000\340j@\000\000\000\000\000\000t@\000\000\000\000\000\200a@\000\000\000\000\000@_@\000\000\000\000\000\200k@fffff\236l@\000\000\000\000\000\260d@\000\000\000\000\000\000T@\262\235\357\247\306-y@\000\000\000\000\000`l@\020X9\264\310\032k@\000\000\000\000\000\340Z@\000\000\000\000\000\000Y@\000\000\000\000\000@h@\000\000\000\000\000\300b@\000\000\000\000\000\300l@\000\000\000\000\000\240e@=\n\327\243p\361q@\315\314\314\314\314\\i@\232\231\231\231\231\371S@\000\000\000\000\000\200{@\000\000\000\000\000\300Z@\000\000\000\000\000\360a@\315\314\314\314\314|e@\000\000\000\000\000\000Y@\315\314\314\314\314|f@\315\314\314\314\314\274`@\000\000\000\000\000\000n@\000\000\000\000\000@V@\000\000\000\000\000\020a@\000\000\000\000\000`m@\000\000\000\000\000@a@\000\000\000\000\000\304a@\000\000\000\000\000pg@\315\314\314\314\314\274f@\000\000\000\000\000\200a@\000\000\000\000\000 b@\000\000\000\000\000\340e@\000\000\000\000\000@m@\232\231\231\231\231y[@\315\314\314\314\314<`@\315\314\314\314\314la@\000\000\000\000\000 r@fffff\006d@\000\000\000\000\000`a@\000\000\000\000\000\200`@\000\000\000\000\000\300d@H\341z\024\256\177d@\000\000\000\000\0000b@\000\000\000\000\000\000i@\000\000\000\000\000@d@\000\000\000\000\000 ^@\000\000\000\000\000\000V@\232\231\231\231\231\371S@\000\000\000\000\000 l@\315\314\314\314\314\034o@\313\241E\266\363\365m@\000\000\000\000\000\300g@\000\000\000\000\000\000e@\000\000\000\000\000\210`@\000\000\000\000\000\240\\@\000\000\000\000\000@o@)\\\217\302\365\034a@\000\000\000\000\000\320w@\000\000\000\000\000@`@\000\000\000\000\000\240g@\000\000\000\000\000@_@\000\000\000\000\000\220e@\000\000\000\000\000\000m@\232\231\231\231\231Ya@\000\000\000\000\000\000Y@\000\000\000\000\000@`@\000\000\000\000\000pr@\000\000\000\000\000\200d@\000\000\000\000\000pw@\000\000\000\000\000\300\\@\000\000\000\000\000`a@\000\000\000\000\000 f@\000\000\000\000\000`a@\000\000\000\000\000\300k@\000\000\000\000\000\340d@\000\000\000\000\000\340s@\000\000\000\000\000\200j@\000\000\000\000\000\240e@\000\000\000\000\000\340`@\000\000\000\000\000 n@\341z\024\256GUi@?5^\272Iju@\000\000\000\000\000`a@\000\000\000\000\000\240k@\000\000\000\000\000Ps@\000\000\000\000\000\200f@\000\000\000\000\000\240g@fffffff@\000\000\000\000\000 f@\000\000\000\000\000 i@\000\000\000\000\000\320[@\315\314\314\314\314lf@\000\000\000\000\000\200V@\000\000\000\000\0000n@\000\000\000\000\0000p@\000\000\000\000\000\000`@\000\000\000\000\000\200U@\000\000\000\000\000@_@\000\000\000\000\000\000q@\000\000\000\000\000\300c@\000\000\000\000\000\000d@\000\000\000\000\000\360i@\037\205\353Q\270\376`@fffff.a@\000\000\000\000\000\200V@\000\000\000\000\000\300U@\000\000\000\000\000\000f@\315\314\314\314\314Lf@\000\000\000\000\000\370a@\000\000\000\000\000\260s@\000\000\000\000\000\000b@\000\000\000\000\000`g@\000\000\000\000\000\300a@\000\000\000\000\000 T@\000\000\000\000\000\000c@\000\000\000\000\000 f@\000\000\000\000\000\260p@\000\000\000\000\000\340z@\000\000\000\000\000\300g@\000\000\000\000\000\340a@\000\000\000\000\0000c@\000\000\000\000\000\220p@\000\000\000\000\000\340`@\315\314\314\314\314\034j@\000\000\000\000\000\330p@\000\000\000\000\000\240b@\000\000\000\000\000\340V@"
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 15
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 10000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "OneShotIterator"
  op: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dataset_factory"
    value {
      func {
        name: "_make_dataset_NupAr2W2Tp4"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/Shape"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/Shape"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:2"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/Shape"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:3"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/Shape"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:4"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/Shape"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:5"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/Shape"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:6"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/Shape"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:7"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/Shape"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:8"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:9"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:10"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:11"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:12"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:13"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:14"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:15"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:16"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:17"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:18"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:19"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:20"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:21"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:22"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:23"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Shape"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Ex/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Fa/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_Gd/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_NOVAL/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/BsmtQual_TA/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 24
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\030\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4330126941204071
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4330126941204071
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/kernel/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/bias/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Size"
  op: "Size"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Switch"
  op: "Switch"
  input: "dnn/zero_fraction/LessEqual"
  input: "dnn/zero_fraction/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/switch_t"
  op: "Identity"
  input: "dnn/zero_fraction/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/switch_f"
  op: "Identity"
  input: "dnn/zero_fraction/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/pred_id"
  op: "Identity"
  input: "dnn/zero_fraction/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/zeros"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction/cond/count_nonzero/NotEqual/Switch:1"
  input: "dnn/zero_fraction/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/zero_fraction/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/Const"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction/cond/count_nonzero/Cast"
  input: "dnn/zero_fraction/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual/Switch"
  input: "dnn/zero_fraction/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/zero_fraction/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction/cond/count_nonzero_1/Cast"
  input: "dnn/zero_fraction/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Merge"
  op: "Merge"
  input: "dnn/zero_fraction/cond/count_nonzero_1/nonzero_count"
  input: "dnn/zero_fraction/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction/counts_to_fraction/Cast"
  input: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/fraction"
  op: "Identity"
  input: "dnn/zero_fraction/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.7071067690849304
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7071067690849304
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/kernel/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/bias/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_1/kernel/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_1/bias/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Size"
  op: "Size"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Switch"
  op: "Switch"
  input: "dnn/zero_fraction_1/LessEqual"
  input: "dnn/zero_fraction_1/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/switch_t"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/switch_f"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/pred_id"
  op: "Identity"
  input: "dnn/zero_fraction_1/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual/Switch:1"
  input: "dnn/zero_fraction_1/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/zero_fraction_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/Const"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_1/cond/count_nonzero/Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual/Switch"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/zero_fraction_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Merge"
  op: "Merge"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/nonzero_count"
  input: "dnn/zero_fraction_1/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_1/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_1/activation/tag"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.095445156097412
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.095445156097412
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/kernel/part_0"
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/bias/part_0"
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/bias/part_0"
  input: "dnn/logits/bias/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "Identity"
  input: "dnn/logits/kernel/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/bias/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "Identity"
  input: "dnn/logits/bias/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Size"
  op: "Size"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Switch"
  op: "Switch"
  input: "dnn/zero_fraction_2/LessEqual"
  input: "dnn/zero_fraction_2/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/switch_t"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/switch_f"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/pred_id"
  op: "Identity"
  input: "dnn/zero_fraction_2/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual/Switch:1"
  input: "dnn/zero_fraction_2/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/Const"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_2/cond/count_nonzero/Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual/Switch"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Merge"
  op: "Merge"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/nonzero_count"
  input: "dnn/zero_fraction_2/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_2/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_2/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/labels/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:24"
  input: "dnn/head/labels/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/Shape"
  op: "Shape"
  input: "dnn/head/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/Shape_1"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "dnn/head/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/strided_slice/stack"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice"
  op: "StridedSlice"
  input: "dnn/head/labels/Shape_1"
  input: "dnn/head/labels/strided_slice/stack"
  input: "dnn/head/labels/strided_slice/stack_1"
  input: "dnn/head/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/head/labels/concat/values_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat/axis"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat"
  op: "ConcatV2"
  input: "dnn/head/labels/strided_slice"
  input: "dnn/head/labels/concat/values_1"
  input: "dnn/head/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Equal"
  op: "Equal"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/All"
  op: "All"
  input: "dnn/head/labels/assert_equal/Equal"
  input: "dnn/head/labels/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert"
  op: "Assert"
  input: "dnn/head/labels/assert_equal/All"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/labels"
  op: "Identity"
  input: "dnn/head/labels/ExpandDims"
  input: "^dnn/head/labels/assert_equal/Assert/Assert"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/ToFloat"
  op: "Cast"
  input: "dnn/head/labels"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/SquaredDifference"
  op: "SquaredDifference"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/values/shape"
  op: "Shape"
  input: "dnn/head/mean_squared_error/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "dnn/head/mean_squared_error/ToFloat/x"
  op: "Const"
  input: "^dnn/head/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/Mul"
  op: "Mul"
  input: "dnn/head/mean_squared_error/SquaredDifference"
  input: "dnn/head/mean_squared_error/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "dnn/head/mean_squared_error/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "dnn/head/weighted_loss/ToFloat/x"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Mul"
  op: "Mul"
  input: "dnn/head/mean_squared_error/Mul"
  input: "dnn/head/weighted_loss/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Const"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Sum"
  op: "Sum"
  input: "dnn/head/weighted_loss/Mul"
  input: "dnn/head/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/gradients/Fill"
  op: "Fill"
  input: "dnn/head/gradients/Shape"
  input: "dnn/head/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/Fill"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "dnn/head/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "dnn/head/mean_squared_error/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  input: "dnn/head/weighted_loss/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/head/mean_squared_error/Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape"
  op: "Shape"
  input: "dnn/head/mean_squared_error/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/head/mean_squared_error/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/head/mean_squared_error/SquaredDifference"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/control_dependency"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/scalar"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/sub"
  op: "Sub"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/ToFloat"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Mul"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/mul_1"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/mul_1"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Neg"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape"
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Neg"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/control_dependency"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/control_dependency"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/L2Loss"
  op: "L2Loss"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/L2Loss_1"
  op: "L2Loss"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/L2Loss_2"
  op: "L2Loss"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/L2Loss_3"
  op: "L2Loss"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/L2Loss_4"
  op: "L2Loss"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/L2Loss_5"
  op: "L2Loss"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/stack"
  op: "Pack"
  input: "dnn/head/global_norm/L2Loss"
  input: "dnn/head/global_norm/L2Loss_1"
  input: "dnn/head/global_norm/L2Loss_2"
  input: "dnn/head/global_norm/L2Loss_3"
  input: "dnn/head/global_norm/L2Loss_4"
  input: "dnn/head/global_norm/L2Loss_5"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/head/global_norm/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/Sum"
  op: "Sum"
  input: "dnn/head/global_norm/stack"
  input: "dnn/head/global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/global_norm/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/mul"
  op: "Mul"
  input: "dnn/head/global_norm/Sum"
  input: "dnn/head/global_norm/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/global_norm"
  op: "Sqrt"
  input: "dnn/head/global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/VerifyFinite/CheckNumerics"
  op: "CheckNumerics"
  input: "dnn/head/global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/global_norm/global_norm"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "message"
    value {
      s: "Found Inf or NaN global norm."
    }
  }
}
node {
  name: "dnn/head/VerifyFinite/control_dependency"
  op: "Identity"
  input: "dnn/head/global_norm/global_norm"
  input: "^dnn/head/VerifyFinite/CheckNumerics"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/global_norm/global_norm"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/truediv/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/truediv"
  op: "RealDiv"
  input: "dnn/head/clip_by_global_norm/truediv/x"
  input: "dnn/head/VerifyFinite/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/truediv_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/truediv_1"
  op: "RealDiv"
  input: "dnn/head/clip_by_global_norm/Const"
  input: "dnn/head/clip_by_global_norm/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "dnn/head/clip_by_global_norm/truediv"
  input: "dnn/head/clip_by_global_norm/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul"
  op: "Mul"
  input: "dnn/head/clip_by_global_norm/mul/x"
  input: "dnn/head/clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul_1"
  op: "Mul"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  input: "dnn/head/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_0"
  op: "Identity"
  input: "dnn/head/clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul_2"
  op: "Mul"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  input: "dnn/head/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_1"
  op: "Identity"
  input: "dnn/head/clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul_3"
  op: "Mul"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  input: "dnn/head/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_2"
  op: "Identity"
  input: "dnn/head/clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul_4"
  op: "Mul"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  input: "dnn/head/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_3"
  op: "Identity"
  input: "dnn/head/clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul_5"
  op: "Mul"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  input: "dnn/head/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_4"
  op: "Identity"
  input: "dnn/head/clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul_6"
  op: "Mul"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  input: "dnn/head/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_5"
  op: "Identity"
  input: "dnn/head/clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/GradientDescent/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/head/GradientDescent/update_dnn/hiddenlayer_0/kernel/part_0/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/head/GradientDescent/learning_rate"
  input: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/GradientDescent/update_dnn/hiddenlayer_0/bias/part_0/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/head/GradientDescent/learning_rate"
  input: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/GradientDescent/update_dnn/hiddenlayer_1/kernel/part_0/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "dnn/head/GradientDescent/learning_rate"
  input: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/GradientDescent/update_dnn/hiddenlayer_1/bias/part_0/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "dnn/head/GradientDescent/learning_rate"
  input: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/GradientDescent/update_dnn/logits/kernel/part_0/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/head/GradientDescent/learning_rate"
  input: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/GradientDescent/update_dnn/logits/bias/part_0/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dnn/logits/bias/part_0"
  input: "dnn/head/GradientDescent/learning_rate"
  input: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/GradientDescent/update"
  op: "NoOp"
  input: "^dnn/head/GradientDescent/update_dnn/hiddenlayer_0/bias/part_0/ResourceApplyGradientDescent"
  input: "^dnn/head/GradientDescent/update_dnn/hiddenlayer_0/kernel/part_0/ResourceApplyGradientDescent"
  input: "^dnn/head/GradientDescent/update_dnn/hiddenlayer_1/bias/part_0/ResourceApplyGradientDescent"
  input: "^dnn/head/GradientDescent/update_dnn/hiddenlayer_1/kernel/part_0/ResourceApplyGradientDescent"
  input: "^dnn/head/GradientDescent/update_dnn/logits/bias/part_0/ResourceApplyGradientDescent"
  input: "^dnn/head/GradientDescent/update_dnn/logits/kernel/part_0/ResourceApplyGradientDescent"
}
node {
  name: "dnn/head/GradientDescent/value"
  op: "Const"
  input: "^dnn/head/GradientDescent/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/GradientDescent"
  op: "AssignAdd"
  input: "global_step"
  input: "dnn/head/GradientDescent/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/ones_like/Shape"
  op: "Shape"
  input: "dnn/head/mean_squared_error/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/ones_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/ones_like"
  op: "Fill"
  input: "dnn/head/ones_like/Shape"
  input: "dnn/head/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/mul"
  op: "Mul"
  input: "dnn/head/mul/x"
  input: "dnn/head/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/Sum"
  op: "Sum"
  input: "dnn/head/mul"
  input: "dnn/head/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/truediv"
  op: "RealDiv"
  input: "dnn/head/weighted_loss/Sum"
  input: "dnn/head/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "dnn/head/weighted_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "average_loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "average_loss"
      }
    }
  }
}
node {
  name: "average_loss"
  op: "ScalarSummary"
  input: "average_loss/tags"
  input: "dnn/head/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/hiddenlayer_0/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_0/kernel/part_0/Assign"
  input: "^dnn/hiddenlayer_1/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_1/kernel/part_0/Assign"
  input: "^dnn/logits/bias/part_0/Assign"
  input: "^dnn/logits/kernel/part_0/Assign"
  input: "^global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 7
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/hiddenlayer_1/kernel/part_0"
        string_val: "dnn/hiddenlayer_1/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 7
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/hiddenlayer_1/kernel/part_0"
        string_val: "dnn/hiddenlayer_1/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_0/activation"
  input: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_1/activation"
  input: "dnn/dnn/logits/fraction_of_zero_values"
  input: "dnn/dnn/logits/activation"
  input: "loss"
  input: "average_loss"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/Identity"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/Read_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/Identity_2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/Read_2/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/Identity_4"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/Read_3/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/Identity_6"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_4/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/Read_4/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/Identity_8"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_5/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/Read_5/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/Identity_10"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_d07b4c59c1944fbd874961dc37e47c2e/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "global_step"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/ShardedFilename_1/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename_1"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename_1/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Read_6/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/Read_6/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/Identity_12"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_7/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/Read_7/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/Identity_14"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_8/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/Read_8/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/Identity_16"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_9/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/Read_9/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/Identity_18"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_10/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/Read_10/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/Identity_20"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_11/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/Read_11/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_23"
  op: "Identity"
  input: "save/Identity_22"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/SaveV2_1/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 6
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
      }
    }
  }
}
node {
  name: "save/SaveV2_1/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 6
          }
        }
        string_val: "8 0,8"
        string_val: "24 8 0,24:0,8"
        string_val: "4 0,4"
        string_val: "8 4 0,8:0,4"
        string_val: "1 0,1"
        string_val: "4 1 0,4:0,1"
      }
    }
  }
}
node {
  name: "save/SaveV2_1"
  op: "SaveV2"
  input: "save/ShardedFilename_1"
  input: "save/SaveV2_1/tensor_names"
  input: "save/SaveV2_1/shape_and_slices"
  input: "save/Identity_13"
  input: "save/Identity_15"
  input: "save/Identity_17"
  input: "save/Identity_19"
  input: "save/Identity_21"
  input: "save/Identity_23"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency_1"
  op: "Identity"
  input: "save/ShardedFilename_1"
  input: "^save/SaveV2_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "save/ShardedFilename_1"
  input: "^save/control_dependency"
  input: "^save/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity_24"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  input: "^save/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 6
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 6
          }
        }
        string_val: "8 0,8"
        string_val: "24 8 0,24:0,8"
        string_val: "4 0,4"
        string_val: "8 4 0,8:0,4"
        string_val: "1 0,1"
        string_val: "4 1 0,4:0,1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Identity_25"
  op: "Identity"
  input: "save/RestoreV2_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "save/Identity_25"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_26"
  op: "Identity"
  input: "save/RestoreV2_1:1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "save/Identity_26"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_27"
  op: "Identity"
  input: "save/RestoreV2_1:2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "save/Identity_27"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_28"
  op: "Identity"
  input: "save/RestoreV2_1:3"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "save/Identity_28"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_29"
  op: "Identity"
  input: "save/RestoreV2_1:4"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "dnn/logits/bias/part_0"
  input: "save/Identity_29"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_30"
  op: "Identity"
  input: "save/RestoreV2_1:5"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel/part_0"
  input: "save/Identity_30"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/restore_shard_1"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_5"
  device: "/device:CPU:0"
}
node {
  name: "save/restore_all/NoOp"
  op: "NoOp"
  input: "^save/restore_shard"
}
node {
  name: "save/restore_all/NoOp_1"
  op: "NoOp"
  input: "^save/restore_shard_1"
  device: "/device:CPU:0"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_all/NoOp"
  input: "^save/restore_all/NoOp_1"
}
library {
  function {
    signature {
      name: "_make_dataset_NupAr2W2Tp4"
      output_arg {
        name: "modeldataset"
        type: DT_VARIANT
      }
      description: "Factory function for a dataset."
      is_stateful: true
    }
    node_def {
      name: "optimizations"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 3
              }
            }
            string_val: "map_and_batch_fusion"
            string_val: "noop_elimination"
            string_val: "shuffle_and_repeat_fusion"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_0"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content: "\000\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\001\001\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\000\000\000\001\000\000\000\000\000\000\001\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\000\001\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\001\001\000\000\000\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\001\001\000\000\001\000\000\000\000\000\001\000\000\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_1"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_3"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_4"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_5"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content: "6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277\223\277\217\357\016\272\006\300p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?\223\277\217\357\016\272\006\3006\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?\223\277\217\357\016\272\006\300p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?\223\277\217\357\016\272\006\3006\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277\223\277\217\357\016\272\006\3006\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?\223\277\217\357\016\272\006\300S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?\223\277\217\357\016\272\006\300p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277\223\277\217\357\016\272\006\300p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\277S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_6"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content: "\022\236\202a\301?\353\277\342k(m\231\330\000@k\236\357QV\257\355\277K\316w\006:\027\322?\014\233\251\204\261v\311?\364\260\257\356\374\365\372\277\260)R\322\224\264\352?c\325p\221\030\370\274\277\364\260\257\356\374\365\372\277\346\3543\000\235\324\315\277\353\323sl\r\275\262\277\342o\226D\020\210\363\277\314/{\010+\354\362\277J`,$\376\010\243?\300N\322\013\342A\325?\230\036&\312 \347\356\277F\317utA\351\330?~]hn\330:\347\277\217\236\201\030\305\250\356\277\307\323\341\245\236\303\261\277]HP`\217\202\341?\000\232b\263\362\'\302?\375\323\274\317\3049\263\277\235\217\333\243\311\244\361\277\222\353\310\241\000\223\304\277\354<\267g\206E\343\277a7\241c\314^\325\277\355\017\244\342\002\326\363\277}\232aj\366\220\305?+7\3069\246\350\323\277v\234\363uG\013\340\277?\325\014\344h\'\360?\346\354\312\214\374\350\007@\213\217\222@\022(\361\277\234\233\361\236l\\\315?y\035\226\225\252\033\347\277@\351\311\245\032\251\347?u\351\244\317@\037\351?Rw_\301!\226\376?\331\357\361\222\264I\363\277 \035)\245\025\254\344\277\207\3250qF\032\362?\215\257\373,\2517\361\277:\225:\013;\010\360?cO.\241u\017\360\277\367\025\271\235\300%\365?\270\017\311\270\334_\362\277\210\337\364\335\257\020\361\277WvaS\032\304\367?\200\275\3147w\242\220?cO.\241u\017\360\277c26{k\033\271?\00282\341>\301\331\277}\014~%G\014\005@\377\017\355E\272R\364\277\205O\365O\303\235\332?=\220\241\t\033\234\337?\220]\261\321\217\267\347\277\244}c!\336C\350\277\027\340<\370j\366\364\277o\221E\271iO\376\277\203\\j\000\321h\340\277\035\007\271\r\307\'\375?\213G\273\264\034q\222\277A\320s\342H\273\337?\274\325\013\233l\220\363?^\336x\307\314Q\355\2771Vf\240\024\273\366?r/\016\030\226|\360\277?\325\336\312\251\376\273\277J`,$\376\010\243?\321\274\311Rs\212\342\277\275\337\317\007\326\206\362\277Q\036\002=C\364\354\277\243\266W\271%\326\371?<x\337\343\222V\333\277\303v\027\247f\260\372?\340\026n\250\020{\373?Z]\326\247iA\346\277LP\343\253\305d\366\277d\337b\027A\027\360\277\376}\320\021s\263\352\277cO.\241u\017\360\277\325\257\037\272\206*\363\277\250l\264$\033 \314\277\3162\354\316\267\007\274?\216I)\370\274\312\351?\231\325K\273>n\276\277\377\017\355E\272R\364\277c\325p\221\030\370\274\277\3231\356`\2605\265?\014\233\251\204\261v\311?#\020\177\014)L\365\277\037\314>\\\204}\002@\036\320\341\033\332\301\336?\3147W\267\030K\330\277\034b\2269\236\263\257?\253\325\224\036\366\352\276\277\344\244\355\216\004\004\241\277\227\206\025\245g\200\371?,\016\270\030\371<\321?\036\320\341\033\332\301\336?\005fd\236\025\213\365?\371\257\261\200\365#\364\277\211k$\360\244T\304\277\331\323*\tV@\262\277p\336\301*\204\316\355\277\251O\207\0262\227\333?\301^\212i\275\377\357\277e\365\007\227n0\361?5\020\310o\340\310\365\277Q\036\002=C\364\354\277Q\036\002=C\364\354\277T\026\375b74s\277P\210\331\325\005%\341?1\320\365\226\262\251\365\277\304?\013\315\232\265\362\277\345\217\3770\247\227\363\277;\251\367\314\354\211\347?]\033r\303\352\247\313?Z\240\216\254\032\312\366\277\377\017\355E\272R\364\277Y\232\317\243\207\227\304?\302\350\312\356\026@\344?<l\376\320\3163\311\277\236\037\020\032\225\254\361\277*\366*\333O\214\366?\236\037\020\032\225\254\361\277\314\275\307\300z\\\351\277K\316w\006:\027\322?\270\231>&\0255\300?Uj\265(56\357?\'Hu6i\014\340?\014\306\237c\332\271\365?\234\021|14\207\377\277=O\321\302\345\252\330?\366N\2555\010\270\326?\233or\2672\225\361\277\037NA\216o\337\320?\314o\210\302bQ\025@B\314\320\"\363v\003@\246\017\200U%\343\361\277|\317P\236g_\332?\322N\033o\231\276\325?-\036pv\324\372\353\277\305\317?Cf\275\362\277K\005O\370&}\360?\233kmS\\\321\304\277Y\020Z6O\302\366\277\355\017\244\342\002\326\363\277\027\235\204\363\271m\344\277=7\017\235]e\324\277L\247Xr(o\376?>\026\335*\236\030\367?\376}\320\021s\263\352\277E\350\3137\023\327\340?\320\270\371\326{[\337\277\304v\342\276\207\033\321\277\020\301\321y\333\270\373\277h\035M2\363\236\346\277\236\334W\025\344#\341\277-\036pv\324\372\353\277\366\233^\217\001\314\317?\017\276\024R2\210\224?\306\034\274\264\200<\342\277V\350\024\233\312S\341?\247\251\255 9v\352?\307\353:X\206\035\000@l\234i8[\227\004@\317\246Y\273$\006\373?\231\3516\226\257\030\352?\331\357\361\222\264I\363\277\341y\t;xy\211?\2361\0237\212\277\263?n\274\322$\362\246\004@\356\231\031P;\253\301?o\2463\027\307\273\253\2779\017\377\351\267\213\330?\00774s7\357\322\277\3162\354\316\267\007\274?\261\3709\351:\201\336\277H\236]\213\347\265\354\277\211o)T{\030\361\277\n\355\305\306\013\316\316\277\376\211\261$7\326\354?\032O?\374v\261\327?\273\016\0003\264\"\325?9I\223\003N\"\236\277\3436\242\254\310\365\321\277\334\235\2477\233\311\351\277\361\366\0307RS\322\277\007\376t\303\316\361\352\277\3607\351}\207D\331\277\242]\3724G4\350\277\371\267\215/\343\202\331\277)\352~\260j\376\355?\201<\001\024:Y\340\277\310\367\204\336\352+\330\277\234\217\020\214\2509\333?Sw*\331B\001\325\277\003`\010\227 \026\241?\013k%9\241\353\300\277O7X\000\025\342\324\277\347\253\372E\307\367\000@n\367\027\356U\274\325\277l\317\322R\321M\360\277Cjl\305}\271\356?\233\375\276o\202\005\350\277,\032\231+\275_\303?\316O\344\364\301\373\362\277\034\246\177\332\372&\366?W\370\314\370\245\021\334\277\262\374\te2\260\341\277V\324)\300Y\251\265\277\372v\275\350\255\221\322\277Q2\355\027\264\236\270?\226lk\301c\243\313\277h\035M2\363\236\346\277+7\3069\246\350\323\277\205O\365O\303\235\332?\314/{\010+\354\362\277\2507\305\360\251Q\327\277\377\215\201\240.\005\320?\205\275\2433\235i\347\277\260\324\226\260\356\030\270\277\310<%\241\027L\342\277\213\035\337\370a\230\347\277y\217I\335Z\253\360\277x\233_\330\375b\314?\033\335V\314\347\214\344\277\244\357\026i\216\323\361\277\361Hovp/\234\277\355\017\244\342\002\326\363\277\251|e\263\326q\341\277XIN\316\226T\350?\313lF\353\211\031\315\277\330\034\005\0308\271\342\277\263\236\023\3373\242\357\277Q\325UG \244\360?\253\337\206\244\036\n\362\277\217\0205`u8\370\277\252\214\264\235\021D\006@\262\317+\310\215\325\333?\227DQ\177t\303\005@\001iJ\312\230\364\345?Aw\341u\213\204\324\277\222\353\310\241\000\223\304\277w\375,\251\023\014\347\277$\236\313\304x\274\353\277B@\n\204\236\036\366\277\254\250\257\2621\244\343?D\324\340\\\242,\265\277\323G\337A\372c\224\277\257`)\304\201\032\371\277F=$X\033\265\345\277\020~\031u*0\353\277\264\034sQ\311\277\341\277\013\270\326\222\232\377\331\277t\032\275\270\232R\305?p\225\0255a~\361?\332\211\037^\310\334\353?\330\034\005\0308\271\342\277\314/{\010+\354\362\277\344\233\025,JO\317?aOc\211T\244\331?\201\211\262m3m\351?n\367\027\356U\274\325\277\377\017\355E\272R\364\277\237~a\217\345\025\357\277\233kmS\\\321\304\277`\2655\276@\021\361?n\367\027\356U\274\325\277\326IM\205\232\275\353?\257\035q\277\320\221\350\277\264\034sQ\311\277\341\277\246\336\234T\252D\357\277\025\017m#I\222\327?\361\210jSx\207\345?2\324\227\371\352\257\264\277\3011\245\375\370\270\264?A\320s\342H\273\337?\364\260\257\356\374\365\372\277\0043\307\370\335}\275?>\220l!<\007\366\277=O\321\302\345\252\330?\'\246\017\212\351\310\251\277\260\350\201\213_\303\343?\205\275\2433\235i\347\277.\277\244\206\250S\234?c\325p\221\030\370\274\277\330\214V\000MK\205\277\355\017\244\342\002\326\363\277\325\267\373ht\211\330\277\2532Z\010I\016\273?:P\232H\016\350\365\277\036\320\341\033\332\301\336?\304\216\244\344\017a\325?\314/{\010+\354\362\277\34517\304g\262\265?Q\3351\366\r\003\346\277\342k\221\3409\304\306\277,\245\021\034\342\366\242\277\267\177\224B\021X\362\277\352]\036\302$\'\352\277b\032tU\343\325\304?\367)v_r\247\354?;\235\026\272(g\345\2776&m\357\r\342\366?.\246\310=\262\243\366?\031\000\246\344\001\006\365\277\276k\377\031\313\312\305\277\021\216\312\003\346\201\320?B@\n\204\236\036\366\277\351\313c2^\007\001@\0043\307\370\335}\275?\332\246\351j\023\250\256\277\352\034N{\3575\343\277z\334\305Nu*\340\277;\251\367\314\354\211\347?Q\036\002=C\364\354\277\252HK\351\222<\232\277\253\234\316\237m\201\341\277\2438\303^\261#\336\277\355\017\244\342\002\326\363\277\256N\211\250*\305\324?\014\233\251\204\261v\311?\364o\337\247\307\004\364\277\017\370\250k\310\036\332\277\323G\337A\372c\224\277\355\017\244\342\002\326\363\277\264\034sQ\311\277\341\277\240vP\370\030\"\320\277#\020\177\014)L\365\277O7X\000\025\342\324\277\357l\330\261\370\022\316\277\031\376\275&\206n\353\277z\334\305Nu*\340\277\253\325\224\036\366\352\276\277\323\035\003\206?\213\351\277\255k\266\266\023N\305\2771N\212\361&\\\321?\355\017\244\342\002\326\363\277u\351\244\317@\037\351?\222`P\261\333\373\244?\344\310\363\310\356)\345?&\312\025\304\323\356\355?E\350\3137\023\327\340?y\217I\335Z\253\360\277\364kq\320PU\001@\202\017\356\216\266\351\360\2778t\335?\346,\003@\356SP\306q*\001@\366\233^\217\001\314\317?\035\270\037\366Q|\332\277\322N\033o\231\276\325?\204/W{M\371\360\277\254>\330\031os\357\277}\2368\265\r,\356\277xN\256~\004O\323?\212\205\316\323\2501\362?Z\252\207\001cU\357?\304\374R\310\351,\342\277\311\005N\257*\346\363?\307(\235\307D_\344?h\035M2\363\236\346\277\032H\003\317\327V\226\277\354\367\026\245Y%\331\277\320\270\371\326{[\337\277\342k\221\3409\304\306\277/k\267\377\017\345\301\277\352\034N{\3575\343\277K\316w\006:\027\322?\00774s7\357\322\277*l\265m\027\267\310\277X\267\374\261p \325\277\242]\3724G4\350\277\216\006q\363\013B\371?\271h&=\273\001\344?d\337b\027A\027\360\277\263\232<\224\034\007\307?\367\035\225L\256\204\352\277\036\233\362\347h\363\311?I\214\016\346\221e\201\277V\035\004\317;\"\346\277\3011\245\375\370\270\264?O\311\251\034;\026\350?\371\267\215/\343\202\331\277\246\225\360^\207\364\362?\025\027I\3226\361\374?\205O\365O\303\235\332?H]\215D\262\304\345\277+\220X\246c\037\337?\204/W{M\371\360\277\225h\224vL\010\343?4\317,\021\212l\330?\025\004\200\357B;\002@\350vt\205\366\024\322\277\221(\302\235\036\351\342?\352\034N{\3575\343\277\244\266\"\321FA\320\277c\325p\221\030\370\274\277\001\367\226\202\350d\374?\306im\016zP\353?\334\235\2477\233\311\351\277\255\375\007\3239\202\350\277\355\017\244\342\002\326\363\277_h\271L&\222\341?x\233_\330\375b\314?\336+V\224k\271\000@\325\267\373ht\211\330\277jI\2271N\321\350?\332\246\351j\023\250\256\277\234\320\253\352\376\225\370\277\'\017\266\206\000\017\330?\237\370\360\205\203\004\336\277x\205\205p\361\264\361?\355\017\244\342\002\326\363\277\331ub\234\026[\364?0\233;K p\312?Q\036\002=C\364\354\277eJ\225\237U\243\357?t\2455\251\277\351\244\277\325\267\373ht\211\330\277\256\217Y\357_\266\333?\232e\256J\311\236\362?4\317,\021\212l\330?\020\267\330$\223-\323\277\233kmS\\\321\304\277\273|\256\026\216\356\341\277u\325\347\r\217\235\361?\355\017\244\342\002\326\363\2773~\253;\231)\354\277\361\016\333\\\332\230\326?-\036pv\324\372\353\277=\275\177\246\277v\345\277P\016J\337g6\322?\363\234\362,Kt\343\277\004\035V\004r\273\010@\234N@EsH\324?\t\036\336\257e\001\353\277\371a\004s/\272\256?B\t3\222\261\270\347?>\016\001|\260\271\321?4\267j\353\001\'\324\277\273\210\217)R\021\344?b\032tU\343\325\304?\344\244\355\216\004\004\241\277\240Ir[tG\352?\317\3350\255\021l\351\2771^BO\002\032\354\277\246\017\200U%\343\361\277\203hK\023\225\213\342?\344\314a\240e\331\007@<h\'\206\267\230\340?y^f\334\337\014\356\277\210\270\325I\236h\335\277@w\026^j\031\376?\267\005\005Lsi\363?\\\312\360\355\371d\357?\214\350\357\304\360\311\342?\230\036&\312 \347\356\277\254\260\213a\037\003\371\277j\317\007;\260\342\331?\356\231\031P;\253\301?\357l\330\261\370\022\316\277\370\357\276:-\211\026@\321\t{\254l\236\353?\032H\003\317\327V\226\277\17781\230B*\335\277V\350\024\233\312S\341?#\020\177\014)L\365\277Q\036\002=C\364\354\277\252OR.S\002\362\277\021\0206\251q\317\364\277\027\251e\006~\220\346?\3475\331&\240\270\364?S>k)\332\003\355\277\226xL\324\'\306\335\277\350vt\205\366\024\322\277tE\263\227\303\225\361?\355\017\244\342\002\326\363\277\000gb\014\035]\374?1^BO\002\032\354\277\235\035(\\\031\025\350\277\351\232\027\276B}\310?\007\376t\303\316\361\352\277\n\355\305\306\013\316\316\277\361\277AEe\355\363\277|=\377\201A+\347\277V\\N\374u\373\003@\351\232\027\276B}\310?\\\353\355w\332\034\303\277f\233\026uF\346\313?V\350\024\233\312S\341?\322\310\252e7\255\344?}\216\200W2n\323?i5\332o\234O\361?\261=\332\253g\241\350\277\205\000\\8N\362\367\277\334\231\320\354\203.\301?\022\226\246\262\323\340\365?\364o\337\247\307\004\364\277\020\200\0013\246\307\364\277`xq\252\001P\334\277\344\233\025,JO\317?\240vP\370\030\"\320\277]\005\230[\336\371\360?\332`t>\271\356\246?V1\357\251\254\314\261?\251\277\035\270\207\372\361\277*l\265m\027\267\310\277\017\276\024R2\210\224?#\317\343\255\322\357\327?9\017\377\351\267\213\330?\315O\031\335\240\220\334? \035)\245\025\254\344\277\207\351\3552\370\233\351?\364o\337\247\307\004\364\277a\311\362\177\362\222\350?\003P\364\006\307\006\336?j\317\007;\260\342\331?B\233\204\256\327\354\312?,\245\021\034\342\366\242\277@\260\325\r\323\026\366\277\205\311\204Fa\214\351?\306im\016zP\353?TN\034\270\225U\322?f\377\313\003\330&\360\277\020\267\330$\223-\323\277\377\017\355E\272R\364\277\323)\344\230\003\256\353??\325\014\344h\'\360?\350\010\306\241\034I\345?\241U\036\206Y\325\362?\360+\237\367\"6\001@\231\234\205<\266\004\341\277\303\257\326V\317\255\362\277\270\017\311\270\334_\362\277(\316\345?\313\035\321?\244\266\"\321FA\320\277Cjl\305}\271\356?6\236\024(09\354\277^\247\241\325\337\353\376?\313ho\240r~\344?:\316.\243\202\232\321?\025\017m#I\222\327?\270\017\311\270\334_\362\277\014\320\230\270\"E\336?\324\354\352\234\345W\315\277Q\036\002=C\364\354\277\303v\027\247f\260\372?\303=#\017\037\036\351\277c\325\236\252\327 \361?2`*\r~\261\365\277V\035\004\317;\"\346\277\'}dj\332\332\344\277\334\235\2477\233\311\351\2773\350\202\324[Z\340?c\351[l\211\242\350?fNe\033M\322\322?\267<\334=`\317\341\277Y\010~\207ac\341?(\316\345?\313\035\321?9\017\377\351\267\213\330?\325\363\313\235\365~\000@\344\233\025,JO\317?\0307\262\276\315\000\375?\376\266\217\301\333\260\322\277\332\246\351j\023\250\256\277\352\034N{\3575\343\2774\267j\353\001\'\324\277V\035\004\317;\"\346\277\223\316\233\223\027\n\324?Ak\000c\307a\302\277\313\\\216\215\256[\342\277\307\323\341\245\236\303\261\277Y\010~\207ac\341?t\2455\251\277\351\244\277|\006(\220T\305\370?\356\231\031P;\253\301?\367\334\304\005y\223\343\277t\2455\251\277\351\244\277;\255e\244c9\n@\265\357_\314EP\362\277\311\033(\0277\224\316?\3162\354\316\267\007\274?D\324\340\\\242,\265\277\315O\031\335\240\220\334?\036\320\341\033\332\301\336?\363\234\362,Kt\343\277\220]\261\321\217\267\347\277\003\300\212\250\034j\364\277\317\351\021\300\325\216\353?\273|\256\026\216\356\341\277\3436\242\254\310\365\321\277d\337b\027A\027\360\277/k\267\377\017\345\301\277\275\234\027\003%\376\341\2779I\223\003N\"\236\277\004\027\000o\177t\374?\363e\033;^\016\365?\330\034\005\0308\271\342\277KH\007\375\327\005\341?Ak\000c\307a\302\277\317\234`f\334z\342\277\261=\332\253g\241\350\277\026\224\264e\016C\002@X\317\276\327\370e\331?\2267|\215\362\324\326\2776\236\024(09\354\277\337\20692Es\373?\217\317d\031@G\361\277AJ\003\331\346\251\356?\350?\235\223\t\257\363\277z1\201p\033\306\262?\211\365\231]\335)\362?\030ll\n`:\310\277\032\032P\310\005\343\302?\251\366\364\251t`\320\277x\233_\330\375b\314?\211o)T{\030\361\277h).E\267\301\350?l\317\322R\321M\360\2777(U\255\211y\340?\322N\033o\231\276\325?tOw\004-\214\360\277\\\353\355w\332\034\303\2772\346\232\026\340\302\366?]\017\221\260&\205\331?\231\234\205<\266\004\341\277Q\036\002=C\364\354\277\377\316Q\347c\366\326?pzQU3_\215?\'\246\017\212\351\310\251\277\2072\310A\332\024\272?\317\234`f\334z\342\277\3162\354\316\267\007\274?@\250\371^\345\267\340?\0043\307\370\335}\275?j\317\007;\260\342\331?Y\232\317\243\207\227\304?h).E\267\301\350?\311\316v\275=\200\325?(\316\345?\313\035\321?A>\"\306\"\207\354\277\036<\n\346\270u\002@\307\353\243\313&\t\306\277\213\217\222@\022(\361\277\301^\212i\275\377\357\277cO.\241u\017\360\277-\036pv\324\372\353\277\273O\320y\351\023\334?=O\321\302\345\252\330?\324\324(w]\022\271\277:\316.\243\202\232\321?\326\317\275\216\374\316\334?\341\333\363\366\315\320\000@0\020\003Q\352\016\030@G\020\021\323\227E\366\277\235\035(\\\031\025\350\277\244\266\"\321FA\320\277%m\263\333\036\211\317\277 \031\273\315\236\374\001\300\352\034N{\3575\343\277*l\265m\027\267\310\277\312\231\207\211\314\261\300?O\334\205\336B\363g?\320\270\371\326{[\337\277\303\257\326V\317\255\362\277H]\215D\262\304\345\277}\317\033\266\210\312\360\277\265\266\240\034\335R\372?\242\034*\356\021C\341\277\355\017\244\342\002\326\363\277\356\251\321\255\026i\354?li\000\036\345\340\350?e\365\007\227n0\361?\377\215\201\240.\005\320?\362\032\274o\236\273\310?a7\241c\314^\325\277\220i\222\344S\332\351?\322\310\252e7\255\344?\327\317\210\246\035:\363\277B\233\204\256\327\354\312?\\8\237\321\3230\334\277P\026&\216U\225\367?#\020\177\014)L\365\277\330\345-&KS\364?\361\210jSx\207\345?\366\233^\217\001\314\317?\271h&=\273\001\344?\2532Z\010I\016\273?g\025q\203\005@\361?\273\311_p\207\002\353?\256VeW\030$\372?\252\325\3027\265\023\363?\352\034N{\3575\343\277\005\352\354\351\373\004\355?KF\037?\\n\367?\214\350\357\304\360\311\342?\307(\235\307D_\344?\035wO\257\034\213\323\277]\316\300i\361\223\322?rl\331\372\364\251\312\277\034\3517\337\253\257\346?\253\234\316\237m\201\341\277\256\233:\002$\331\315?\202\017\356\216\266\351\360\277\344Nd\322P;\326?\035>\220\377\263\215\353\277\231\234\205<\266\004\341\277J`,$\376\010\243?\364\260\257\356\374\365\372\277\334\235\2477\233\311\351\277\026\316\234\334\023\241\320?h\035M2\363\236\346\277KH\007\375\327\005\341?!a\230\313\226\341\250?CG\227\'?~\220\2778\353[\261k#\302\277\307\323\341\245\236\303\261\277d\337b\027A\027\360\277\305\020\020\212\233\256\371\277\342\365\006Nr\231\364?\027\3525M\263\201\355?\222}\032\276&\307\347\277\224\235\203\252\275\326\347\277\256\310\030\237\310\263\343?\255\365+$L#\363?/6\375\263}\253\366?\343\t\304\017$\033\354?\003\300\212\250\034j\364\2777(U\255\211y\340?y\'\217\352\362\246\377?\355\316\010\204\254y\326?k\2167\364z\361\322?\2776\020\346Y\374\320\277\273\016\0003\264\"\325?x\227Zt\'\237\377?\030ll\n`:\310\277#\020\177\014)L\365\277\332\266\375\372l\267\321\277/k\267\377\017\345\301\277W\370\314\370\245\021\334\277 \324N\22633\264\2774\212\214N]L\356?\0332\022\356\215(\267?G\216\245-\014\370\321?\374\034\227\336\246\262\343\2778P\3170\355|\337?\302)\2335L1\353?\013\270\326\222\232\377\331\277\242]\3724G4\350\277\025P=j~\203\336?\347\370\024\023a\367\337\277\321\375\231\231\250{\351\277\373]g%\334\243\352\277\2742\243k\000\213\273?\200\275\3147w\242\220?O\265\354Z\211\224\360?O7X\000\025\342\324\277\177(y:gl\342?i~\206e\277\237\355\277S\007\2247\355\235\376?9I\223\003N\"\236\277\376\005)\331P\\\365?\332\266\375\372l\267\321\277\276\270\260s\304\336\336\277)\251\256i5\r\347?\322N\033o\231\276\325?\355\017\244\342\002\326\363\277\025\017m#I\222\327?\227O>\263z\032\333?\277w\340,\217\355\327\2772-\301\362\007\373\t@\035wO\257\034\213\323\277\371\267\215/\343\202\331\277Y\020Z6O\302\366\277\376}\320\021s\263\352\277\020=I.\365>\344\277c\325p\221\030\370\274\277Q\246Z\004!\235\367?\377\017\355E\272R\364\277\177\266\305\362\266\334\370?=7\017\235]e\324\277\204\265\307\204\257\n\362?s7\352\306\203\333\325\277>\351\230SZi\037@O7X\000\025\342\324\277\205\311\204Fa\214\351?h\324r#\021&\266\277\272\265\242\256\325\200\363?j\317\007;\260\342\331?\036\320\341\033\332\301\336??\036\271\331\213w\354\277j\317\007;\260\342\331?\234V\034\364`\247\371?c\335zY\305\177\346\277b\032tU\343\325\304?c\351[l\211\242\350?\372v\275\350\255\221\322\277_\235\250\200\227`\346\277/\270hY\t\371\332\277~\034\230\'\243I\340\277\375\353~\365L\177\307\277Ak\000c\307a\302\277q\235\361\343N\335\346\277p\225\0255a~\361?\300\233\203e\333U\316?\217\216\311\272\351\352\323?\302\334\351\333R\035\342\277l]\037\013!\276\346\277\264]C\230\376\260\350\277;\235\026\272(g\345\277\374\034\227\336\246\262\343\277\342k\221\3409\304\306\277\314/{\010+\354\362\277\255\t\351\345\375\244\352?E\350\3137\023\327\340?\252OR.S\002\362\277k\020\243\231\006?\367\277\240\317\342d\326X\333?\032\032P\310\005\343\302?.\355W\215z\307\317\277\254\270g\020\rb\336\277F\212\325\261\024\311\356?|\267\216x\337\031\326\277v\234\363uG\013\340\277Y\327\232\206\346\304\376?\316\026%EY\376\372?\376\266\217\301\333\260\322\277\013\213\252y\274\022\020@Rw_\301!\226\376?\224\0177\362mf\361\277\270\017\311\270\334_\362\277h18\rdI\262?\217\317d\031@G\361\277\313ho\240r~\344?\247\\\374\306?b\341\277\367\035\225L\256\204\352\277z\334\305Nu*\340\277\274\032\341ExE\307?\244\211D4\242f\352?\337\366\317\323\232\326\321\277\221\323\006|xM\260\277?\036\271\331\213w\354\277\3216YI\021y\321\277&8\304\247\255\272\332\277\301^\212i\275\377\357\277\'\246\017\212\351\310\251\277\314\265\353\021\215\375\363?\254\270g\020\rb\336\277\302\334\351\333R\035\342\277\241\317\255|\367\303\361\277\261\267i\242\005\220\327\277\223\033M\355\020\036\315?\331\323*\tV@\262\277\016\035\340A^/\344\277\032O?\374v\261\327?\270\017\311\270\334_\362\277\231\325y\324\375\226\362?\335l\217NA\226\315\277wo\340\360\303\233\360\277^\336x\307\314Q\355\277F\317utA\351\330?\034\355\016*\303J\317\277\024\367\252\375\300L\323\277\2658\014\302h\240\336\277\332\246\351j\023\250\256\277\031\220\017C\254\242\336?\'\300\034o\213c\365\277i\3609\255o/\367\277Y\305\305\202\260\332\360?h\215\236\032\0101\211\277\243\323O\337/\312\260\277\202\017\356\216\266\351\360\277Q\036\002=C\364\354\277Q\036\002=C\364\354\277[(\347s\370r\341?\333\013\355\247\324\251\000@\260\324\226\260\356\030\270\277\026\316\234\334\023\241\320?x\205\205p\361\264\361?9\033\340\374{\256\312?Mf\210+\363}\367?R\254\260\231\023\344\003@HU\261\225\304e\360?s7\352\306\203\333\325\277\314/{\010+\354\362\277B\217\243\233\023\312\330?\232e\256J\311\236\362?x\274\\b\336\032\340\277\270\017\311\270\334_\362\277y\217I\335Z\253\360\277\227\210\375b\343\027\343?\340252o\204\274?\217\0205`u8\370\277\352i\377\324\350I\354?\025\033N6\r\265\311?k\232\030\007?\024\305?\351\232\027\276B}\310?Y\232\317\243\207\227\304?\221\345\t\231m`\362?\025\017m#I\222\327?\207\3250qF\032\362?R\260\036q\212\223\366\277:P\232H\016\350\365\277\014\217\310q\355S\327?\300\205\251\375\316\247\363?4\317,\021\212l\330?\376\266\217\301\333\260\322\277Nhp\351n\025\341?\026\316\234\334\023\241\320?\221\323\006|xM\260\277\211>FS\000z\356\277(3Y\277Lw\276?\352]\036\302$\'\352\277\302\334\351\333R\035\342\277\362Ov\2730\365\363\277q\235\361\343N\335\346\277\252HK\351\222<\232\2778}\255\315\221W\345\277\275\351\310\\\036\022\353?\\\312\360\355\371d\357?\357l\330\261\370\022\316\277!a\230\313\226\341\250?\233wNf \364\326\277\2507\305\360\251Q\327\277V1\357\251\254\314\261?KLu\324N\265\003@\013\276a\020l\333\017@\2267|\215\362\324\326\277Q\347*KV\216\376?O\334\205\336B\363g?+\376\006\212=\353\353\277\2375\265\231\302\305\362?]\033r\303\352\247\313?\005\235;\220\002\361\343\277\324\324(w]\022\271\277\306\034\274\264\200<\342\277\212\233\250;\265\337\314?\252OR.S\002\362\277$\236\313\304x\274\353\277\034b\2269\236\263\257?\345\330\r\313Jg\000\300q\340\251\350\377e\367\277\316O\344\364\301\373\362\277\000]i\267\324\321\343\277\335l\217NA\226\315\277\275\351\310\\\036\022\353?\377\017\355E\272R\364\277ews<\372}\325\277G\020\021\323\227E\366\277\217\317d\031@G\361\277\033\335V\314\347\214\344\277\361\311:\232\255x\354?j\317\007;\260\342\331?^P,\017}\341\366\277cO.\241u\017\360\277\264\034sQ\311\277\341\277d\337b\027A\027\360\277HinWv\347\347?h\035M2\363\236\346\277c\036K\240\372p\355\277O\265\354Z\211\224\360?\253\335\236\346\242r\350\277X\317\276\327\370e\331?\302\334\351\333R\035\342\277\007\000]\201J\211\364\277\345\035L\351\366\007\352\277\355\017\244\342\002\326\363\277\221(\302\235\036\351\342?\261=\332\253g\241\350\277\270\017\311\270\334_\362\277:\326\nRp\371\366?\253\337\206\244\036\n\362\277\272/2\245so\362\277Q\036\002=C\364\354\277\310\266\264\227\265:\321\277\223\005s\205\004p\362?\273\311_p\207\002\353?\332`t>\271\356\246?\2438\303^\261#\336\277\202\017\356\216\266\351\360\277\321\375\231\231\250{\351\277\036\320\341\033\332\301\336?]\316\300i\361\223\322?\357l\330\261\370\022\316\277<l\376\320\3163\311\277f\233\026uF\346\313?\216\374w\236\303\266\340\277Y\020Z6O\302\366\277\300\233\203e\333U\316?\375\353~\365L\177\307\277\352\034N{\3575\343\277\307\323\341\245\236\303\261\277*l\265m\027\267\310\277O7X\000\025\342\324\277r\366Nh-\177\370?C\320>\372i&\366\2778\353[\261k#\302\277\355\017\244\342\002\326\363\277\355\017\244\342\002\326\363\277A\320s\342H\273\337?-\036pv\324\372\353\277\301\217mj8\236\362\277\331\323*\tV@\262\277\206\032\006\034R\317\305?@\250\371^\345\267\340?\357h\001g\341w\345?\302\334\351\333R\035\342\277i5\332o\234O\361?c\325p\221\030\370\274\277\3318\236\210\327\231\337\277h\215\236\032\0101\211\277r\366Nh-\177\370?\343\373\\\343d\340\000@\304v\342\276\207\033\321\277\325=lr\326\232\351\277\353u\253\377\315\327\364?t\2455\251\277\351\244\277F\267\263N\271\243\324\277\301^\212i\275\377\357\277\234V\034\364`\247\371?\020\200\0013\246\307\364\277\'\027\2225\356m\375?y\025\272\346\274\274\361?\306_t\2711\305\362\277v6!A[\236\370?\314/{\010+\354\362\277\3622~\225&\001\275?\377\017\355E\272R\364\277\300N\322\013\342A\325?\016\324\0053|\266\263\277\376\266\217\301\333\260\322\277c\325p\221\030\370\274\277\021\327v\371\010\322\374?Nhp\351n\025\341?D\324\340\\\242,\265\277}\232aj\366\220\305?7(U\255\211y\340?>\016\001|\260\271\321?\364\260\257\356\374\365\372\277Cjl\305}\271\356?P\016J\337g6\322?\247h\335\331\003\205\343?\2546\374j\201\024\372?\017\370\250k\310\036\332\277\220\034\341\212Z\306\340\277\207\234<\331\376\207\340\277KH\007\375\327\005\341?4=\333\364c8\345\277(3Y\277Lw\276?HinWv\347\347?\357\\ T\035U\343\277\341\351Z#\215\013\354?\2267|\215\362\324\326\277\2438\303^\261#\336\277z\334\305Nu*\340\277K\316w\006:\027\322?\030ll\n`:\310\277Q\246Z\004!\235\367?\032O?\374v\261\327?\003\221\217e\035c\373\277:\336\346\000^X\354\277v\234\363uG\013\340\277\301^\212i\275\377\357\277\373]g%\334\243\352\277m\345w\322\376f\361?\244\353\021\005\270\017\305\277qh\002\260\335\016\342?u\335\303\274|\374\346\277\332\246\351j\023\250\256\277\2601\\\232A<\264?\363\234\362,Kt\343\277\355\017\244\342\002\326\363\277-\036pv\324\372\353\277Y\327\232\206\346\304\376?e\375\343E\\\217\346\277\334\235\2477\233\311\351\277\211k$\360\244T\304\277\357l\330\261\370\022\316\277c\325p\221\030\370\274\2773~\253;\231)\354\277\223\325\203cG\235\014@Nx(GJ\323\333\277NpL\230\\t\366\277\334\235\2477\233\311\351\277q\340\251\350\377e\367\277\201\017#w\225~\332?\366\233^\217\001\314\317?\262\3052sEJ\363?\270\231>&\0255\300?\251O\207\0262\227\333?Q\036\002=C\364\354\277\270\017\311\270\334_\362\277\351UB\0237\310\364?\223\316\233\223\027\n\324?\260u\332d\361g\r@\3147W\267\030K\330\277\326\203\000\024\301\206\000@\361\366\0307RS\322\277\320\270\371\326{[\337\277\340252o\204\274?\323\035\003\206?\213\351\277d\337b\027A\027\360\277\021\317\232J\033s\327?\312e\223\0039\033\016@\326\317\275\216\374\316\334?gj\376\213\354\262\357?O7X\000\025\342\324\277\266}\254\204\225\300\350\277h\324r#\021&\266\277\213\217\222@\022(\361\277\223\316\233\223\027\n\324?#\264\313\352\254\270P?\205O\365O\303\235\332?\252HK\351\222<\232\277B\233\204\256\327\354\312?z\324\273\206\310\242\266\27721]\343=\323\260?\3436\242\254\310\365\321\277\324\033}lDs\000@ews<\372}\325\277\256\310\030\237\310\263\343?\0067i[\026\204\374?h\215\236\032\0101\211\277wk\333\214\355\327\303\277/\270hY\t\371\332\277\223\316\233\223\027\n\324?K\017HMo\010\331?\355\017\244\342\002\326\363\277\361Hovp/\234\277\205\206\314A\260\003\371?\370\350\245\030=\266\345?.\277\244\206\250S\234?\332\246\351j\023\250\256\277\364\260\257\356\374\365\372\277\352\034N{\3575\343\277n\274\322$\362\246\004@\024\353\311\352\374)\301\277\246\235\314\ruS\350\277p\225\0255a~\361?\225\237kh9n\361\277\241\232\3630e\212\306?&8\304\247\255\272\332\277\010\220\221\367\025\221\364\277\345)-\374\272*\354?\254>\330\031os\357\277\204/W{M\371\360\277\035\364\357*\323q\002@4=\333\364c8\345\277\311H\006\264\333n\344?v\234\363uG\013\340\277\270\017\311\270\334_\362\277Q\036\002=C\364\354\277\310\275\360\304T\225\222?\0067i[\026\204\374?6\335^Uj\022\n@6]D\341\372G\345\277\276\250\370\025\351 \344?\004\336\013\3277\342\352\277\215v<}@:\371?\315\277\257~\366\363\362\277\230\245\307o.\343\245\277\317\351\021\300\325\216\353?\241\236\312{|%\357\277c\325p\221\030\370\274\277"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_7"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content: "\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277\217W\243\027u\307\000@\255[N\177\202I\370\277g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\255[N\177\202I\370\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\n?\262\302L\220\006@o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\255[N\177\202I\370\277o\031aR\246o\351\277)\340(\331:\375\365?\217W\243\027u\307\000@)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277Q\025\266\352\230\355\001\300\217W\243\027u\307\000@\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277\314\374\304\225p\266\007\300o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\255[N\177\202I\370\277\255[N\177\202I\370\277\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277\314\374\304\225p\266\007\300\n?\262\302L\220\006@\217W\243\027u\307\000@o\031aR\246o\351\277g\"\026\006\027\327\344?\n?\262\302L\220\006@)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277Q\025\266\352\230\355\001\300\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277Q\025\266\352\230\355\001\300o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?\217W\243\027u\307\000@g\"\026\006\027\327\344?\217W\243\027u\307\000@\255[N\177\202I\370\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?\255[N\177\202I\370\277)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277\255[N\177\202I\370\277\255[N\177\202I\370\277\037\334+1=b\262\277\255[N\177\202I\370\277\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\n?\262\302L\220\006@\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277g\"\026\006\027\327\344?\n?\262\302L\220\006@)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?\217W\243\027u\307\000@o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?\255[N\177\202I\370\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\255[N\177\202I\370\277\255[N\177\202I\370\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?\n?\262\302L\220\006@\217W\243\027u\307\000@o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277\n?\262\302L\220\006@\217W\243\027u\307\000@)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\217W\243\027u\307\000@o\031aR\246o\351\277\217W\243\027u\307\000@\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\255[N\177\202I\370\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\255[N\177\202I\370\277)\340(\331:\375\365?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\217W\243\027u\307\000@)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?\037\334+1=b\262\277\217W\243\027u\307\000@g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?\217W\243\027u\307\000@g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?\217W\243\027u\307\000@\217W\243\027u\307\000@)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\n?\262\302L\220\006@g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277\217W\243\027u\307\000@\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277g\"\026\006\027\327\344?)\340(\331:\375\365?)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277Q\025\266\352\230\355\001\300\037\334+1=b\262\277\217W\243\027u\307\000@\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?Q\025\266\352\230\355\001\300o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?\255[N\177\202I\370\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?)\340(\331:\375\365?\217W\243\027u\307\000@\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\n?\262\302L\220\006@\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?\217W\243\027u\307\000@o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?)\340(\331:\375\365?\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277\255[N\177\202I\370\277\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?\255[N\177\202I\370\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?\255[N\177\202I\370\277g\"\026\006\027\327\344?\255[N\177\202I\370\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?\217W\243\027u\307\000@g\"\026\006\027\327\344?)\340(\331:\375\365?\255[N\177\202I\370\277\217W\243\027u\307\000@\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277\217W\243\027u\307\000@g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?\217W\243\027u\307\000@o\031aR\246o\351\277\n?\262\302L\220\006@o\031aR\246o\351\277\255[N\177\202I\370\277\255[N\177\202I\370\277\037\334+1=b\262\277F\344\323@H\177\r\300g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\217W\243\027u\307\000@\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?g\"\026\006\027\327\344?)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?\217W\243\027u\307\000@o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277\255[N\177\202I\370\277\217W\243\027u\307\000@o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277\255[N\177\202I\370\277\217W\243\027u\307\000@o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?)\340(\331:\375\365?\255[N\177\202I\370\277\255[N\177\202I\370\277\255[N\177\202I\370\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\217W\243\027u\307\000@g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?)\340(\331:\375\365?\255[N\177\202I\370\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277Q\025\266\352\230\355\001\300o\031aR\246o\351\277o\031aR\246o\351\277Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\n?\262\302L\220\006@o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277\n?\262\302L\220\006@o\031aR\246o\351\277)\340(\331:\375\365?\255[N\177\202I\370\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277\n?\262\302L\220\006@\037\334+1=b\262\277\n?\262\302L\220\006@g\"\026\006\027\327\344?Q\025\266\352\230\355\001\300o\031aR\246o\351\277g\"\026\006\027\327\344?\255[N\177\202I\370\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277\255[N\177\202I\370\277\255[N\177\202I\370\277g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?\217W\243\027u\307\000@\037\334+1=b\262\277o\031aR\246o\351\277\255[N\177\202I\370\277)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277\217W\243\027u\307\000@g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?Q\025\266\352\230\355\001\300\255[N\177\202I\370\277)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\255[N\177\202I\370\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277)\340(\331:\375\365?\n?\262\302L\220\006@o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?)\340(\331:\375\365?o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\314\374\304\225p\266\007\300\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277)\340(\331:\375\365?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277Q\025\266\352\230\355\001\300\255[N\177\202I\370\277\217W\243\027u\307\000@g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277F\344\323@H\177\r\300g\"\026\006\027\327\344?Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\n?\262\302L\220\006@\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?\255[N\177\202I\370\277\255[N\177\202I\370\277\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?)\340(\331:\375\365?o\031aR\246o\351\277\217W\243\027u\307\000@o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277\n?\262\302L\220\006@)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?\255[N\177\202I\370\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\217W\243\027u\307\000@o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_8"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\001\000\000\000\001\001\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\001\000\000\001\000\000\001\001\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\001\000\000\001\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\000\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_9"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_10"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_11"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_12"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_13"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\001\000\000\000\000\000\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\001\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\001\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\001\000\000\000\000\000\000\001\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\000\000\001\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\001\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\001\001\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\000\001\000\000\000\000\000\000\000\000\000\000\001\000\000\001\000\001\000\000\000\000\000\000\000\000\000\000\001\000\000\001\000\000\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\001\000\001\000\000\000\000\000\000\000\000\001\000\000\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\001\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_14"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_15"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_16"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_17"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_18"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_19"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_20"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_21"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_22"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_23"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content: ".\000*\353\270Sm?Ay\035\'E\225\355?\376\263\350\356\004\330\274\277\364Yf/\217-\277\277\300\367\302\271y\204\364?\351N\251\267q-\357\277\236\247\025\345[\354\342\277\377\257kD\373\207\335\277\351N\251\267q-\357\277C\372\316 >\234\341\277\303\221<l\347\247\334\277\245\002%\200\3357\334\277xk9Gz\327\327\277\250\300\3709\317\302\360?K\324M\016\027w\323\277\376\263\350\356\004\330\274\277\226{\341\340,\270\337\277\003\341\251\316?\255\273\277\010\016k\256z\202\272\277d5\366\362\211\332\354?\342\233F\000?W\306?4s\213\201\215\034\345\277\313>\001\036\277L\347\277\322\227\357]\357\266\321\277K\323\237\346\272?\353?(\300!&!\247\324?X\203:\277y\234\344?\245\002%\200\3357\334\277\214\037>\306e,\323\277\224\241i\227\215|\345?0\006\314\n!/\364\277ri\021H\357V\301\277\263\306\2273\022\267\363?\270\343\343:\312\302\316\277\207\333\3104|\240\364?`\005f\220\241\354\306?\202mh\352>\367\325?\372\202\252d\300\262\336\277\370\2502\033!w\344?\221\300T\343`H\003\300C\372\316 >\234\341\277\263\266\"[\217\355\317\2776M\003\313,X\317\277\007\273\177\251@\364\001@\346x\256\030\334A\304\277\376\263\350\356\004\330\274\277\303\020\254\276>7\325\277|\305\264b\266\342\315\277@8\213\020\316<\370?\353z\326\027g\302\332\277,\306\306\317\265w\332\277P\352Z<\243\225\362?\2134\243|\347\357\374\277 \375V\352\366\202\362?\233\250\242\300g\215\336\277^\307\242\374\327\254\370?kd\371yf\'\347\277\354\365\310\277\264\001\304?\263\014U\034\357\226\260\277\221\300T\343`H\003\300\263\234\254z\276\231\363\277\253\327\222Cg\202\333?\227\366\323\210z\367\310?cs\323.j\021\360?.\332\236\252+\232\370?FO9\022+\027\325?Z\006\r\024\304\204\347\277\313\023h=\017\370\356?T[\212\t\216W\310\277x\225$\000\316\364\347\277\221\300T\343`H\003\300\270\343\343:\312\302\316\277\240T\323\362\371\361\325\277\221\300T\343`H\003\300pp\232\272\2674\007@7\035z\014~\t\341?\306e\026\260+\262\350?\361\244\310t\364~\342?\316\347A\201S\002\313?\370T\\\251y<\344\277\245@\365g2\363\364\277\004\211V\262\216\"\314\277\346x\256\030\334A\304\277o|4W\317\242\377\277\026e\004C,\035\354\2771\363\207\257\360L\331\277\247%\304\013z\354\265?d5\366\362\211\332\354?\233\250\242\300g\215\336\277\250\202(Rz\007\350\277\2215K\364\361J\362?\370T\\\251y<\344\277C\372\316 >\234\341\277\302M\333\322\3026\360?\210\207\345nI\352\371?\337F\334\016R\334\342?\270\343\343:\312\302\316\277\214\312\271,b\272\352\277cs\323.j\021\360?\2717\272\254q\375\336\277\262\233\013\247\355\335\365?1\363\207\257\360L\331\277\264g\261(6A\005@H\'\220\000yq\340\277\021\013\211\'\360\021\346?\014_X\365]\255\356?+I\263\314\026W\262\277\035|\262D\211\367\370?h\017\217\210y\254\303\277\235\010\367\325eW\244\277\2134\243|\347\357\374\277\235\010\367\325eW\244\277\235\010\367\325eW\244\277\264\010\330q\345F\321\277\264\010\330q\345F\321\277z\353<\031\027\247\343\277\334r\002\313\r\322\326\277\341 TX\361\027\335\277\221\300T\343`H\003\300\035,\373\361\020\227\023@\226$<\354\327d\350\277\233\250\242\300g\215\336\277F\247\214.\334\241\324\277\031:\214\256\314^\340\277\007\261\006hzg\350?2r\367\001H\334\321\277\270\343\343:\312\302\316\277\014\212\361\325\r\002\347\277\235\313AL\004B\270?H\'\220\000yq\340\277\325\230\203\3354\367\344\277\331\332\251s\361\217\375?\346M\0258,\355\333\277\240~\276\253M\017\346\277m$\373\3424\017\365\2773\007`\212fo\367?c\364c\334\022\202\367?\023\343\337\025>l\321\277\352\267\005,\353\301\365??X\n\334\346H\t@\021\214\031\325\230\202\355?\315j.~\264\341\322\277<w\365\'\272\024\347\277se\224\235\345\006\322?\340\216\235 =\261j\277\245\002%\200\3357\334\277\225\376\315\335\215\227\267\277\361%Y\"\235\357\351?4s\213\201\215\034\345\277\245\002%\200\3357\334\277\337s\226JS\022\352\277R\2033\033@\375\354\277\363\333\370\031\223\323\001@\216D\376\254S\302\273?|\035\010\177gm\275\277\271\266)\377\310\214\327\277\311\345\031\202\310\201\324?_\207\244e\246\224\346?\364\347\2342\rO\363\277\245\002%\200\3357\334\2772\2334\223?\302\331?\340\216\235 =\261j\277mN\346\233\210,\365?}@\247\n\004\"\327?H\'\220\000yq\340\277\203Z$\217\016\025\373?\225\246z\301\334\014\310\277\313\023h=\017\370\356?3\246N\250\326\n\001@u\240\355\327\216\255\255\277t\323\340\357]\225\376?\360\247\227\367\241\227\331\277\376\263\350\356\004\330\274\277\344\240W*\216\347\350\277\036\247>\321\255\320\366?\221\300T\343`H\003\300Z\006\r\024\304\204\347\277F$\2401{\302\314?\257\005\002K\376\216\342\277p\221\272Y\241\374\345\277\234\317\276\366\r\222\327?\326X\205F\003\337\362\277\"\353\263b\227\\\325\277\377\331V\375N\245\355\277\311#W\240\264\253\221?|\253>\202\345\216\361\277\350\340\\e\371\236\362?SVy\337>\307\345?\217t\250\267R\247\346?G\221yP\376\246\362\277\303:\227w\222T\345\277\274)\"R\003,\242?\250\202(Rz\007\350\277$\217\343\233\334\201\266?\002\003\265\332\226!\342?\271\266)\377\310\214\327\277\n\262\232\347\277\247\333?_\264^\241\247\312\355\277O.\311)S\202\311\277\030\273\034\\u\317\347\277%*\030\3121X\361?x\225$\000\316\364\347\277\026e\004C,\035\354\277\217\3658e\373\027\356?\311\273.\311td\344?\334\036,Yf\227\306\277j_\350O\027\227\304?3nzW>\214\302?U.\320\315\214!\321\277\245\002%\200\3357\334\277\337s\226JS\022\352\277R\2033\033@\375\354\2776M\003\313,X\317\277x\225$\000\316\364\347\277\2714\353)\304\344\347?\270\363X\023M\214\362?#\024\361\363\216B\335?V\253\343\320+B\311?\317c\274\275+V\205?\221\300T\343`H\003\300\245\002%\200\3357\334\277]\260\373\236\264q\343?\033\346\233\224\016-\353?W\260\364\372z\322\353\277\320@)\035J\315\355?\036f\237f\253\374\326?>N\236\356\2537\352\277\0218Cc\361G\355\277>\315\rA\003\307\342\277\202FL\264\230\362\334\277\221\300T\343`H\003\300n;\242@XJ\352\277\245\002%\200\3357\334\277\342\233F\000?W\306?Az\313N\241\314\325\277>N\236\356\2537\352\277\202mh\352>\367\325?\322\227\357]\357\266\321\277\005\331\257y,\r\315?\252\256U\262o\234\323\277\007\336\300\243{\235\357\277\0020o\026\230W\351\277\360\3220\330Q\354\301\277b^M,\230\267\351?\334r\002\313\r\322\326\2778\233;7ya\301?\235\313AL\004B\270?\374&\332\235\005\330\277?\235\010\367\325eW\244\277K\3768\307j\224\343\277\351\315\030\n\311\274\347\277^\235\267C\204\217\370\277\221\315\217SIr\331\277\214\312\271,b\272\352\277S\337\017\315\265\003\216\277\241\273M\242\335\001\233?\344\037\307|\345v\341\277\351N\251\267q-\357\277\202\357\246\277C\237\345\277\373\251\306\232f\267\327?K\262\226\027\277\000\000@\202mh\352>\367\325?xk9Gz\327\327\277@\267\372b%\314\360?\237\022\223\264&b\370?xk9Gz\327\327\277P*L\177I2\332?\233\250\242\300g\215\336\277v\360F\237,\230\276\277^\235\267C\204\217\370\277\034\033\241b\371\222\002@\311\273.\311td\344?=\310\374\026\2646\300?63\215\352[\004\363\277\221\300T\343`H\003\300w\226\322\'*,\300\277O.\311)S\202\311\277q\321\253\234G\231\375?ib\267\322\304\257\353?d6\244\032\346\021\325\277\322\227\357]\357\266\321\277\351N\251\267q-\357\277\325\230\203\3354\367\344\2774s\213\201\215\034\345\277*\330iW\025\236\367?\031\220\203{\305z\357?\327\304\260=*\214\320\277\240T\323\362\371\361\325\277^F\022O/<\361?\250\202(Rz\007\350\277\240~\276\253M\017\346\277\245\002%\200\3357\334\277\200l\324j\371\266\342?n\272\021\223\257\331\342\277\375\201\035\211\264\021\343\277\030\273\034\\u\317\347\277+I\263\314\026W\262\277xk9Gz\327\327\277\332F\325j\030=\353\277\375\201\035\211\264\021\343\277\236||\004\254\227\352?g\014\237\271{\375\357?\243\324\326\304\226\301\341\277&\034\362\354\333\201\263\277\373*WH\017(\337?4s\213\201\215\034\345\277<\312\035r\005\030\317?\003\341\251\316?\255\273\277\332\0056\000\026i\373?\226\243\253>/\364\340\277\274\267\275~\016\315\352\277r{\247{\303\001\364?4s\213\201\215\034\345\277i\214\242\213\030\315\333?\247by\225\333\001\242\277i\215P\263t\004\344\277\227!mi*L\321?\327\360\274Q\317\212\357\277\003\233\354\345b\315\376?\221\300T\343`H\003\300\302M\333\322\3026\360?\366|\005\273+\342\330?H\'\220\000yq\340\277\245\002%\200\3357\334\277\345\212DL\260\354\366?Z\331R\330\302N\340?\341 TX\361\027\335\277\226\367\201\260\326.\341?\2121\341M\305R\360?\245\002%\200\3357\334\277=p\251\372\002\254\260?ZZ\343\205k\277\347?C\372\316 >\234\341\277\0268J\007+\347\344?\353\244\301\320\272\337\352\277\311#W\240\264\253\221?\"\226/\311\223\352\354\277*\031\t\302\027r\347\277\333\205F&>\264\361\277\274\013\224\360\265\007\353?F\321w\347/\277\344\277\245\002%\200\3357\334\277zl\315\306\277\027\353\277n\016\350\004W\024\343?\0167\257\343\253\007\332\277\225\376\315\335\215\227\267\277\305\245\024G]\312\372?\315\227\350\271\265\027\312\277\220\373\035Jx\002\200\277\216\241b\363S\335\355\277P*L\177I2\332?\362\260l\215n\372\003@T\354\217\217\271\221\363?\205\231\225J4\214\341?\244?T\224a7\367?@\247\205\212\242\002\315\277\353\371Ej\276Q\323\277\370T\\\251y<\344\277\243\324\326\304\226\301\341\277\345\177A\007\007-\003@\233\250\242\300g\215\336\277\247\003\271\377\"x\357\277\351\240^\316\307\206\340?\023\020\232Q?\242\310\277V\253\343\320+B\311?v\022R\253\203\014\345?\235\010\367\325eW\244\277\371\024^\022H$\362\277Y\210K\351\310,\307\277X\004\313l\"\r\354?4s\213\201\215\034\345\277\372.\324\362\030x\316\277^\235\267C\204\217\370\277\221\367z\014\235\217\351\277N)\270\377\003\362\346?\214I)\177\271I\343\277\270\343\343:\312\302\316\277\234\274z\233\335\257\374?\245@\365g2\363\364\277\321U\257\037\034\'\364?\205:\325\264{\002\257?\311f\252/q\362\333?\337\362\005\235\252\241\342\277LQa\021\266\227\313?\202\305\273\006\360\201\325\277\207\034h\237~t\344\277\353\245o\370\026\027\303\277;\316\232\034\017h\336\277\006ptQ\003\017\363?\303\020\254\276>7\325\277d\2674\310\216\202\334\277\221\300T\343`H\003\300\243H\\\363\334\001\250?\220\213O\025v\342\373?4s\213\201\215\034\345\2774H\362\240\335\307\354?1\363\207\257\360L\331\277\202\305\273\006\360\201\325\277\210\232)\312y\314\324?%\354G\342\334\234\350\277\250\202(Rz\007\350\277\026\243\324*\201\330\364?U.\320\315\214!\321\277.\351e[R,\264?=\310\374\026\2646\300?\245\002%\200\3357\334\277m<Ph\264\201\302\277\336\206\332\245\203\364\364?\237\221\002\007~\361\360?\200l\324j\371\266\342?\216 \322E\253l\346\277\036\275D[\000P\356?\003\360p\177f?\367\277\351\214y\237\306\350\367?<vG\000^\335\336?h\026\"w\244\227\002@\245\002%\200\3357\334\277\020\333\336\034\361,\273?\037\322\312]\322\251\364?\235\010\367\325eW\244\2771\363\207\257\360L\331\277\0072\227\025#\330\357?\200l\324j\371\266\342?\177\231\216\246\372\354\351\277\020\333\336\034\361,\273?\370T\\\251y<\344\277\2620\201\203\227\354\345?^\235\267C\204\217\370\277Z\204\316>\277\334\327?\303\020\254\276>7\325\277\245\002%\200\3357\334\277\376\263\350\356\004\330\274\277\250\326\376\303!B\350?\340\216\235 =\261j\277\277`\376\341\242\202\316?\322\301\332\026C\324\341\277\332F\325j\030=\353\277@\271\033\276v\255\377?\243(\2556>\374\341?\257\232w\'\250\235\362\277p\221\272Y\241\374\345\277\313~\362`e\351\376?n\272\021\223\257\331\342\277i\214\242\213\030\315\333?H_E\222\307\256v\277\375\026\223e^ \363\277\214\312\271,b\272\352\277\252Z\177@\310a\303\277\037b\"\274\241\254\267?\220\373\035Jx\002\200\277\315j.~\264\341\322\277+I\263\314\026W\262\277\306\220\257\220\333\006\341\277\020\333\336\034\361,\273?!\3570\r\241\254\264\277\031\272n4\031\230\337?\361\"\212\237\357\326\302?\370)\303\310\311\347\353?j_\350O\027\227\304?\363\'\233\311>g\345\277\376\263\350\356\004\330\274\277&\254IK\253\204\366\277\317\377\226\006\323t\370?\305$\204\231\264Y\363?\007\261\006hzg\350?\003:\333\003\323h\010@\301c\356\260\2401\342\277v\022R\253\203\014\345?\330n~|\312\342\337?\203Z$\217\016\025\373?C\372\316 >\234\341\277\221\300T\343`H\003\300K\324M\016\027w\323\277H\'\220\000yq\340\277\016\266\0366\003\227\322\277m\231\361\363\305\021\004@\230\3335\366*\202\245\277%\354G\342\334\234\350\277\303\221<l\347\247\334\277\353#1#\022o\343\277\245\002%\200\3357\334\277\177\030\376\370Q|\342\277\322\227\357]\357\266\321\277t\271j\017\215A\302?`\035\273\025!_\364?\274)\"R\003,\242?x\351\372qu/\350?\303\221<l\347\247\334\277\371\024^\022H$\362\277\320@)\035J\315\355?\354\342\221\270\017\233\363?ib\267\322\304\257\353?\256\231\326S\327\341\364?\203Z$\217\016\025\373?\364\347\2342\rO\363\2776\241\331<\324\222\337\277\275\020\245\032\005\230\315\277\302#\360\031o\031\360\277\374l\227\206\342\267\374\277q\345\220\313H7\346?\241\210*\231\210 \005@\341 TX\361\027\335\277\031:\214\256\314^\340\277\257\333\026\222\252q\322\277\200\355d\030\242\'\352?ZZ\343\205k\277\347?|\325);9\254\361?/\307ZO\373\267\355\277jw=\325\226\t\362?\353\371Ej\276Q\323\277 \023]tI\002\352?\213\244K\036\030\355\271\277O\277\316\257~\274\364?\212\262q\373m\303\367?\313\277\221\313g\275\356\277>N\236\356\2537\352\277\243\251=\344\346l\351?\341 TX\361\027\335\277\236\033\233\023\242,\251?\237g\027N*\324\360\277\317\377\226\006\323t\370?\363\'\233\311>g\345\277p\022K\007Jm\355\2774s\213\201\215\034\345\277\214I)\177\271I\343\277\257\005\002K\376\216\342\277^\034\'\226\333\036\361\277\"\227\335\360\357!\305\277\2620\201\203\227\354\345?\233\250\242\300g\215\336\277\300\006\212j\240\026\260?6\250\203\373\354\006\002@\353\245o\370\026\027\303\277\030\022\302P\312\"\337\277\245\377U\375/\037\345?\303\020\254\276>7\325\277\245\002%\200\3357\334\277\303\020\254\276>7\325\277\231\356\3313gW\252?q\345\220\313H7\346?\221\300T\343`H\003\300\003\341\251\316?\255\273\277?!\344\262\252\001\343?\364Yf/\217-\277\277y\177\021\"\360\371\365?\003\032\\8\272\\\367?\303\020\254\276>7\325\277\315j.~\264\341\322\277\226$<\354\327d\350\277\235\010\367\325eW\244\277\323L\327\261&V\010@\223q\277\214\216\227\272?\177\372o\227\004X\253\277%\354G\342\334\234\350\277.\351e[R,\264?|G\031\313\214\255\204\277\221\300T\343`H\003\300\036\350\335;\260\244\346\277\013sJx\352\306\361\277h!%\274MW\366?@\215\017\252\321\256\360\277*W\331\251l-\360?\032\245\t~\227\324\365?p\221\272Y\241\374\345\2777\236\n\272&z\350?\250\202(Rz\007\350\277`\005f\220\241\354\306?\375\201\035\211\264\021\343\277\255\204PQ\005\210\356?\245\002%\200\3357\334\277\247\373\262\277T\254\216?\221\300T\343`H\003\300\213\335\375\207\222\234\365?\326X\205F\003\337\362\277\277\213\227\302R\327\326?7J4H\177?\350\277\327EA\353\322\374\327\277\245\253\177\213\210\344\344\277}\227L\377Xu\356?\305$\204\231\264Y\363?A%G\265\235Z\355\277<L\\G\n\300\356?[\345\366\360<\312\001@i\344\365\247\311W\333\277\250\202(Rz\007\350\277\243H\\\363\334\001\250?N)\270\377\003\362\346?\240\000\375\200R\267\305\277\346M\0258,\355\333\277\n1\n:\0277\324?\221\300T\343`H\003\300\221\300T\343`H\003\3009\240La\310\361\343\2779\240La\310\361\343\277\332F\325j\030=\353\277\245@\365g2\363\364\277\202\305\273\006\360\201\325\277\212r\200\270\307&\340\277\223`\327\200\026$\360?\351\240^\316\307\206\340?\332y\242\r\3048\000@\260\203\303u\371\346\322?\240\225\005\'eW\221\277\370)\303\310\311\347\353?\000\327\207z\241\214\326?\333\205F&>\264\361\277\330A\304@\311\254\310?\257\\\247?S\342\331\277\033e\013\347e\274\343?g\223\024L\241X\211\277\250Un\026y\321\340?\263\266\"[\217\355\317\277\250\202(Rz\007\350\277&\254IK\253\204\366\277\232dA\'C\034\362?\270\343\343:\312\302\316\277C\372\316 >\234\341\277\365U\351\204\205\335\337\277\000\254\356\231\3617\316?n\271ckS\242\332?\310=m\236y\014\324\277\221\300T\343`H\003\300\334\036,Yf\227\306\277\310=m\236y\014\324\277\345\212DL\260\354\366?\322\304\251\231\360\354\310\277\017^\313\031R\014\323?H_E\222\307\256v\277nO\207oY\350\362\277\227a\313\342gW\235?\235\010\367\325eW\244\277\222\341g.\277\224\367?\354\241\362M\r\307\323?\031\220\203{\305z\357?\351!\357{p\367\347?\000\327\207z\241\214\326?\337\261f2\250\315\362?\351\315\030\n\311\274\347\277]\260\373\236\264q\343?\245\002%\200\3357\334\277\270\363X\023M\214\362?\340\336\023\032\036\210\377?Y]\262\010\031\330\336\277\032\245\t~\227\324\365?\334\035~1\n`\356\277\374\226\202?6\325\374?-D\210\372\260\317\352?\270\343\343:\312\302\316\277h\017\217\210y\254\303\277\023\343\337\025>l\321\277\340\216\235 =\261j\277|V\272\350\341\034\371?H\'\220\000yq\340\277\263\234\254z\276\231\363\277x\024\224R%\204\340\277\013\036\306\336\346T\371?A\370\214y\234$\346?\010\314\3318X\370\022@9\240La\310\361\343\277\235\010\367\325eW\244\277S\337\017\315\265\003\216\277\026e\004C,\035\354\277\221\300T\343`H\003\300@\215\017\252\321\256\360\277\335\360\303\365\010*\347?eJ|\365[4\363?\2746-\321e\\\343\277#\024\361\363\216B\335?,\306\306\317\265w\332\277\304\215\277\301\335W\315?,\306\306\317\265w\332\277\237XP\235\003B\265\277s\346$K\216w\331?\245\002%\200\3357\334\277\360P\362\002MD\342\277=p\251\372\002\254\260?\330n~|\312\342\337?\372.\324\362\030x\316\277B\216\243)\027\357\363?\221\300T\343`H\003\300\237\223#b\317\322\377?m<Ph\264\201\302\277\226{\341\340,\270\337\277\363\'\233\311>g\345\277%\354G\342\334\234\350\277j_\350O\027\227\304?C\372\316 >\234\341\277\005\004IZ\334a\325?8C\350\032\310\326\261?\207\362|\346*W\324\277\234\274z\233\335\257\374?\257\304b\340\373\272\362?q\345\220\313H7\346?\373k\366\262\021\374\376?se\224\235\345\006\322?\271\266)\377\310\214\327\277@\215\017\252\321\256\360\277|G\031\313\214\255\204\277\016\343\330q\004\315\311\277d\037\360h7[\365?\026$e\330)I\374?MVr;\005(\356\277\226{\341\340,\270\337\277\35397\255d\356\372\277\250\300\3709\317\302\360?\366|\005\273+\342\330?7\237\270\341\202\261\320\277\303=f\372?m\314\277\003\032\\8\272\\\367?\340\216\235 =\261j\277\303\020\254\276>7\325\277\221\300T\343`H\003\300\351N\251\267q-\357\277G\221yP\376\246\362\277\273\312\001\332>\257\365?V\253\343\320+B\311?\214\211\032\302_\346\372?\344\336\'\022\343\242\361?\262\317\237\222\215\201\244?\267\tl\361*\207\344\277/\0331\301\242\362\355?\245@\365g2\363\364\277\026e\004C,\035\354\277%\354G\342\334\234\350\277\222\200VL/0\001@.A\271w\003\267\303?\221\300T\343`H\003\300\335qT\243\261\232\356?\267\336\322\020{2\354?\002\003\265\332\226!\342?C\372\316 >\234\341\277\2717\272\254q\375\336\277\306\220\257\220\333\006\341\277^\034\'\226\333\036\361\277%@\036T\204\327\350?\201\362uB\361\267\314\277\370T\\\251y<\344\2779u\263\200\030\235\353?\204\306O\2065\302\350\277,\306\306\317\265w\332\277C\372\316 >\234\341\2773\026\';\215\001\263?X\004\313l\"\r\354?\026e\004C,\035\354\277^\235\267C\204\217\370\2778\233;7ya\301?\361\017S\230Jp\362?\320\277\230o\241\\\346?%\354G\342\334\234\350\277\247%\304\013z\354\265?\330\303\002\026\316T\350?DN\245\222\345\326\341?\216\241b\363S\335\355\277Y\232\341\034\235\327\371?P*L\177I2\332?\235\010\367\325eW\244\277\243H\\\363\334\001\250? >\366T\371V\342\277\332\031\033/\027\007\344?\353\245o\370\026\027\303\277\2642\303*9d\341\277\235\010\367\325eW\244\277\263\014U\034\357\226\260\277\226y\300\205\333\326\320\277\216 \322E\253l\346\277\355\203\253\2553%\005@\356N\260[\253\314\346?\240}\020\204\361\327\335?\024\r\313\316\221\211\341\277\244?T\224a7\367?\245\002%\200\3357\334\277O.\311)S\202\311\277\023\216[|:\372\350\277\201\330\377a d\360\277/\005+7Ps\366?\332F\325j\030=\353\277\250\202(Rz\007\350\2774s\213\201\215\034\345\277\252Z\177@\310a\303\277_\264^\241\247\312\355\277\250\202(Rz\007\350\277\225\246z\301\334\014\310\277\233\250\242\300g\215\336\277\206\260<\250W\307\366?1\363\207\257\360L\331\277\253\252\330\007fL\304?\233\322\215y\273\252\356\277]?\306\236\264\010\'@&\034\362\354\333\201\263\277H\'\220\000yq\340\277\365S\310)4\374\320\277\350\340\\e\371\236\362?\317\377\226\006\323t\370?\346M\0258,\355\333\277\213\341\000\250y\002\226\277\245\002%\200\3357\334\277\332F\325j\030=\353\277\'\231\005\360z\242\333\277\236fvzY\030\363?g\223\024L\241X\211\277f\270\310G\324\302\357\277\334\036,Yf\227\306\277I{fr \254\340?\303\020\254\276>7\325\277!\177\210kp\257\367\277\370)\303\310\311\347\353?[\330\244\260f\027\310?\210\027=\315\030\355\274?\236\247\025\345[\354\342\277\002\204E\210?\222\351?Z\006\r\024\304\204\347\277\330A\304@\311\254\310?\242\370\002,?\027\267?<\312\035r\005\030\317?\237g\027N*\324\360\277\236||\004\254\227\352?xk9Gz\327\327\277\217\224Wt\361\254\254?\206\0377\",\215\313\277\026e\004C,\035\354\277\255\257\3511\265\334\346\277>\315\rA\003\307\342\277\301c\356\260\2401\342\277\202\305\273\006\360\201\325\277\3049\351O6\035\335?\'\231\005\360z\242\333\2775\307a\3634W\345?@\215\017\252\321\256\360\277C{_\316\346\014\351\277\2023\304u\244\221\022@\271\364\371\346\035H\360\277\237\223#b\317\322\377?\246)A\266\203<\325?\221\300T\343`H\003\300\303\020\254\276>7\325\277p\221\272Y\241\374\345\277\245\002%\200\3357\334\277;M\nof\367\326\277&\254IK\253\204\366\277\231\356\3313gW\252?zl\315\306\277\027\353\277\370T\\\251y<\344\277\240\225\005\'eW\221\277\026e\004C,\035\354\277^\235\267C\204\217\370\277,\361_\260e\314\302\277N)\270\377\003\362\346?}\3017\270\254\222\336?h\017\217\210y\254\303\277W/dM\322a\344\277\273\257\267>@\001\212?\036\347/\024Tm\336?<\365\266R\265l\327?P\001\017\356QL\322\277\377\257kD\373\207\335\277uS\361\025\206\340\364\277\014_X\365]\255\356?\261];\277\230\"\355\277\240\325c\240\242b\335\277\264\211h\037\216\267\330\277\213\244K\036\030\355\271\277^\235\267C\204\217\370\277O.\311)S\202\311\277\010\016k\256z\202\272\277\"lD\020@\315\334\2772\234\342\272\233\371\341\277\232+\217\275\310l\266\277\335\233?\\\005\270\336?\014\212\361\325\r\002\347\277\247\373\262\277T\254\216?\322\301\332\026C\324\341\277\263\234\254z\276\231\363\277%\000-\021\336:\361\277\342\236\025\203\354o\355?\177\231\216\246\372\354\351\277\303=f\372?m\314\277\221\300T\343`H\003\300\221\300T\343`H\003\300\214I)\177\271I\343\277\222\364\253\211\357v\322?\320@)\035J\315\355?zl\315\306\277\027\353\277\231\356\3313gW\252?\337\261f2\250\315\362?\243(\2556>\374\341?^\307\242\374\327\254\370?\353\245o\370\026\027\303\277\373~-\272\266b\317?xk9Gz\327\327\277xT\205\225\313 \370?\0319\336\206p\'\330?\207\033\272w\"=\334?\303\020\254\276>7\325\277@\215\017\252\321\256\360\277\365S\310)4\374\320\277\375\201\035\211\264\021\343\277%\354G\342\334\234\350\277\244\336B\262\321\322\000@\202mh\352>\367\325?\023\241\237\327j\334\363?\017329\242\267\312?*\356o\341g\035\357?\353\244\301\320\272\337\352\277O.\311)S\202\311\2771{\302\033\2621\003@w~}\242\252\271\362\277\375\201\035\211\264\021\343\277\345\212DL\260\354\366?6]x\243\257!\363?\257\\\247?S\342\331\277q\345\220\313H7\346?\\\\%-\r7\343\277\343\263\233\205\276\311\363?/\307ZO\373\267\355\2774s\213\201\215\034\345\277 >\366T\371V\342\277=p\251\372\002\254\260?\026e\004C,\035\354\277\226{\341\340,\270\337\277|\253>\202\345\216\361\277\267\tl\361*\207\344\277\253\252\330\007fL\304?\"lD\020@\315\334\277\n\006qYg\342\313?\353\244\301\320\272\337\352\277\344\336\'\022\343\242\361?\273\257\267>@\001\212?\026e\004C,\035\354\277shc \223\037\351\277d5\366\362\211\332\354?\210\027=\315\030\355\274?5\307a\3634W\345?A\"x2\360A\326?\214I)\177\271I\343\277a\276`9\326\tP\277g\014\237\271{\375\357?`\035\273\025!_\364?\017^\313\031R\014\323?Z\333s3\0240\357?}@\247\n\004\"\327?O\277\316\257~\274\364?\026e\004C,\035\354\277\357\227\213w\005\000x?\177\030\376\370Q|\342\277\037)pR\'\375\373\277\036\350\335;\260\244\346\2776 I\217+\"\330\277\013\256\035=\266W\274?g\213\016\014\323\214\350?\303=f\372?m\314\277\233\250\242\300g\215\336\277\221\312\300\320\233Y\342?9\240La\310\361\343\277\263\266\"[\217\355\317\277\227!mi*L\321?Y\210K\351\310,\307\277\317\377\226\006\323t\370?\230\373\344\262\311\207\353\277\032{\036\305C\267\365\277\"\376\367\275\307>\360\277\245@\365g2\363\364\277\245\201\224\3224\307\324\277V\253\343\320+B\311?u\240\355\327\216\255\255\277\215\234Q\311\004M\313?\373|\014_e\201\300?V\3038V\253\264\366?\026e\004C,\035\354\277\365\376C\2200\212\350\277\267\374`r\310V\243?\245\002%\200\3357\334\277\321\326?\315\304\227\373?\305\372\230\340`<\363\277\303\020\254\276>7\325\277LQa\021\266\227\313?,\306\306\317\265w\332\277m\256mz5^\001\300\221\300T\343`H\003\300\226{\341\340,\270\337\277tGM\375\013e\003@\372\202\252d\300\262\336\277,E6\"\r\007\323\277\335\233?\\\005\270\336?\303=f\372?m\314\277\242\370\002,?\027\267?\257\\\247?S\342\331\277\240\325c\240\242b\335\277\007\261\006hzg\350?\370T\\\251y<\344\277\357\344\306\013&\227\364?\316\223k\017\254\307\332?4s\213\201\215\034\345\277&\277\215\246\333f\341?\017\265p\016\247_\352?\210\232)\312y\314\324?7J4H\177?\350\277\222\364\253\211\357v\322?\007\336\300\243{\235\357\277\221\300T\343`H\003\300z\353<\031\027\247\343\277\377\257kD\373\207\335\277\245\002%\200\3357\334\277\245\002%\200\3357\334\277eJ|\365[4\363?\340\216\235 =\261j\277\t4\331\274\304O\353\277\217\3658e\373\027\356?\226{\341\340,\270\337\277JU\336\273\277\347\332\277\370T\\\251y<\344\277\026e\004C,\035\354\277\264\021\243\213O\234\002@\377\257kD\373\207\335\277d_\341\253\335\367\334?i\215P\263t\004\344\2770vt\254Q,\261\277\356N\260[\253\314\346?\370T\\\251y<\344\277^\034\'\226\333\036\361\277Z\005_\354gM\337?\0072\227\025#\330\357?\371\024^\022H$\362\277h\017\217\210y\254\303\277\240T\323\362\371\361\325\277\031:\214\256\314^\340\277)\274\244{\027W\265?5\2435\214\214\001\260\277\245\002%\200\3357\334\2777Ge\305\321&\321?xk9Gz\327\327\277\017\237j\204T\340\362?\233\250\242\300g\215\336\277s\347\322r\352\256\341\277A\244\266\007\365\351\345\277q\345\220\313H7\346?\272\337f\220\300r\337?\007\261\006hzg\350?\370T\\\251y<\344\277\177\231\216\246\372\354\351\277B\216\243)\027\357\363?\373i\325W\300\032\360?\353\245o\370\026\027\303\277\351N\251\267q-\357\277Yd\\\3071L\001@a\211\346\014H\014\342\277\032&\232+@E\375?m<Ph\264\201\302\277\024`\363\030\335\214\311?n\271ckS\242\332?\354\"\203\373\2657\333?\3372\367\337P>\372?\304\215\277\301\335W\315?\337\261f2\250\315\362?\213L\370\001gb\312\277\334r\002\313\r\322\326\277t\361>`%\300\000@zl\315\306\277\027\353\277\335\233?\\\005\270\336?\327\360\274Q\317\212\357\277\221\300T\343`H\003\300a\nw\272\360|\351\277\277\213\227\302R\327\326?\"\251s$\304\314\367?\302#\360\031o\031\360\277\240\225\005\'eW\221\277\023\241\237\327j\334\363?h\017\217\210y\254\303\277\243H\\\363\334\001\250?H\'\220\000yq\340\277V\253\343\320+B\311?\232\273\346\033\230o\371\277^\034\'\226\333\036\361\277*\356o\341g\035\357?\255\003\300\243\\\027\347?\n1\n:\0277\324?\245\002%\200\3357\334\277\340\216\235 =\261j\277\373~-\272\266b\317?\024`\363\030\335\214\311?.\351e[R,\264?\2134\243|\347\357\374\277\007\261\006hzg\350?\250\202(Rz\007\350\277|G\031\313\214\255\204\277\370)\303\310\311\347\353?\273\257\267>@\001\212?kd\371yf\'\347\277\274\313\242\255\017k\363\277@\215\017\252\321\256\360\277\372\202\252d\300\262\336\277mN\346\233\210,\365?\332\232\253\334\277w\353?\037\322\312]\322\251\364?F\247\214.\334\241\324\277\247\373\262\277T\254\216?\303\020\254\276>7\325\277\024`\363\030\335\214\311?V\3038V\253\264\366?\250\202(Rz\007\350\277\214\037>\306e,\323\277\"\376\367\275\307>\360\277\303:\227w\222T\345\277#\024\361\363\216B\335?w\250h[\376\326\362?$\217\343\233\334\201\266?\245@\365g2\363\364\277\327\361jy+\302\307\277\217\3658e\373\027\356?\221\013`;\236-\362\277\347\000\3340\022\253\003@\271\266)\377\310\214\327\277|,\317/\216\377\370\277\\\\%-\r7\343\277\270\343\343:\312\302\316\277\257\\\247?S\342\331\277\020\312\366\020y\271\360?^\307\242\374\327\254\370?\351\242\177)\031h\357?\363\'\233\311>g\345\277p\221\272Y\241\374\345\277.\351e[R,\264?\217t\250\267R\247\346?\311f\252/q\362\333?\263\014U\034\357\226\260\277\253V\002\226\276\021\324?8\233;7ya\301?i\215P\263t\004\344\277\224\"\372D6\355\354?\313\021G\342\275\026\340?\226{\341\340,\270\337\277\315j.~\264\341\322\277\245\002%\200\3357\334\277\255\257\3511\265\334\346\277\363\250+w\347\327\354\2774\263|\3043\271\374?^F\022O/<\361?\014\212\361\325\r\002\347\277\351N\251\267q-\357\277\210\232)\312y\314\324?{?\023\213\276\341\343?\253\252\330\007fL\304?y\346+\357\307\026\301?\316\022\333a\003W\323?7\237\270\341\202\261\320\277\327\361jy+\302\307\277\221\300T\343`H\003\300\026e\004C,\035\354\277H\'\220\000yq\340\277\327\304\260=*\214\320\277@\247\205\212\242\002\315\277\276d{\214\254\322\335\277\245\201\224\3224\307\324\277%k\26744,\341\277\347\365\301\033{b\334?\221\300T\343`H\003\300\235\010\367\325eW\244\277p\221\272Y\241\374\345\2770vt\254Q,\261\2779:x\264\017\211\023@\240\325c\240\242b\335\277\235\010\367\325eW\244\277\340\216\235 =\261j\277_2 \314\242\"\336?\2717\272\254q\375\336\277\014_X\365]\255\356?\026\344s\225\203\254\344\277\364Yf/\217-\277\277a\211\346\014H\014\342\277"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_24"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content: "\000\000\000\000\000Pc@\000\000\000\000\000Pt@\000\000\000\000\000\300\\@\000\000\000\000\000\340c@\000\000\000\000\000\270s@\000\000\000\000\000\340R@\000\000\000\000\000xs@\000\000\000\000\000@b@\000\000\000\000\000 U@\000\000\000\000\000\360`@\000\000\000\000\000 b@\000\000\000\000\000@`@\000\000\000\000\000@T@\000\000\000\000\000\300j@\000\000\000\000\000\240f@\000\000\000\000\000\320`@\000\000\000\000\000\360f@\000\000\000\000\000\340`@\232\231\231\231\231\231]@\000\000\000\000\000@l@\000\000\000\000\000`c@\000\000\000\000\000@j@\000\000\000\000\000\260e@\000\000\000\000\000 `@\000\000\000\000\000\000h@\315\314\314\314\314<c@?5^\272I\244f@\000\000\000\000\000\240a@\000\000\000\000\000\240f@\315\314\314\314\314\034j@\000\000\000\000\000\300_@\000\000\000\000\000\300q@\000\000\000\000\000\020i@\000\000\000\000\000\370`@\000\000\000\000\000\340o@\000\000\000\000\000\200a@\000\000\000\000\000@a@\000\000\000\000\000pk@\000\000\000\000\000`s@\000\000\000\000\000@X@\000\000\000\000\000\240\\@\000\000\000\000\000\240i@\000\000\000\000\000\340]@L7\211A`\251o@\000\000\000\000\000\020`@\000\000\000\000\000`]@\000\000\000\000\000\300\\@\000\000\000\000\000\300_@33333?|@\000\000\000\000\000\000b@\000\000\000\000\000\300]@\000\000\000\000\000\200h@\000\000\000\000\000\300\\@\000\000\000\000\000\360q@\000\000\000\000\000\020b@\000\000\000\000\000@p@\000\000\000\000\000\240j@\000\000\000\000\000\340e@\000\000\000\000\000\300Z@\000\000\000\000\000\340Z@\000\000\000\000\000 Q@\000\000\000\000\000@c@\000\000\000\000\000\320s@\'1\010\254\034\202p@\305 \260rh\267q@\000\000\000\000\000`n@\000\000\000\000\000@[@\000\000\000\000\000\020s@\000\000\000\000\000`W@\000\000\000\000\000\000f@\364\375\324x\351\266]@\000\000\000\000\000\300`@\215\227n\022\203@[@\000\000\000\000\000`W@\307K7\211A\035\203@\000\000\000\000\000\240e@\000\000\000\000\000\300u@\000\000\000\000\000Pu@\000\000\000\000\000\240a@\232\231\231\231\2319_@\000\000\000\000\000\200]@\000\000\000\000\000\300P@\000\000\000\000\000@\\@33333\323V@\000\000\000\000\000\260b@\000\000\000\000\000\240`@\000\000\000\000\000\240p@\000\000\000\000\000\300g@\315\314\314\314\314|c@\037\205\353Q\270zc@\000\000\000\000\0000c@\000\000\000\000\000\000c@\000\000\000\000\000 _@\000\000\000\000\000\320r@\000\000\000\000\000\020a@H\341z\024\256?e@\000\000\000\000\000\240i@\315\314\314\314\314\374f@\315\314\314\314\314\234i@\000\000\000\000\000@p@\000\000\000\000\000pd@\315\314\314\314\314\034l@\000\000\000\000\000\200n@\000\000\000\000\000\200`@\000\000\000\000\000@h@\000\000\000\000\000\220c@\000\000\000\000\000\200c@\000\000\000\000\0000q@\000\000\000\000\000 b@\000\000\000\000\000\340`@\000\000\000\000\000\000N@\000\000\000\000\000\000_@\000\000\000\000\000\300_@\000\000\000\000\0000a@\000\000\000\000\000\260j@\000\000\000\000\000\300]@\232\231\231\231\231\371Z@\000\000\000\000\000\300^@\000\000\000\000\000\000\\@\000\000\000\000\000\300q@\000\000\000\000\000\240`@\000\000\000\000\000\240b@\000\000\000\000\000 e@\000\000\000\000\000\340i@\000\000\000\000\000\340e@\000\000\000\000\000 a@\000\000\000\000\000\200m@\000\000\000\000\000\340S@\000\000\000\000\000\000b@\315\314\314\314\314\\d@\315\314\314\314\314<g@fffff\036w@\315\314\314\314\314\274h@\000\000\000\000\000\000Z@+\207\026\331\316\247A@\000\000\000\000\000\030u@b\020X9\264\364v@\000\000\000\000\000H`@\000\000\000\000\000\300l@\000\000\000\000\000\230\207@\000\000\000\000\0000y@\000\000\000\000\000\200`@\000\000\000\000\000@f@\000\000\000\000\000\020a@\000\000\000\000\000 b@\000\000\000\000\000\300^@\000\000\000\000\000@o@33333cg@\315\314\314\314\314\274`@\000\000\000\000\000\300P@\000\000\000\000\0000a@\000\000\000\000\000`c@\207\026\331\316\367\023i@\232\231\231\231\231Ic@\000\000\000\000\000\300V@\000\000\000\000\000\000a@L7\211A`=[@\000\000\000\000\000\200a@\000\000\000\000\000\200U@\315\314\314\314\314l`@\315\314\314\314\314|f@\000\000\000\000\000\000b@\254\034Zd;Qr@\000\000\000\000\000\020b@\000\000\000\000\000\240]@\000\000\000\000\000\240a@\000\000\000\000\000\340m@\000\000\000\000\000@q@\317\367S\343\245d\201@\315\314\314\314\314\214n@\000\000\000\000\000\200v@\315\314\314\314\314\314Y@\000\000\000\000\000\200Y@\000\000\000\000\000\340b@\000\000\000\000\000\320q@\347\373\251\361\322\315`@\000\000\000\000\000@\\@\000\000\000\000\000pg@\000\000\000\000\000`_@\000\000\000\000\0000f@\315\314\314\314\314|f@\311v\276\237\032\377K@\000\000\000\000\000\220`@\000\000\000\000\000\340`@\000\000\000\000\000\340o@\000\000\000\000\000\200a@\000\000\000\000\000\360p@\321\"\333\371~\322n@\000\000\000\000\000Pi@\000\000\000\000\000\300R@\000\000\000\000\000\240^@\037\205\353Q\270\036[@\000\000\000\000\000\000d@\000\000\000\000\000`e@\000\000\000\000\000\200h@\000\000\000\000\000 l@\000\000\000\000\000\240h@\000\000\000\000\000\000D@\000\000\000\000\000\220e@\315\314\314\314\314\\c@\000\000\000\000\000\200q@\000\000\000\000\000\340e@\000\000\000\000\000`b@\000\000\000\000\000\260s@\000\000\000\000\000 g@\000\000\000\000\000\360`@\000\000\000\000\000\360m@\000\000\000\000\000`a@\000\000\000\000\000\200a@\000\000\000\000\000\200[@\000\000\000\000\000 l@\000\000\000\000\000\360a@fffff\036`@\000\000\000\000\000\220e@\000\000\000\000\0000n@\000\000\000\000\000hp@\337O\215\227nFh@\000\000\000\000\000\340a@\000\000\000\000\000@`@\000\000\000\000\000\200_@\000\000\000\000\000\320a@\000\000\000\000\000\300o@\000\000\000\000\0000k@\000\000\000\000\000\240P@\000\000\000\000\000 i@\000\000\000\000\000`c@\232\231\231\231\231\031Q@\000\000\000\000\000 P@\000\000\000\000\000\240e@\213l\347\373\251\261Y@\232\231\231\231\2319U@33333\263d@\000\000\000\000\000\000^@\000\000\000\000\000\340`@\000\000\000\000\000\200k@fffff2c@\315\314\314\314\314lh@\000\000\000\000\000`b@\000\000\000\000\000Pq@\000\000\000\000\000\340a@\232\231\231\231\231yZ@\000\000\000\000\000@n@\000\000\000\000\000Ph@\024\256G\341zl{@\000\000\000\000\000 g@\000\000\000\000\000\340Z@\000\000\000\000\000\240d@\000\000\000\000\000\000f@\315\314\314\314\314<`@\000\000\000\000\000\300\\@\024\256G\341z\004h@\000\000\000\000\000\000d@\000\000\000\000\000 b@\000\000\000\000\000\200U@\000\000\000\000\000\300c@\000\000\000\000\000\340_@\000\000\000\000\000\300\\@\000\000\000\000\000\340]@\315\314\314\314\314\374e@\000\000\000\000\000\000n@\000\000\000\000\000\260x@\000\000\000\000\000\240d@fffff\006`@\000\000\000\000\0000q@\313\241E\266\363}s@\000\000\000\000\000\300j@\000\000\000\000\0000c@\000\000\000\000\000\000b@\000\000\000\000\000\300\\@\000\000\000\000\000\200f@\000\000\000\000\000\020}@\000\000\000\000\000\200f@\000\000\000\000\000\240o@\000\000\000\000\000@U@33333sY@\000\000\000\000\000\220b@\000\000\000\000\0000a@\345\320\"\333\371\340s@\000\000\000\000\000\340a@\000\000\000\000\000\200a@\000\000\000\000\000\020h@\000\000\000\000\000\000W@\000\000\000\000\000\240h@\000\000\000\000\000`[@\000\000\000\000\000\220r@\000\000\000\000\0008g@\000\000\000\000\000\300l@\240\032/\335$^V@\000\000\000\000\000@p@\000\000\000\000\000\240g@\000\000\000\000\000\000[@\000\000\000\000\000 _@\000\000\000\000\000 b@\000\000\000\000\000@f@\000\000\000\000\000@U@\000\000\000\000\000\340e@\000\000\000\000\000\300_@\315\314\314\314\314\274b@\000\000\000\000\000\300e@\000\000\000\000\000`_@\000\000\000\000\000\360e@\000\000\000\000\000 l@\000\000\000\000\000 `@fffff\376c@\000\000\000\000\000\240c@\000\000\000\000\000\240i@\000\000\000\000\000\200a@\000\000\000\000\000\000i@\000\000\000\000\000 k@\000\000\000\000\000@_@\000\000\000\000\000\360c@\000\000\000\000\000\000g@\000\000\000\000\000 X@\000\000\000\000\000\000i@\000\000\000\000\000\240b@\315\314\314\314\314\\f@\315\314\314\314\314\034g@fffff\226d@\000\000\000\000\000\360t@\000\000\000\000\000\340U@=\n\327\243p%m@33333\253b@\000\000\000\000\000\240`@\000\000\000\000\000\200X@\000\000\000\000\000\360i@\000\000\000\000\000\300b@\315\314\314\314\314\334`@\000\000\000\000\000xg@\000\000\000\000\000\260b@33333\003]@\020X9\264\310*c@\000\000\000\000\000\240d@\000\000\000\000\000P`@\232\231\231\231\231\311i@\000\000\000\000\000@b@\000\000\000\000\000\240_@\000\000\000\000\000`a@\000\000\000\000\000@\\@\000\000\000\000\000\300S@\000\000\000\000\000\300f@\000\000\000\000\000\200g@\000\000\000\000\000 `@\000\000\000\000\000\000d@\000\000\000\000\000\300e@\037\205\353Q\270fk@\000\000\000\000\000`s@\000\000\000\000\000`w@\000\000\000\000\000\000Y@\000\000\000\000\000@o@\000\000\000\000\000 b@\000\000\000\000\000Pt@\000\000\000\000\000\300w@\000\000\000\000\0000q@\000\000\000\000\000\200f@33333\253n@\000\000\000\000\000\360b@\000\000\000\000\000\320`@\000\000\000\000\000\200W@\000\000\000\000\000\000k@\000\000\000\000\000\340u@\000\000\000\000\000`h@\000\000\000\000\000\000^@\000\000\000\000\000\220l@\000\000\000\000\000\000o@\000\000\000\000\000\000_@\000\000\000\000\000\340g@\000\000\000\000\000\240f@\000\000\000\000\000@Z@\315\314\314\314\314|a@\315\314\314\314\314\274c@\000\000\000\000\000P`@\315\314\314\314\314\214e@\000\000\000\000\000@`@\000\000\000\000\000@f@\000\000\000\000\0000d@\232\231\231\231\231\371]@\000\000\000\000\000\340m@\000\000\000\000\000\300g@\232\231\231\231\231YU@\000\000\000\000\000\240i@\000\000\000\000\000\300`@\000\000\000\000\000\000e@\000\000\000\000\000 g@\000\000\000\000\000\220f@\000\000\000\000\000\000c@\000\000\000\000\000\340j@\000\000\000\000\000 c@\000\000\000\000\000\200Z@\000\000\000\000\000@u@\000\000\000\000\000\340c@\000\000\000\000\000\000^@\000\000\000\000\000\300\\@\000\000\000\000\000\000`@^\272I\014\002\255s@\000\000\000\000\000``@\031\004V\016-\344{@\000\000\000\000\000\340_@\000\000\000\000\000`c@\000\000\000\000\0000f@\000\000\000\000\000\020`@\000\000\000\000\000\000f@\000\000\000\000\000 y@\000\000\000\000\000@`@\000\000\000\000\000 b@\000\000\000\000\000`b@\000\000\000\000\000\300\\@\000\000\000\000\000\240g@\000\000\000\000\000\340a@\000\000\000\000\000\000n@\000\000\000\000\000\300l@\000\000\000\000\000\300g@\000\000\000\000\000\240j@\000\000\000\000\000\240T@fffff.q@\000\000\000\000\000`c@\000\000\000\000\000pz@\000\000\000\000\000\020`@\000\000\000\000\000\360t@\000\000\000\000\000`p@\000\000\000\000\0000`@\000\000\000\000\000\320k@\000\000\000\000\000\340p@\000\000\000\000\000\360i@\000\000\000\000\000\340e@\000\000\000\000\000\300m@\315\314\314\314\314\374`@\000\000\000\000\000\000l@\000\000\000\000\000@e@\000\000\000\000\000 g@\000\000\000\000\000pp@\033/\335$\0061O@\000\000\000\000\000\300b@\000\000\000\000\000`e@\000\000\000\000\000`a@33333\213_@fffff\276i@\000\000\000\000\000\200[@\000\000\000\000\000P~@\000\000\000\000\000\300e@\000\000\000\000\000 b@fffff\346j@\000\000\000\000\000\000t@\000\000\000\000\000\200j@\000\000\000\000\000\020e@\000\000\000\000\000\240g@\000\000\000\000\000\200a@\000\000\000\000\000pg@\315\314\314\314\314\334o@\000\000\000\000\000\340`@\000\000\000\000\000\340b@\000\000\000\000\000 \\@\000\000\000\000\000\000g@\000\000\000\000\000\240h@\000\000\000\000\0000d@\000\000\000\000\000@U@\000\000\000\000\000`i@\000\000\000\000\000Pt@\000\000\000\000\000\220s@\000\000\000\000\000\240m@\000\000\000\000\000\220f@\000\000\000\000\000 a@fffff\226V@\315\314\314\314\314\334b@\000\000\000\000\000\300j@\000\000\000\000\000`^@\000\000\000\000\000H\207@\000\000\000\000\000\300g@\000\000\000\000\000\240f@\000\000\000\000\000\000N@\000\000\000\000\000\340m@\000\000\000\000\000\240]@\000\000\000\000\000`[@\000\000\000\000\000\200[@\000\000\000\000\000`Z@\315\314\314\314\314\374h@fffff\376p@\000\000\000\000\000p`@\000\000\000\000\000\340`@\000\000\000\000\000\300]@\000\000\000\000\000\340j@\000\000\000\000\000\260`@\000\000\000\000\000 e@\000\000\000\000\0000a@\000\000\000\000\000`b@\000\000\000\000\000\000m@\000\000\000\000\000\200c@\000\000\000\000\000@e@\000\000\000\000\000\240T@\000\000\000\000\000`c@R\270\036\205\353\215z@\000\000\000\000\000\220m@\000\000\000\000\000@k@\000\000\000\000\000\240j@\000\000\000\000\000\210s@\000\000\000\000\000`g@\000\000\000\000\000\240f@\000\000\000\000\000 m@\000\000\000\000\000\300W@\000\000\000\000\000\000J@\000\000\000\000\000\240f@\010\254\034Zd]\177@\000\000\000\000\000\000V@\000\000\000\000\000\000\\@\000\000\000\000\000\200a@\000\000\000\000\000\340d@\000\000\000\000\000(b@\000\000\000\000\000@j@\000\000\000\000\000\260c@\315\314\314\314\314\234j@\000\000\000\000\000`]@\000\000\000\000\0000g@\000\000\000\000\000@U@\000\000\000\000\000 b@\000\000\000\000\000\360o@\000\000\000\000\000\000_@\315\314\314\314\314\334`@\000\000\000\000\000\320l@\000\000\000\000\000\200[@\217\302\365(\\\'m@\000\000\000\000\000\240c@33333\323a@\000\000\000\000\000@c@\341z\024\256Guf@\000\000\000\000\000\300V@\315\314\314\314\314\274h@\000\000\000\000\000\240i@\000\000\000\000\000 d@\315\314\314\314\314\274b@\000\000\000\000\000\340i@\000\000\000\000\000\340a@\000\000\000\000\000\220q@\000\000\000\000\000Hw@\000\000\000\000\000`m@\000\000\000\000\000\320j@\000\000\000\000\000@p@fffff\266b@\000\000\000\000\000``@\000\000\000\000\000\000b@\000\000\000\000\000\340j@\000\000\000\000\000\000f@\000\000\000\000\000\000b@\000\000\000\000\000`c@\000\000\000\000\000 r@\000\000\000\000\000\300l@\000\000\000\000\000 r@fffff\216t@\000\000\000\000\000\300a@\000\000\000\000\000\360l@\000\000\000\000\000@d@\000\000\000\000\000\240`@\000\000\000\000\000$x@\000\000\000\000\000\240[@\000\000\000\000\000<u@\000\000\000\000\000\300U@\000\000\000\000\000\320c@\000\000\000\000\000@e@\000\000\000\000\000\200K@\252\361\322Mb\\a@\000\000\000\000\000@e@\000\000\000\000\000\000n@\315\314\314\314\314lb@\000\000\000\000\000\020r@\000\000\000\000\000\340`@\000\000\000\000\000\200a@\246\233\304 \260\322t@\000\000\000\000\000Pb@\000\000\000\000\000 v@\000\000\000\000\000\340a@fffff\236p@\000\000\000\000\000@b@\000\000\000\000\000\240d@\000\000\000\000\000\200T@\000\000\000\000\000\250j@\000\000\000\000\000\300S@\000\000\000\000\000\340a@\000\000\000\000\000P`@\315\314\314\314\314\374m@\000\000\000\000\0000f@\024\256G\341zdp@\000\000\000\000\000`l@\000\000\000\000\000\360c@\000\000\000\000\000 k@\000\000\000\000\000\240y@\000\000\000\000\000\200b@\000\000\000\000\000@f@\315\314\314\314\314\\d@\000\000\000\000\000pg@\000\000\000\000\000\000d@\000\000\000\000\000\200j@\000\000\000\000\000`a@\000\000\000\000\000\000[@\000\000\000\000\000\000U@\000\000\000\000\000\200e@\232\231\231\231\2319Z@\307K7\211A\240\\@\000\000\000\000\000\200Z@\315\314\314\314\314|f@\000\000\000\000\000\200Y@\000\000\000\000\000\300g@\000\000\000\000\000@u@\000\000\000\000\000\200f@\000\000\000\000\000\300i@\000\000\000\000\000p`@\000\000\000\000\000\300b@\000\000\000\000\000@g@\232\231\231\231\2319]@\315\314\314\314\314\274r@\000\000\000\000\000\200g@\000\000\000\000\000\340a@\000\000\000\000\000Pa@\000\000\000\000\000@p@\000\000\000\000\000\300]@\000\000\000\000\000\360d@\000\000\000\000\000`U@\000\000\000\000\0000j@\315\314\314\314\314\334i@\000\000\000\000\000\000\\@\000\000\000\000\000 h@\000\000\000\000\000\260h@\000\000\000\000\000`a@\000\000\000\000\000\360]@\000\000\000\000\000\320h@\000\000\000\000\000\340`@\000\000\000\000\000\360k@\000\000\000\000\0000s@\000\000\000\000\000\200`@\000\000\000\000\000\000e@\000\000\000\000\000\360q@\000\000\000\000\000\240h@fffff\316`@fffff\266`@\000\000\000\000\000 s@\000\000\000\000\000\200f@33333\023m@\315\314\314\314\314\374e@\000\000\000\000\000@f@\000\000\000\000\000`l@\315\314\314\314\314\244d@\000\000\000\000\000\360k@\000\000\000\000\000\360i@\315\314\314\314\314\004p@\211A`\345\320\226w@\000\000\000\000\000\020l@fffff6o@\000\000\000\000\000\000Y@X9\264\310vR{@\000\000\000\000\000\220f@\000\000\000\000\000@^@\000\000\000\000\000\200c@\000\000\000\000\000\200f@\000\000\000\000\000\300Z@\000\000\000\000\000\230w@\000\000\000\000\000 g@\000\000\000\000\000\340e@\000\000\000\000\000`h@fffff\376s@\000\000\000\000\000\300g@\000\000\000\000\000\030g@\000\000\000\000\000`[@\000\000\000\000\000 `@\000\000\000\000\000\200b@\315\314\314\314\314\334c@fffff\246C@\000\000\000\000\000\340b@H\341z\024\256Wf@\000\000\000\000\000\000_@\000\000\000\000\000\300l@\000\000\000\000\000 b@\000\000\000\000\000`_@\000\000\000\000\000\300c@\000\000\000\000\000pd@\000\000\000\000\000 `@\000\000\000\000\000Ph@\000\000\000\000\000\300_@\000\000\000\000\000\220l@\000\000\000\000\000\200q@\000\000\000\000\000@m@\000\000\000\000\000\340e@\000\000\000\000\000 h@\000\000\000\000\000\000^@P\215\227n\022\263x@\315\314\314\314\314\034a@\000\000\000\000\000\000b@\000\000\000\000\000\360e@\000\000\000\000\000\200[@\315\314\314\314\314\374o@\000\000\000\000\000\200[@\000\000\000\000\000\240l@\232\231\231\231\2319_@\000\000\000\000\000\200d@\000\000\000\000\000\020p@\000\000\000\000\000\340m@\000\000\000\000\000\000i@\000\000\000\000\000`e@\000\000\000\000\000\320q@\000\000\000\000\0000h@\276\237\032/\335\004b@\000\000\000\000\000@o@\000\000\000\000\000\000o@\000\000\000\000\000\340r@\000\000\000\000\000`t@\000\000\000\000\000\340_@\000\000\000\000\000\200f@\000\000\000\000\000`V@\000\000\000\000\000\300g@\000\000\000\000\000\240g@\000\000\000\000\000\000h@\000\000\000\000\000\260W@\000\000\000\000\000\000t@\000\000\000\000\000\000`@\000\000\000\000\000\340`@\004V\016-\262\275]@\000\000\000\000\000@T@\000\000\000\000\000\000V@\000\000\000\000\000Pt@fffff~a@\000\000\000\000\000`b@\000\000\000\000\000\240i@\000\000\000\000\000\300_@\000\000\000\000\000\300e@\000\000\000\000\000\340g@\000\000\000\000\000`V@\000\000\000\000\000@\\@\000\000\000\000\000pf@fffff\036s@\000\000\000\000\000`c@\000\000\000\000\000@W@\000\000\000\000\000\030p@\000\000\000\000\000Pq@\000\000\000\000\000\200t@\000\000\000\000\000\240d@\000\000\000\000\0000`@\000\000\000\000\000\230i@\000\000\000\000\000\340g@\000\000\000\000\000\260d@\000\000\000\000\000\240e@\000\000\000\000\000\340]@\000\000\000\000\000\340_@\000\000\000\000\000\360c@\315\314\314\314\314<c@\315\314\314\314\314<`@\000\000\000\000\000\000c@\000\000\000\000\000 g@\000\000\000\000\000\300_@\000\000\000\000\000\020e@q=\n\327\243\334p@\000\000\000\000\000\240n@\000\000\000\000\000\000p@\000\000\000\000\000\340`@\000\000\000\000\000\300U@!\260rh\221\371m@\354Q\270\036\205\017f@\000\000\000\000\000\000]@5^\272I\014.w@\000\000\000\000\000\000f@\000\000\000\000\000\000c@\315\314\314\314\314\274b@\000\000\000\000\000\000e@\000\000\000\000\000@p@\000\000\000\000\000\300j@\000\000\000\000\0000a@\000\000\000\000\0000e@\000\000\000\000\000\240]@\315\314\314\314\314\354b@\315\314\314\314\314\274e@\000\000\000\000\000\300p@\000\000\000\000\000Pi@\000\000\000\000\000 g@\315\314\314\314\314\334j@\000\000\000\000\000\340s@\000\000\000\000\000@X@\000\000\000\000\000@`@\232\231\231\231\2319Z@\000\000\000\000\000\300^@\000\000\000\000\000\000t@\000\000\000\000\000\300_@\000\000\000\000\000 S@\000\000\000\000\000\240`@\000\000\000\000\000\200]@\000\000\000\000\000\000^@\341z\024\256Gqf@\000\000\000\000\000\300l@\000\000\000\000\000\200a@\000\000\000\000\000\240z@\000\000\000\000\000@]@\000\000\000\000\000`m@\000\000\000\000\000\000[@\000\000\000\000\000\000d@\000\000\000\000\000\000b@)\\\217\302\365vp@\000\000\000\000\000\340`@\000\000\000\000\000hp@\000\000\000\000\000@_@fffffVl@\000\000\000\000\000\340`@\000\000\000\000\000\300g@\000\000\000\000\000\200^@\000\000\000\000\000pg@\000\000\000\000\000\000q@\000\000\000\000\000\220e@\000\000\000\000\000`_@\000\000\000\000\000\340^@\343\245\233\304 <h@\000\000\000\000\000\300U@33333\003g@\315\314\314\314\314\334f@\000\000\000\000\000 U@\000\000\000\000\000\000i@\000\000\000\000\000\340f@\000\000\000\000\0000h@\000\000\000\000\000``@\000\000\000\000\000\300`@\000\000\000\000\000\260d@\000\000\000\000\000@_@\000\000\000\000\000\200S@33333sf@\000\000\000\000\000@`@\000\000\000\000\000\200o@\000\000\000\000\000\360l@\000\000\000\000\000\000T@\000\000\000\000\000@_@\000\000\000\000\000pk@\000\000\000\000\000@f@\000\000\000\000\000\300d@\000\000\000\000\000\000f@\232\231\231\231\231+q@\315\314\314\314\314\374d@\000\000\000\000\000\000d@\000\000\000\000\000\000a@\000\000\000\000\000X\201@\000\000\000\000\000\000`@\000\000\000\000\000\210\203@\000\000\000\000\000 r@\000\000\000\000\000\200T@\000\000\000\000\000@_@\000\000\000\000\000Pg@\000\000\000\000\000\300[@\004V\016-\262\225o@\000\000\000\000\000\200[@\000\000\000\000\000\240a@\000\000\000\000\000\000]@\315\314\314\314\314\374d@\000\000\000\000\000\200m@fffff\346Y@\315\314\314\314\314|d@\000\000\000\000\000@\\@\303\365(\\\217Ro@\000\000\000\000\000\200k@\000\000\000\000\000\200_@\000\000\000\000\000pa@\000\000\000\000\000\200q@q=\n\327\243\374c@\232\231\231\231\231\tj@\000\000\000\000\000\000_@\000\000\000\000\000`b@\000\000\000\000\000@]@\000\000\000\000\000\260c@\000\000\000\000\000@T@\000\000\000\000\000\020j@\000\000\000\000\000\200c@\000\000\000\000\000 g@\000\000\000\000\000\360d@\000\000\000\000\000\220`@\315\314\314\314\314<e@\000\000\000\000\000\220h@\000\000\000\000\000@W@\000\000\000\000\000 f@\000\000\000\000\000\360d@\000\000\000\000\000\300e@\000\000\000\000\000\340m@\000\000\000\000\000\200[@\000\000\000\000\000 U@\000\000\000\000\000@n@\000\000\000\000\000\340e@\000\000\000\000\000\300e@\000\000\000\000\000 `@\232\231\231\231\231y[@\000\000\000\000\000\200V@33333\003i@\022\203\300\312\241\367r@\315\314\314\314\314\274b@\000\000\000\000\000`a@\000\000\000\000\000\200l@\000\000\000\000\000`m@\000\000\000\000\000 l@X9\264\310v7\202@\000\000\000\000\000\200n@\000\000\000\000\000\240c@\000\000\000\000\000\200[@\000\000\000\000\000@t@\000\000\000\000\000\360p@\000\000\000\000\000\000d@\000\000\000\000\000\000^@33333\363B@\000\000\000\000\000\240m@\000\000\000\000\000\300g@33333sA@\000\000\000\000\000\260s@\000\000\000\000\000Pi@\000\000\000\000\000\340j@\000\000\000\000\000\000c@\000\000\000\000\000\360i@\000\000\000\000\000\300c@\000\000\000\000\000@`@\000\000\000\000\000\200n@\000\000\000\000\000\300S@\000\000\000\000\000\200K@\000\000\000\000\000\200l@D\213l\347\373Yt@\000\000\000\000\000\340g@\000\000\000\000\000`d@\000\000\000\000\000`j@\000\000\000\000\000\210x@\000\000\000\000\000\340a@\000\000\000\000\000\000V@\000\000\000\000\000\240`@\315\314\314\314\314\034b@\000\000\000\000\000\340V@\000\000\000\000\000 a@\000\000\000\000\000 X@\000\000\000\000\000\240b@\315\314\314\314\314\334e@\000\000\000\000\000\020k@\000\000\000\000\000\320k@\000\000\000\000\0008d@\000\000\000\000\000\200k@\000\000\000\000\000\330b@\000\000\000\000\000\000`@\315\314\314\314\314|f@\000\000\000\000\000\340r@\000\000\000\000\000\260}@\000\000\000\000\000@e@\000\000\000\000\000\360t@\000\000\000\000\000\300\\@\000\000\000\000\000@[@\232\231\231\231\231\311s@\000\000\000\000\000\340p@\000\000\000\000\000\300a@\230n\022\203\300\256q@\000\000\000\000\000\200d@\000\000\000\000\000@o@\232\231\231\231\231\271^@\000\000\000\000\000@c@\000\000\000\000\000`c@\000\000\000\000\000\000N@\000\000\000\000\000\000T@\000\000\000\000\000\000Y@\000\000\000\000\000\220`@\000\000\000\000\000\340c@\000\000\000\000\000 _@\000\000\000\000\000p`@\000\000\000\000\000\200f@\000\000\000\000\000\000S@\000\000\000\000\000\000[@\000\000\000\000\000\240c@\000\000\000\000\000 l@\000\000\000\000\000\200g@\000\000\000\000\000@R@\000\000\000\000\000\300V@\372~j\274t\267e@\000\000\000\000\000\240W@\000\000\000\000\000@j@\000\000\000\000\000 `@\000\000\000\000\000\200b@\000\000\000\000\000`j@\000\000\000\000\000\340c@\315\314\314\314\314\274h@\000\000\000\000\000\200]@\000\000\000\000\000\200T@\000\000\000\000\000@e@\000\000\000\000\000\020a@\000\000\000\000\000\360s@\000\000\000\000\000@Y@\000\000\000\000\000`b@\000\000\000\000\000 r@\000\000\000\000\000\340]@\000\000\000\000\000\000]@\232\231\231\231\2319W@\000\000\000\000\000@Z@T\343\245\233\304\364y@\000\000\000\000\000\340j@\000\000\000\000\000\260a@\000\000\000\000\000\200`@\000\000\000\000\000 [@\000\000\000\000\000 b@\000\000\000\000\000`d@\000\000\000\000\000\200a@\000\000\000\000\000\200[@\000\000\000\000\000\220`@\331\316\367S\343wr@\315\314\314\314\314\374h@\000\000\000\000\0000`@\000\000\000\000\000\000l@\000\000\000\000\000\200x@\000\000\000\000\000`f@\000\000\000\000\000\000g@\000\000\000\000\000\020f@\000\000\000\000\000\200X@\000\000\000\000\000 e@\000\000\000\000\000\000Y@\000\000\000\000\000\220b@\000\000\000\000\000\340_@\000\000\000\000\000 ^@\000\000\000\000\000\200[@\000\000\000\000\000\300a@\000\000\000\000\000\200N@\000\000\000\000\000\300k@\232\231\231\231\231\331Z@\000\000\000\000\000 h@\000\000\000\000\000\260h@\000\000\000\000\000@\\@\000\000\000\000\000\020x@\000\000\000\000\000\220b@\000\000\000\000\000pb@fffff\346f@\000\000\000\000\0008p@\000\000\000\000\000\340m@\000\000\000\000\000\240a@\000\000\000\000\000\200a@\315\314\314\314\314<b@\000\000\000\000\000\240k@\000\000\000\000\000\000\\@fffff\346^@\000\000\000\000\000\000n@\000\000\000\000\000@]@\305 \260rh\223q@\000\000\000\000\0008q@\000\000\000\000\000@`@\000\000\000\000\000\220u@\000\000\000\000\000\300^@fffffff@\000\000\000\000\000\240a@\000\000\000\000\000\000b@\000\000\000\000\000\300_@fffffVh@\000\000\000\000\000\340j@\000\000\000\000\000\000t@\000\000\000\000\000\200a@\000\000\000\000\000@_@\000\000\000\000\000\200k@fffff\236l@\000\000\000\000\000\260d@\000\000\000\000\000\000T@\262\235\357\247\306-y@\000\000\000\000\000`l@\020X9\264\310\032k@\000\000\000\000\000\340Z@\000\000\000\000\000\000Y@\000\000\000\000\000@h@\000\000\000\000\000\300b@\000\000\000\000\000\300l@\000\000\000\000\000\240e@=\n\327\243p\361q@\315\314\314\314\314\\i@\232\231\231\231\231\371S@\000\000\000\000\000\200{@\000\000\000\000\000\300Z@\000\000\000\000\000\360a@\315\314\314\314\314|e@\000\000\000\000\000\000Y@\315\314\314\314\314|f@\315\314\314\314\314\274`@\000\000\000\000\000\000n@\000\000\000\000\000@V@\000\000\000\000\000\020a@\000\000\000\000\000`m@\000\000\000\000\000@a@\000\000\000\000\000\304a@\000\000\000\000\000pg@\315\314\314\314\314\274f@\000\000\000\000\000\200a@\000\000\000\000\000 b@\000\000\000\000\000\340e@\000\000\000\000\000@m@\232\231\231\231\231y[@\315\314\314\314\314<`@\315\314\314\314\314la@\000\000\000\000\000 r@fffff\006d@\000\000\000\000\000`a@\000\000\000\000\000\200`@\000\000\000\000\000\300d@H\341z\024\256\177d@\000\000\000\000\0000b@\000\000\000\000\000\000i@\000\000\000\000\000@d@\000\000\000\000\000 ^@\000\000\000\000\000\000V@\232\231\231\231\231\371S@\000\000\000\000\000 l@\315\314\314\314\314\034o@\313\241E\266\363\365m@\000\000\000\000\000\300g@\000\000\000\000\000\000e@\000\000\000\000\000\210`@\000\000\000\000\000\240\\@\000\000\000\000\000@o@)\\\217\302\365\034a@\000\000\000\000\000\320w@\000\000\000\000\000@`@\000\000\000\000\000\240g@\000\000\000\000\000@_@\000\000\000\000\000\220e@\000\000\000\000\000\000m@\232\231\231\231\231Ya@\000\000\000\000\000\000Y@\000\000\000\000\000@`@\000\000\000\000\000pr@\000\000\000\000\000\200d@\000\000\000\000\000pw@\000\000\000\000\000\300\\@\000\000\000\000\000`a@\000\000\000\000\000 f@\000\000\000\000\000`a@\000\000\000\000\000\300k@\000\000\000\000\000\340d@\000\000\000\000\000\340s@\000\000\000\000\000\200j@\000\000\000\000\000\240e@\000\000\000\000\000\340`@\000\000\000\000\000 n@\341z\024\256GUi@?5^\272Iju@\000\000\000\000\000`a@\000\000\000\000\000\240k@\000\000\000\000\000Ps@\000\000\000\000\000\200f@\000\000\000\000\000\240g@fffffff@\000\000\000\000\000 f@\000\000\000\000\000 i@\000\000\000\000\000\320[@\315\314\314\314\314lf@\000\000\000\000\000\200V@\000\000\000\000\0000n@\000\000\000\000\0000p@\000\000\000\000\000\000`@\000\000\000\000\000\200U@\000\000\000\000\000@_@\000\000\000\000\000\000q@\000\000\000\000\000\300c@\000\000\000\000\000\000d@\000\000\000\000\000\360i@\037\205\353Q\270\376`@fffff.a@\000\000\000\000\000\200V@\000\000\000\000\000\300U@\000\000\000\000\000\000f@\315\314\314\314\314Lf@\000\000\000\000\000\370a@\000\000\000\000\000\260s@\000\000\000\000\000\000b@\000\000\000\000\000`g@\000\000\000\000\000\300a@\000\000\000\000\000 T@\000\000\000\000\000\000c@\000\000\000\000\000 f@\000\000\000\000\000\260p@\000\000\000\000\000\340z@\000\000\000\000\000\300g@\000\000\000\000\000\340a@\000\000\000\000\0000c@\000\000\000\000\000\220p@\000\000\000\000\000\340`@\315\314\314\314\314\034j@\000\000\000\000\000\330p@\000\000\000\000\000\240b@\000\000\000\000\000\340V@"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "TensorSliceDataset/tensors/component_0:output:0"
      input: "TensorSliceDataset/tensors/component_1:output:0"
      input: "TensorSliceDataset/tensors/component_2:output:0"
      input: "TensorSliceDataset/tensors/component_3:output:0"
      input: "TensorSliceDataset/tensors/component_4:output:0"
      input: "TensorSliceDataset/tensors/component_5:output:0"
      input: "TensorSliceDataset/tensors/component_6:output:0"
      input: "TensorSliceDataset/tensors/component_7:output:0"
      input: "TensorSliceDataset/tensors/component_8:output:0"
      input: "TensorSliceDataset/tensors/component_9:output:0"
      input: "TensorSliceDataset/tensors/component_10:output:0"
      input: "TensorSliceDataset/tensors/component_11:output:0"
      input: "TensorSliceDataset/tensors/component_12:output:0"
      input: "TensorSliceDataset/tensors/component_13:output:0"
      input: "TensorSliceDataset/tensors/component_14:output:0"
      input: "TensorSliceDataset/tensors/component_15:output:0"
      input: "TensorSliceDataset/tensors/component_16:output:0"
      input: "TensorSliceDataset/tensors/component_17:output:0"
      input: "TensorSliceDataset/tensors/component_18:output:0"
      input: "TensorSliceDataset/tensors/component_19:output:0"
      input: "TensorSliceDataset/tensors/component_20:output:0"
      input: "TensorSliceDataset/tensors/component_21:output:0"
      input: "TensorSliceDataset/tensors/component_22:output:0"
      input: "TensorSliceDataset/tensors/component_23:output:0"
      input: "TensorSliceDataset/tensors/component_24:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "BatchDatasetV2/batch_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 15
          }
        }
      }
    }
    node_def {
      name: "BatchDatasetV2/drop_remainder"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
    }
    node_def {
      name: "BatchDatasetV2"
      op: "BatchDatasetV2"
      input: "TensorSliceDataset:handle:0"
      input: "BatchDatasetV2/batch_size:output:0"
      input: "BatchDatasetV2/drop_remainder:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset/count"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset"
      op: "RepeatDataset"
      input: "BatchDatasetV2:handle:0"
      input: "RepeatDataset/count:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/buffer_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 10000
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset"
      op: "ShuffleDataset"
      input: "RepeatDataset:handle:0"
      input: "ShuffleDataset/buffer_size:output:0"
      input: "ShuffleDataset/seed:output:0"
      input: "ShuffleDataset/seed2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "reshuffle_each_iteration"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptimizeDataset"
      op: "OptimizeDataset"
      input: "ShuffleDataset:handle:0"
      input: "optimizations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
    }
    node_def {
      name: "ModelDataset"
      op: "ModelDataset"
      input: "OptimizeDataset:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
    }
    ret {
      key: "modeldataset"
      value: "ModelDataset:handle:0"
    }
  }
}
versions {
  producer: 27
  min_consumer: 12
}
