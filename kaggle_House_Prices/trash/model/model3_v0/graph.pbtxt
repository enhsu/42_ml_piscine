node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tensors/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content: "\360-Y\022\326\246\317\2771\230\320M\034S\355?\005\372\224L\301\270\326\277\247h\240\016\365\333\332\277b\226v\331\216\325\363?~N\237\347v\325\366\277@\307]\332\261q\257\277h\006\2511\353E\352\277~N\237\347v\325\366\277\217\244\357\334\310\316\350\277^\036\271xs`\350\277H\325\331\264\246\242\350\277\205\274\377#Q\351\346\277\303!\247\005\271+\360?\020\340\262\351\266A\342\277\214+Inl+\332\277\373\230L^\353\220\353\277\361\2324\316r\312\261\277q\356\361\315\343z\331\277\312\227\353\250\265\203\353?Fa\\\203\251\270\373?\270\272L\314B\034\360\277\trR\255\334-\362\277\270\2735\332\203J\343\277))\340\346\201`\347?\344\350\361\347=\010\273?-\244\377\215\337\020\337?\252\341F}Q\177\351\277\032\310\242\242.\'\344\277\277\255\202\267<\221\340?\270\2735\332\203J\343\277\031\312t\276\260\203\332\277}\323\315y\027\206\364?\202A\207\231r\351\341\277}\323\315y\027\206\364?\273 \206\215ai\260\277\273 \206\215ai\260\277\203C\000\322s\366\352\277\277\255\202\267<\221\340?.\230\202\024\036\362\347\277KPR?\205\242\355\277\'3\344\'Br\305?\311\020\235\301\224\025\342\277\004\3019/\321\002\003@\022]\375\217\027\236\335\277^\313\223\201\021\032\251?\ts;\273\035\\\345\277\230\212f]?\247\341\277\330r\303\023)}\370?H\325\331\264\246\242\350\277\022]\375\217\027\236\335\277\371\233UF\312\214\361?\366\243\353s\356o\367\277\225[\032\246t\341\014@\340[\365\275b\340\352\277\302)\344O\\\277\370?\031\312t\276\260\203\332\277\310\203\356\320\267N\267\277\272\251\377s\205\203\275\277F\\\332b\311\257\354\277\227\022\3675\"\223\373\277j\020\373\253\251\270\315?\376\351FVJ+\247\277\005\006\022\306\202\327\355?(*\311\364\302\216\372?\205\376ut\300\202\005@~\315bK\366N\362\277\264N\014\345\350\305\353?xY\227\340\372\003\340\277h\204\203\207)\221\362\277\303!\247\005\271+\360?\023c\004\266R\247\301?9\371q\037s\312\345\277\264B\217k\'\247\324\277\343\227\247\374/\363\t@\244\367\322\341U\236\326?\330q\332\005\350N\345?\010\177\2704\337z\334?\n%\003#\243\007\233\277\242qm\010v^\360\277\346\317\300(^+\375\277\367\232\320@o\214\314\277\022]\375\217\027\236\335\277\240\371V\304\331\231\347\277\030N\272B\020\006\365\277\313\215\347g\365q\335\277\005u\277\235\241W\306\2773\021\320\237\371E\351?\340[\365\275b\340\352\277:\370\210\0212\234\362\277l\375)\366\2054\361?\242qm\010v^\360\277KPR?\205\242\355\277\201F\t\272R\362\360?\233\213\235\244~6\372?\2145\364\313\253\355\332?\202A\207\231r\351\341\277\203\301\332\'\262A\363\277\352\310\272%\372&\355?\307G\354\236;\301\222\277\260S@\314\312m\365?\347\310l\354\373\305\347\277\2442\'\372U\351\006@\014\356\263E\374[\352\277\314\020\353\372\222v\347?\'\260\340\224\244m\353?\223\230\300\234\005\021\327\277O\310\017\240\240\027\371?\205\276\321?\323E\335\277\264B\217k\'\247\324\277\201\312\000\200\226\003\357\277\264B\217k\'\247\324\277\264B\217k\'\247\324\277\316\004\025\236P\010\343\277\316\004\025\236P\010\343\277\364+\325/R\253\356\277\016g\263\227\331N\346\277\217\244\357\334\310\316\350\277\031\324\037\034\360E\333?\301\250\247\263\3338\364?HS\264\n\345\355\360\277\340[\365\275b\340\352\277{\324\017k\331\003\345\277\035\274sbki\322\277\t\370\020j=\275\345?[\243@\356\224`\343\277H\327\253\320(\377\336\277t\345r\222~i\360\277\317\372\020]\220\366\304\277\026\326\243\376sA\354\277\323\367\243l\313\314\360\277H\226\023i\225\265\002@c\0221U/S\351\277/\021\202f\373\344\343\277[+\321\306wL\375\277\247\354\214\257\323\016\370?\214\2575\017K^\367?q\354\037\262a\036\343\277;\370/.\261L\365?\246\260\201\215\205\254\013@\317\213c\205qv\354?\323\370\214z\014\373\343\277\034E\355H\217\203\337\277\377\017!\261\305\327\343?IN2\352\004\345\321\277\261N\276\253\352d\346\277;tC\215\322\031\330\277\205A\325\322pJ\347?v\337\256\200\334\342\360\277\252\341F}Q\177\351\277\311\277\360\0024\334\253?\354\273\373\272v\212\365\277\225[\032\246t\341\014@\177C\013|\366\344\302\277\367\232\320@o\214\314\277>\355\351\373.\275\346\277\206?\003\267\356\355\320?l}}\204\305\214\342?\371\235\'bL\351\367\277\310o\230\0259\312\245\277\311\241\357\351u\225\311?IN2\352\004\345\321\277\256Y\004\336l\364\364?\310\036\354V\330\220\357?\026\326\243\376sA\354\277\321\005L\345\217\227\373?\252\343\030\231\323\333\337\277\264N\014\345\350\305\353?\212q\261\264\373\356\001@\335\350UuAF\300?\341\225.\304.\346\000@.\230\202\024\036\362\347\277\214+Inl+\332\277\016f\312\211\230 \363\277%\357&\243\304\342\004@j\362\371\222\353q\273\277\310\231\026\250\270/\357\277\241\013\333c\326\301\262?\227\023\340Cc\301\356\277\245k\251\366\323\327\360\277u\352\233\317\335\"\322?\232\0058\313\236\366\323\277;rqqP\275\341\277mx\373c\345\203\363\277;\357m\336\262\270\307\277j\177\250\203\3108\346\277\346\315\356\014\334\316\366?1\230\320M\034S\355?\365\'1\370M\362\341?LOi1Dt\372\277\353:\277\036\366\003\361\277-\025\177\201\200\355\315\277c\024\003q\261\257\337\277\237l\250\323\374\322\274\277\311\034\032;V4\331?\240\355\331J\030{\300\277\370\256&\374\355\020\316?\357\2657\251\324\003\366\277tijX\302z\336\277\276\261&\357@J\355\277 :\234\361\247\025\360?h\204\203\207)\221\362\277\030N\272B\020\006\365\277\014s\211\364\033\275\352?Y6\276\025y\214\336?H\327\253\320(\377\336\2773d\365\226[\214\250\277O\265\242\362b\301\272\277\'=\217\205\2014\266?\314\213\025Ls\025\347\2774xKR\332\020\272\277\373\033P\361\210\225\325?\320\016g\030\017{\306?\302\242<\205\272\001\362\277\304\241\372\223\370\203\341?\'(P\274\301\201\361?\247\353\243\241\222\340\344?\310o\230\0259\312\245\277\277\255\202\267<\221\340?\256\337\302\232\315\203\330?\205\274\377#Q\351\346\277\302\257\242\014\275N\334?\200\315\thu\377\364?\321~\244\032\356\331\364\277~\324]\244\327d\352?I\335\262\366c\010\303?\314\212,>2\347\363\277L\307\330Xa\210\340\277\201\312\000\200\226\003\357\277\333g}\341\246\355\351\277\214)wR\352\316\343\277\236\3761\310:\362\363\277\252\341F}Q\177\351\277\005\211\025Y \334\307?v\340\227\216\035\021\344\277\314\212,>2\347\363\277k\207\201\305\205\236\300?\334\342NO\006=\334\277\311\277\360\0024\334\253?\004\177\303\336ai\344\277\307\226\264av\364\362\277\026\\b\273\324\320\377?\343O\306}\237\"\331\277\370\242\251\202,\362\346?@f\351M\014\260\342\277\276\261&\357@J\355\277))\340\346\201`\347?@\307]\332\261q\257\277.\021\333I|4\321\277\206\276x\\R\366\357\277PAh\325\376Y\362\277;\373\352Wt\327\356\277\022]\375\217\027\236\335\277\210\265R\004n4\364\277\014j\364\265d\243a\277c\217-\302\221N\317\277\005\201<\027cv\355\277~N\237\347v\325\366\277 \276\223\267\353&\356\277\014\366\214\207\271\301\304?B\245}\225*\206\001@k\207\201\305\205\236\300?\205\274\377#Q\351\346\277\nr\371\311[\336\364?4\213\270\377\027g\370?\205\274\377#Q\351\346\277Y6\276\025y\214\336?\340[\365\275b\340\352\277`\231\212\346\322\257\332\277\214(\216D\251\240\360\277\360q\226Yb\276\003@Y6\276\025y\214\336?\023O\256\372\323\"\300\277}\325\237\225\231\342\372\277Bp;\310\312\"\306?4\007\314^94\333\277\006\370\3020?\\\340\277U=\304\030\335\220\376?\366)\2520O\377\352?\177\310\340*\026F\323\277\270\2735\332\203J\343\277~N\237\347v\325\366\277FYx\034\207t\360\277\234\007X \037\264\357\277\247\354\214\257\323\016\370?,\244Xq``\354?\235~\3369\373\231\342\277BR:\257\014\334\263\277V\275\027\247\034\351\357?:\370\210\0212\234\362\277\034\301\365\202Kr\361\277\252\341F}Q\177\351\277\376\226\310{g\225\332?%\262\013\224\247\031\357\277\017i,\320\332[\357\277\001\010\226\250\006\323\336\277\223\230\300\234\005\021\327\277\205\274\377#Q\351\346\277D\340x\312\251\201\364\277\017i,\320\332[\357\277j\004~2\350\231\346?\243\371\244\375\327\372\354?e\2130\247\014F\345\277\376\007Ho\010r\311\277\322\375\016\233\354\003\363?\206\316\203\303M\021\262?\261q$\340\177,\207?\376\214\035\036(\323\331\277bW\211\256\357\257\007@\215+\360\212\353\333\354\277\314\212,>2\347\363\277\306\234\037\220\227+\365?\206\276x\\R\366\357\277\240\005\324=\233\270\336?\'\244c\033\343N\324\277-\026]j\\=\360\277\377%I\210\306\270\273?\227\221\272\231\241\014\367\277\\+x\343\366\374\377?\264B\217k\'\247\324\277wg\346u>\177\355?x\352\351\010\334\203\307?\317\177\346\013\260W\325\277\252\341F}Q\177\351\277qr\336n\302\255\366?b\226v\331\216\325\363?~O\210\365\267\003\352\277g\020\255r\253W\330?a\036\007\262q\301\355?\252\341F}Q\177\351\277Bp;\310\312\"\306?\207\272\324$N=\343?KPR?\205\242\355\277H\341V.h\301\337?\264G\021\214\007\260\363\277\314\004n\201\321W\320\277\032H\3660n\177\365\277\254Y]\301\355C\362\277\000\214\333,fU\371\277?r\277\252N\036\347?^\234\223\316\261\253\360\277\252\341F}Q\177\351\277\020\340\262\351\266A\342\277g\t\262\031\312A\360?\030O\243PQ4\350\277\223\230\300\234\005\021\327\277Cg \225K?\373?L\307\330Xa\210\340\277\331sS>\351[\356?g\0040\371\3518\341\277\227\230\265\362\202\"\357?\223\\\203v\304\227\003@\256Y\004\336l\364\364?\223\242k\372D\323\327?\377\020\n\277\006\006\367?\256\323E!\014e\341\277\010u\r\327\237\270\333\277\242qm\010v^\360\277\222\037hg\247\316\355\277\230P\373R\200\212\004@\237l\250\323\374\322\274\277\305\035\265\017\231\001\367\277\265L:\311fi\325?\217\246\301\370J+\337\277\310o\230\0259\312\245\277\2766\374\235`\253\355?\235\212[\263\274\270\331?\314\212,>2\347\363\277j\004~2\350\231\346?.\035X\303=S\350?v\337\256\200\334\342\360\277\337Y|\205a\323\341\277\332\352\331W\305A\341?mx\373c\345\203\363\277\273B+\336#i\337?\371\037M\014\016\236\357\277^\363?\370\016#\234?\333\355;\236\007}\375?\346\317\300(^+\375\2771\020@u9g\363?O\277MP\242\203\313\277\005~\201\355\237\353\363?;\373\352Wt\327\356\2773<I ^\203\225\277OBQ\343?\210\345\277\314\004n\201\321W\320\277\311\034\032;V4\331?\022\330\'\341\367<\315\277\237}\234H9\034\362?\214\246s\277L\312\311\277\311\020\235\301\224\025\342\277\020\347\255B\230W\372?\256\323E!\014e\341\277\300\260\344\375~\314\374?\361\206\336\022\364E\240\277\340\340\312l\202A\353?\013\354:\r\373N\341\277{\324\017k\331\003\345\277\377%I\210\306\270\273?\014\356\263E\374[\352\277:\370\210\0212\234\362\277qr\336n\302\255\366? 7\354\354Ii\327\277\255PB\216n`\307\277\023O\256\372\323\"\300\277\252\341F}Q\177\351\277\005\372\224L\301\270\326\2776\004\270Q\365Y\364?i\003\356\007(\273\360?\376\226\310{g\225\332?\347A\305!Z\010\321\277\373\035\"\r\013\362\353?\233\004\366\331\334x\363\277\216\251q\375\250\327\367?\220\'\363of\323\322?\n\262\317\002<2\004@\252\341F}Q\177\351\277]\217\221O\225\214\264\277\251e\214\001\261\001\364?\264B\217k\'\247\324\277\347\310l\354\373\305\347\277\\*\217\325\265\316\354?\376\226\310{g\225\332?nsyC\005{\324\277\ts;\273\035\\\345\277\270\2735\332\203J\343\277\223\033\304/\243\025\341?\214(\216D\251\240\360\277\232\224\270\327\375\031\305?\ts;\273\035\\\345\277\252\341F}Q\177\351\277\035\274sbki\322\277\272;0\205BS\367?IN2\352\004\345\321\277\332\210j\335:\250\201?w\342\020\307\036\036\355\277D\340x\312\251\201\364\277\344\217j\262\214_\001@*\243\310F\240\201\366?\272\263\252\321\304E\316\277\275\256\304\250\376\016\361\277iC\304@\010\017\000@F\\\332b\311\257\354\277x\336l\217\032e\340?\220\035H\022\'\021\322\277\364\244-e\260\355\327\277\210\265R\004n4\364\277>\357\273\027\261\031\335\277]\231<\255\324N\305\277\326\354]:I=\322\277\323\370\214z\014\373\343\277\014\330\213n\373z\262\277C\346\343\370\312\270\366?\014\3426\314:=\303\277\255\325\027=\216\301\327\277\3613`8\021\260\323?\361\2324\316r\312\261\277\340\340\312l\202A\353?\222\t@\220\246\355\265\277.\021\333I|4\321\277\214+Inl+\332\277\023ZBfT\023\364\277\330r\303\023)}\370?,\034\310\230}t\362?E\3376\331\347\003\344?\242\271\'\250x\366\n@\256\334\332_\303~j?\2766\374\235`\253\355?\177\322\213\210U\010\324?\321\005L\345\217\227\373?KPR?\205\242\355\277\264B\217k\'\247\324\277`\227\270\312PS\344\277\026\326\243\376sA\354\277\365\242[I.\221\341\277\025\227\335\262bT\006@\373\021\245\223I\323\324\277\307\226\264av\364\362\277\304\034%\345\330\"\341\277\344\336F\212\376E\312?\252\341F}Q\177\351\277\027T%q1=\367?\326\354]:I=\322\277j\362\371\222\353q\273\277\033\307`\261l\251\363?-\025\177\201\200\355\315\277[(\026\235\264\301\343?\224\230g\271\204\301\351\277\2130\313\216L4\371\277~\324]\244\327d\352?\033\307`\261l\251\363?\375\226!_\350\344\347?\223\034\255=\344C\364?\321\005L\345\217\227\373?\223\023\353\355\345\257\306\277\314\213\025Ls\025\347\277\365\242[I.\221\341\277\366\243\353s\356o\367\277h\204\203\207)\221\362\277\2114\275\204l^\362?\245/E\361\004&\007@~O\210\365\267\003\352\277r\356\230\352b+\354\277n}$\241D=\325?\nr\371\311[\336\364?\207\272\324$N=\343?6D\216\212\325\255\003@\256\323E!\014e\341\277\260\322\0030J\347\360?\275\257\255\266?=\344\277O\307&\222_\351\345?*\037\334\245\301N\331\277\2755ls\240\314\367?\325x\207%\313\003\370?V,\305~;i\310\277\270\272L\314B\034\360\277\326\370\332\263\n\\\351?~O\210\365\267\003\352\277\334]y\240\346\333\313\277OD#\377\301\344\333\277\330r\303\023)}\370?\275\256\304\250\376\016\361\277\245\354\345\222T^\365\277\343\326mHA\340\357\2773d\365\226[\214\250\277]\231<\255\324N\305\277r\356\230\352b+\354\277\346\312>\010~\"\336\277\223\033\304/\243\025\341?\340[\365\275b\340\352\277j\362\371\222\353q\273\277\247\250DC\342\030\003@\367\037\246\357\216\355\334\277\030\324x\377p\225\350?\202\306\\H\222J\342?\344\336F\212\376E\312?j\177\250\203\3108\346\277\ts;\273\035\\\345\277\337\337:B\302b\365?\344\322\311\020=\'\343?\001\307\375@s\211\002@d\213\211\212\215\225\322\277\335\354\371\254E\377\334?\247h\240\016\365\333\332\277%\257Pj\344\216\365?H\332[\325\206\253\367?\ts;\273\035\\\345\277\323\370\214z\014\373\343\277~\315bK\366N\362\277\264B\217k\'\247\324\277Z\355\363\210\247\215\n@\231\200b\034\177\225\303\277\361)\265\332\321\355\322\277\227\023\340Cc\301\356\2773<I ^\203\225\277Qh+>\2734\242?\350\003\217\000\t\372\000\300\314\213\025Ls\025\347\277\'3\344\'Br\305?V5\207\3169\375\365?\227\022\3675\"\223\373\277\242yQo\230\242\373?\337\337:B\302b\365?\304\034%\345\330\"\341\277j\004~2\350\231\346?Y*A\234\267m\347\277\273 \206\215ai\260\277\017i,\320\332[\357\277\373\035\"\r\013\362\353?\377%I\210\306\270\273?x\336l\217\032e\340?3<I ^\203\225\277\207\273\2752\217k\366?\266B6\210\246W\347\277\274>\207\246\037\260\302?\257S\231\257K\275\362\277\016g\263\227\331N\346\277\300\250\000\227\\\210\361\277N\306\226g\237\n\360?,\034\310\230}t\362?]\267=\306\222\225\267?\\*\217\325\265\316\354?\005\276W&\200?\003@\302\243%\223\373/\345\277\026\326\243\376sA\354\277\222\t@\220\246\355\265\277SB\237\034>\351\352?tijX\302z\336\277c\0221U/S\351\277\2231\354\006\244\366\270?\310\203\356\320\267N\267\277\312\022\026\372\225\"\353\277\207\n\206\365\311\236\226?l\370\247\325\245+\342\277D\340x\312\251\201\364\277\346\317\300(^+\375\277.\035X\303=S\350?\014\366\214\207\271\301\304?1\230\320M\034S\355?\343Yq\333\336\344\331?\027\224\373\251\021\221\006@k\207\201\305\205\236\300?\361)\265\332\321\355\322\277\347MB\233\033\'\350?\241\0010\006\227\377\301?\000\214\333,fU\371\277\274\\\210\277\335\366\244?tg\230<@\036\350\277\335\354\371\254E\377\334?d\213\211\212\215\225\322\277g\020\255r\253W\330?\020\340\262\351\266A\342\277\273 \206\215ai\260\277y[\020\031\374\020\351\277S\272\016D[\375\360?\255PB\216n`\307\277\226\226<\272\201\025\346?\252\341F}Q\177\351\277@\353\276\374+\021\343?6\004\270Q\365Y\364?;rqqP\275\341\277\021b\177\260\367\246\374\277H\327\253\320(\377\336\277\3565\344\032\225\253\344\277\377\020\n\277\006\006\367?\277(\255\010\0350\340\277\375\226!_\350\344\347?\220\035H\022\'\021\322\277\264B\217k\'\247\324\277\344\336F\212\376E\312?\264B\217k\'\247\324\277/\227@#\\t\367?\336g\313\032\245N\357?,\244Xq``\354?\234\203`Z\333\242\361?\241\0010\006\227\377\301?\343Rv\202\375\316\361?q\356\361\315\343z\331\277\272\263\252\321\304E\316\277\252\341F}Q\177\351\277\000\212\t\021\344\370\362?\337\233\362\325\320l\000@\'+\013\346\204\014\353\277\337\337:B\302b\365?\305\227\366R8r\323\277!\275Q\306)\251\375?T\273\236n\033\334\346?\202A\207\231r\351\341\277\205\276\321?\323E\335\277\022]\375\217\027\236\335\277IN2\352\004\345\321\277\226\227%\310\302C\371?C\341a\330\352\257\347\2778\005H|\2658\352?\271\275\256\022\205W\354\277\200NF\004\366\205\371?}\322\344k\326W\341?\225[\032\246t\341\014@\\\242W\340S2\360\277j\362\371\222\353q\273\277\344\322\311\020=\'\343?\030N\272B\020\006\365\277x\234\366>\253\313\001\300\021\341B\024w \370\277O\307&\222_\351\345?\346L\262p[H\362?\234\007X \037\264\357\277\206?\003\267\356\355\320?j\177\250\203\3108\346\277\264\006n`<\332s\277\332e\004\251\245\340\340\277\333\354R\220\306N\352?\256d\230I\355\344\310?\252\341F}Q\177\351\277\274\\\210\277\335\366\244?\376\007Ho\010r\311\277\177\322\213\210U\010\324?\337Y|\205a\323\341\277\355:f;u\264\363?-\244\377\215\337\020\337?>\256#\260\035\320\000@\327{\336F\250`\303?\347\310l\354\373\305\347\277\275\256\304\250\376\016\361\277\307\226\264av\364\362\277v\031`\244\305\311\235\277KPR?\205\242\355\277\263L\223\254\347\270\342?\274H2\004_r\263?4\005\372B\267\327\344\277\333\355;\236\007}\375?@kkn\354\270\361?!\272\357\177\347m\341?\206zW\317\3568\001@\311\241\357\351u\225\311?5\264M\204V\236\256?\227\022\3675\"\223\373\277\035\274sbki\322\277\226\0239\'\344\020\334\277y\341\316\325\\\240\374?\305\244\\\332:\277\375?f\215\251\337\rS\356\277\373\230L^\353\220\353\277\026O\3743\322\203\325\277\345\325+W\177b\377?x\352\351\010\334\203\307?@f\351M\014\260\342\277g\0040\371\3518\341\277E\340\037\347(2\367?Z\243\231\321\025\260\320\277\344\336F\212\376E\312?\303!\247\005\271+\360?~N\237\347v\325\366\277LOi1Dt\372\277\230\020%\032\2406\365?\310o\230\0259\312\245\277\270\30203e`\373?\255\330\307A\354m\360?\250\355\034\332\223\355\355?\275\256\304\250\376\016\361\277\312\227\353\250\265\203\353?\346\317\300(^+\375\277\030N\272B\020\006\365\277d\213\211\212\215\225\322\277\321@\307\334\035\033\002@\343\300Eq@\377\267\277\376\375\234\021\311\257\270\277\302\252 \354\334E\375?t\354m\353_\177\350?\311\034\032;V4\331?\255F\2270/\236\266\277\312\022\026\372\225\"\353\277\200\310\207G\225\366\345\277\016\354\210F\371\257\346?\351\307*\3739H\367?\013\354:\r\373N\341\277\242qm\010v^\360\277\346\315\356\014\334\316\366?X\256\206 \027\360\361?\002\006\304\214\204v\350\277KPR?\205\242\355\277<\367F p\036\342?.\035X\303=S\350?\272\263\252\321\304E\316\277\364+\325/R\253\356\277\255F\2270/\236\266\277\262\314?\036\250`\361?\232\na\010\376\257\365?\307\226\264av\364\362\277\005u\277\235\241W\306\277\242\367+\305\326\355\343?\256\337\302\232\315\203\330?PAh\325\376Y\362\277\370\243\222\220m \372?$3\226\356C\021\320?\3527h\375\030\247\305\277j\374\244\360*4\314\277\255\\\277\0070\177\356\277\367)QM\316\257\335?\255\325\027=\216\301\327\277H\341V.h\301\337?]\255\222hS\323\306?\276*\177$\237\214\326\277\244\367\322\341U\236\326?5\004\0215v\251\361\277/\327\026\\<\310\006@<\367F p\036\342?\241|ZWw\236\321?1\023\373\236\374\361\354\277\377\020\n\277\006\006\367?\252\341F}Q\177\351\277\006\370\3020?\\\340\277\340\336\370P\000\345\324?`\2435D\022r\333?\027T%q1=\367?^\234\223\316\261\253\360\277\311\034\032;V4\331?v\337\256\200\334\342\360\277\367\232\320@o\214\314\277\\#\224|\324\270\364\277:\370\210\0212\234\362\277`\231\212\346\322\257\332\277\340[\365\275b\340\352\277O\310\017\240\240\027\371?\347\310l\354\373\305\347\277\344\336F\212\376E\312?\233\005\337\347\035\247\346\277\225[\032\246t\341\014@H\341V.h\301\337?\026\326\243\376sA\354\277\226\0239\'\344\020\334\277\264\212p\352\267w\005@\330r\303\023)}\370?c\0221U/S\351\277\177\310\340*\026F\323\277\252\341F}Q\177\351\277q\354\037\262a\036\343\277\\{;\224\026\010\243\277\322\375\016\233\354\003\363?\273\307\000\215C\312\317?\224\026B\017\303\014\362\277\361\206\336\022\364E\240\277xe\024Z\274\"\327?\ts;\273\035\\\345\277t\345r\222~i\360\277\347MB\233\033\'\350?\237XR\030~N\253\277d\006\264\333m4\302\277\310\231\026\250\270/\357\277\265G\270\250\206`\366?y[\020\031\374\020\351\2773d\365\226[\214\250\277\273*1\353\240+\301\277\261q$\340\177,\207?X\260X<\231L\370\277j\004~2\350\231\346?\205\274\377#Q\351\346\2774\202\366\257\031\323\312\277}M\017\275\266\366\340\277\030N\272B\020\006\365\277\221\034\006!e\223\361\277g\0040\371\3518\341\277f\215\251\337\rS\356\277OBQ\343?\210\345\277\274\271\261\367\377N\322?\375\021L\260\310\203\347\277\205\310|\235\022\010\336?i\005\300#\252\027\367\277l~f\222\006\273\365?r0\017;\322\304\n@c\220\013\253m\236\361\2775\014\365\233\230\355\374?\274>\207\246\037\260\302?\235~\3369\373\231\342\277\ts;\273\035\\\345\277KM\360\370Bg\361\277\020\340\262\351\266A\342\277EZa*\310\242\343\277\347\307\203\336\272\227\364\277O\277MP\242\203\313\277\240\370m\266\230k\364\277\310\231\026\250\270/\357\277\240r\257\3717\334\320\277\236\3761\310:\362\363\277\331\356}\217\311\372\355\277\177\310\340*\026F\323\277\202\306\\H\222J\342?\005\004@\252\000{\327?\205\276\321?\323E\335\277\235~\3369\373\231\342\277HR\326!\t\236\316\277\274\271\261\367\377N\322?\361\2705\3470\021\304?EZa*\310\242\343\277h\006\2511\353E\352\277{\326\341\206[`\333\277\'\260\340\224\244m\353?\217\243\006\317\207\240\365\277\305\036\236\035\332/\352\277\ts;\273\035\\\345\277E\345\314S\275\266A?\3564\373\014T}\361\277\006\370\3020?\\\340\277]\036\022\\\364\257\325\2778\200r\315\225\327\351\277|\326\210\243\332\020\356\277\3603\271\033\222\377\340?.\033\206\247\273\366\321?\302\242<\205\272\001\362\277\023\324\203\251\363\203\320\2776\007s{\270\344\355\277\227\022\3675\"\223\373\277\223\\\203v\304\227\003@\357\2742\002\266\031\356?\205\273\026\026\020\273\363\277g\0040\371\3518\341\277\264B\217k\'\247\324\277\264B\217k\'\247\324\277\016g\263\227\331N\346\277PT\325\202<\260\260?~\324]\244\327d\352?\223\226\356\200\203\264\340\277O\277MP\242\203\313\277{\331\221\213\271\014\364?;~\356\352\021\334\330?\302)\344O\\\277\370?\255\325\027=\216\301\327\277\022g\250\355V`\336?\205\274\377#Q\351\346\277y`\2229\334\031\370?\265\321\017x\206\312\305?-)\325<\377q\317?\ts;\273\035\\\345\277\021\341B\024w \370\277\2075\377u.\334\342\277\343\326mHA\340\357\277\307\226\264av\364\362\277\240\272\220x\310\254\001@4\n|c\227\340\363?\244q\024%\365\016\363?v\031`\244\305\311\235\277\000\212\t\021\344\370\362?V4\236\300\370\316\342?\006\370\3020?\\\340\277\335\"\363\203\363y\004@\214(\216D\251\240\360\277\017i,\320\332[\357\277\244\362P\301u\225\367?1\020@u9g\363?\363)\\\367P\236\345\277!\272\357\177\347m\341?.\230\202\024\036\362\347\277\230\020%\032\2406\365?\026\326\243\376sA\354\277\235\200\260U}\366\330\277\256\323E!\014e\341\277\376\007Ho\010r\311\277\030N\272B\020\006\365\2778\200r\315\225\327\351\277\234\007X \037\264\357\277\366\244\324\201/\236\352\277\210Z\336\342\304\260\214?8\200r\315\225\327\351\277\307G\354\236;\301\222\277+\235]\030\177J\364\277\255\330\307A\354m\360?\226\035\344\204#\323\334?y\331\352n:\\\361\277|\326\210\243\332\020\356\2773\021\320\237\371E\351?\255\341\224\266O\340\356?\335\354\371\254E\377\334?\376\033\236*\207\366\312?\226\0239\'\344\020\334\277\002\177\034\302\342\270\321\277\243\371\244\375\327\372\354?\301\250\247\263\3338\364?\274H2\004_r\263?8\005H|\2658\352?\327{\336F\250`\303?\332\353\302e\006p\364?\030N\272B\020\006\365\277.\021\333I|4\321\277\364+\325/R\253\356\277\301+\266k\336\033\377\277\252_!\323\217\312\361\277\314\213\025Ls\025\347\277\362\302\340Dp\323\264?\214\256L\001\n0\344?g\0040\371\3518\341\277\340[\365\275b\340\352\277\347\324\351e\275\344\336?\\\242W\340S2\360\277\020\340\262\351\266A\342\277^\313\223\201\021\032\251?`\231\212\346\322\257\332\277\330r\303\023)}\370?\275\256\304\250\376\016\361\277\255[\326\371\356P\373\277=s\001\234\020\234\367\277\346\317\300(^+\375\277\242rV\026\267\214\343\277\310o\230\0259\312\245\277\352\274=\2548\010\326\277\261q$\340\177,\207?\013a\005U\037\225\277\277\221\243\255\353\006Q\370?\030N\272B\020\006\365\277W\261AJ\332z\353\277\343\312\360\316\177\301\310\277\252\341F}Q\177\351\277\034\311\331\351m\266\374?\241y\252R\031\362\370\277\ts;\273\035\\\345\277\261q$\340\177,\207?\004\177\303\336ai\344\277OBQ\343?\210\345\277\264B\217k\'\247\324\277\373\230L^\353\220\353\277\336\037\021{\242\266\004@\203C\000\322s\366\352\277~\314\204b\032\377\317\277IX\335GD\247\322?g\0040\371\3518\341\277\3527h\375\030\247\305\277tg\230<@\036\350\277\240\355\331J\030{\300\277E\3376\331\347\003\344?\215+\360\212\353\333\354\277\223\034\255=\344C\364?\247\367 \033T\377\313?v\337\256\200\334\342\360\277\304\242\343\2419\262\364?\200M]\366\264W\346?\377%I\210\306\270\273?\257S\231\257K\275\362\277O\307&\222_\351\345?i\005\300#\252\027\367\277\227\217\350}\037\260\360?\025\323A\2701\006\360\277h\006\2511\353E\352\277\252\341F}Q\177\351\277\252\341F}Q\177\351\277(*\311\364\302\216\372?IN2\352\004\345\321\277$\260\222[\246\014\346\277\'\260\340\224\244m\353?\373\230L^\353\220\353\277.\230\202\024\036\362\347\277\343\312\360\316\177\301\310\277\030N\272B\020\006\365\2777A\254\201\204\352\003@h\006\2511\353E\352\277\370\240\327f\252\225\320?\nu\264\363\036i\356\277Y\257\026K\327\316\347?<\367F p\036\342?\242qm\010v^\360\277\005u\277\235\241W\306\277d\2254\350\314W\323?\\*\217\325\265\316\354?\017i,\320\332[\357\277\205\276\321?\323E\335\277\017\354/cx`\331?r\356\230\352b+\354\277\014\330\213n\373z\262\277B\341\272\273k\377\324\277T6\311\277\373z\346\2775\264M\204V\236\256?\205\274\377#Q\351\346\277\206:\201\226\016\345\361?\340[\365\275b\340\352\277\3577]S\226\270\355\277\275\257\255\266?=\344\277!\272\357\177\347m\341?\035\310\360\333,\210\351?E\3376\331\347\003\344?tijX\302z\336\277\264\31166\311d\353\277GY\0379\006%\363?\220\"qO\206\312\363?\367\"V\364\354\231\365?~N\237\347v\325\366\277\001\307\375@s\211\002@ \276\223\267\353&\356\277MO\020N\303$\375?V4\236\300\370\316\342?g\020\255r\253W\330?\031Y\365\312\017\247\313?O\323\243\013!\010\315?\270\30203e`\373?\033\026)t\247\334\223?\373\225\2214(\006\362?\261P\220\307l\301\334\277\343\312\360\316\177\301\310\277\374\322\205d\267\226\001@ \276\223\267\353&\356\277IX\335GD\247\322?\227\221\272\231\241\014\367\277l~f\222\006\273\365?\233\004\366\331\334x\363\277\023\336.\0073F\321?\031Na_\217\266\367?\366\243\353s\356o\367\277\361)\265\332\321\355\322\277\273\307\000\215C\312\317?\205\276\321?\323E\335\277j\374\244\360*4\314\277c\024\003q\261\257\337\277\342Y\312\276_4\347?\352\274=\2548\010\326\277\013M\257\231\240\020\256\277\373\035\"\r\013\362\353?\310\025\037\342t\036\361?\2231\354\006\244\366\270?\252\341F}Q\177\351\277IN2\352\004\345\321\277O\335Ni`\312\275?\222\365\351\324\'i\244\277\255PB\216n`\307\277v\337\256\200\334\342\360\277E\3376\331\347\003\344?:\370\210\0212\234\362\277\035\274sbki\322\277\347MB\233\033\'\350?\211\272{A\315\355\325?FYx\034\207t\360\277\177\317\333\203\367[\373\277\252_!\323\217\312\361\277\203C\000\322s\366\352\277\256Y\004\336l\364\364?\255\341\224\266O\340\356?Be\247\\J2\362?{\324\017k\331\003\345\277\264B\217k\'\247\324\277\ts;\273\035\\\345\277\222\365\351\324\'i\244\277\207\273\2752\217k\366?\266\003p<\225j\001@\032\310\242\242.\'\344\277\205\276\321?\323E\335\277\353:\277\036\366\003\361\277\206?\003\267\356\355\320?\265\306{\014\006\332\361?x\326\223M]\377\305\277\346\317\300(^+\375\277c\024\003q\261\257\337\277ox\242\200d4\366?O\277MP\242\203\313\277\217e)\221\267\341\002@>\355\351\373.\275\346\277\271\274\305\004D)\371\277U8B\370\374\207\357\277\202A\207\231r\351\341\277\207\273\2752\217k\366?f\022\177\216-\264\356?\302)\344O\\\277\370?wg\346u>\177\355?\275\256\304\250\376\016\361\277KM\360\370Bg\361\277\240\355\331J\030{\300\277\365\'1\370M\362\341?\022\354}\234v\301\316?\347\324\351e\275\344\336?x\364\224f\033F\270?\'\025\343\016\204+\263\277\nu\264\363\036i\356\277\023\340\000#\265\242\347?xe\024Z\274\"\327?\373\230L^\353\220\353\277\270\2735\332\203J\343\277\252\341F}Q\177\351\277y\331\352n:\\\361\277j\004~2\350\231\346?\312\230\324\266\366\261\376?V\275\027\247\034\351\357?\302\242<\205\272\001\362\277~N\237\347v\325\366\277\377%I\210\306\270\273?\177L\315\313\364x\360?\030\324x\377p\225\350?\325\346V\024\0164\276\277\362\302\340Dp\323\264?@f\351M\014\260\342\277E\345\314S\275\266A?\005\004@\252\000{\327?\373\230L^\353\220\353\277]\231<\255\324N\305\277\010u\r\327\237\270\333\277\256\323E!\014e\341\277;w\363\2210\306\360?\033\026)t\247\334\223?;tC\215\322\031\330\277\273\307\000\215C\312\317?\030N\272B\020\006\365\277\264B\217k\'\247\324\277\245k\251\366\323\327\360\277\206\304\330e\016O\301?\225[\032\246t\341\014@\260!\314\362\204\032\221?\207\n\206\365\311\236\226?\240vS1<\225\315\277\306\241\241\260w4\324?)\244\n8b\377\346\277\271B\204\301\244\270\354?\214(\216D\251\240\360\277\247h\240\016\365\333\332\2774\007\314^94\333\277"
      }
    }
  }
}
node {
  name: "tensors/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content: "6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277\223\277\217\357\016\272\006\300p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?\223\277\217\357\016\272\006\3006\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?\223\277\217\357\016\272\006\300p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?\223\277\217\357\016\272\006\3006\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277\223\277\217\357\016\272\006\3006\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?\223\277\217\357\016\272\006\300S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?\223\277\217\357\016\272\006\300p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277\223\277\217\357\016\272\006\300p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\277S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277"
      }
    }
  }
}
node {
  name: "tensors/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content: "j\353\203\236\301\221\354\277\356\270\260\275\357\030\002@\220\307\020-\005+\357\277\306\374\220\364YM\324?K\227\034\251\212+\315?j\221\353\2562\203\374\277u\272\305\303\326\375\354?t9\006\213\222\345\272\277j\221\353\2562\203\374\277\334\272-\341\362\321\315\277\022\240\323\233\355\366\257\277\304\276\212\242$\226\364\277\272\207\347\276\323\357\363\277( \275\2651S\254?*N{\3071\256\327?\321\232+z\323;\360\277c\230N\035\027\224\333?\222\346\201&\022H\350\277\234\\q\031\220\032\360\277\300\274/\220\267\342\255\277\315a\330\274w.\343?\332\002v\375\277_\305?\335\310\322P\204\200\260\277\215\372CG\220\222\362\277\031C\343)\362\361\303\277\325\000\335^\004\017\344\277l\276%w\354\313\325\277IZ\\\024M\351\364\277\250\320\324\221\036\003\311?\356\323j\356\303<\324\277V\220\225\333\212\235\340\277\000t\236\022\371{\361?;\264\020X\237<\010@\271\001[\304\202\r\362\277\367.2`\373\251\320?]\250\307\305\316&\350\277F\247\225QB\276\351?\303\221P\332jM\353?\311\037j\254\324p\000@ZB\026\341\235S\364\2777\314:7\213\215\345\277QWB\036/\220\363?\323 \270t$\036\362\277\3125\344\261\265Z\361?\333\321\316]$\342\360\277\200jr\220\303\317\366?\314o\241\213$Z\363\277\021S\317;\220\364\361\277\366\243\0260\354\232\371?\350\275\267u\010\344\240?\333\321\316]$\342\360\277\240\252\3757I\313\276?\343}V\021fy\332\277\026\033\312F\204\224\006@\035SE\227Zn\365\277J\377}g\306e\335?\345\372\250r\310\\\341?f\337j\251\037\315\350\277U\367\260\334\316b\351\277\264\031\027S\374\034\366\277\017\240v\311\367\n\000\300\365J\304\375T\001\341\277\243\344G\250\321Z\377?L\377\2630\337\035m\277\000\032\006#jm\341?\316A\375\246W\037\365?\361\014\342\n;\307\356\2772\223\347y/\200\370?\225\253Z0\220V\361\277\314G4\205w\333\271\277( \275\2651S\254?\226\213\177\032pG\343\277\216=\212\304\270\203\363\277QR\263\350pc\356\277|\305t\234e\320\373?\225\246\313\372\321)\334\277\360x\214A=\271\374?I\rG6s\221\375?\351\364\257 \367=\347\277\244t\243\003\324\243\367\277ha\3755u\352\360\277{\323=k\022\374\353\277\333\321\316]$\342\360\277%\004\\\200Z2\364\277\364S\376\226C\000\314\277\315\277\271$\315\364\300?\347\347Pn]\004\354?\361#\301\023\273t\274\277\035SE\227Zn\365\277t9\006\213\222\345\272\277\375\343\265 \335\242\272?K\227\034\251\212+\315?\306D\027\235ux\366\277\273\000\203W\375\331\003@,!\035\240\\\350\340?f\223\233\210=\352\330\277\3352\263\200H\353\264?\306\034\252\226\310\371\274\277u\2325ClE\224\277j\232tR\354t\373?RIyO\202d\323?,!\035\240\\\350\340?\255\264\317\212\336;\367?\315\365-\206u<\365\277\257\306nhk\257\303\277i\256\001\226\322\354\256\277\305\005\313\215HL\357\277\363\360Om\341o\336?\300\262q\255\202\321\360\277\303\204\315\310\265\226\362?\232=\000 \203\375\366\277QR\263\350pc\356\277QR\263\350pc\356\277\241n\311\326|\323\205?-\247\251\232\255\312\342?e\377E\277?\334\366\277\336\232\241\325\235\265\363\277\336\335\347R\306\246\364\277\021i\333\360\376\234\351?\007\3674vG\202\317?\320\276\000\376\356\017\370\277\035SE\227Zn\365\277\000\337\002\214\003\371\307?w\3316\275\343\032\346?\372~\210\205\362\341\310\277\032\212r\037\341\232\362\277\3435\320hJN\370?\032\212r\037\341\232\362\2773\'=C-\216\352\277\306\374\220\364YM\324?\211\037\322\361\211K\303?\021\\X\337I\346\360?Pw\0354O\237\341?\374\021\347\233\303m\367?\031\327\031\255H\261\000\300\371\033\332[\220Q\333?\24786PZ=\331?r\333\346\226\356\201\362\277\263\216J-\270\000\323?;\264\020X\237<\010@d\362T]\030\344\004@\367v\270\010\027\325\362\277\340\202\t\246?#\335?\376FdJ?3\330?\251`\341\342UY\355\277k*\320\255\356\275\363\277\022\237\236\\r\327\361?\203\277W\353x4\304\277C/\322%\236\007\370\277IZ\\\024M\351\364\277\315O\306u\004K\345\277\303\314Sq\321\301\324\277\350\270\365\217\n\\\000@\322M\026\234\371\343\370?{\323=k\022\374\353\277\251\013\330(\205w\342?\266\325f\271\3009\340\277)=\257=\266?\321\2776\226w\313\027S\375\277\211\257\336B\301\241\347\2774\300!B\351\310\341\277\251`\341\342UY\355\277\n\235x\'\235\366\321?:\241[\201>\370\242?\021\360\255\250G\364\342\277}\004\301\253\222\374\342?\013>Q\002P\273\354?\260CSy[Q\001@\317\261\017\234\307\027\006@\002\244\214\213\266\024\375?k\203\"\340\205W\354?ZB\026\341\235S\364\277.\265\'\324\244\237\235?\200\371\372\227\264\023\271?\351\320lLi(\006@\006\n\215z\262\332\304?z/\240a\337\221\245\277\303\335\037\373L0\333?F\342\230\350\2502\323\277\315\277\271$\315\364\300?\371\367\265\315\251\212\337\277\347\325>\'\352 \356\277\236\342\375\023\341\374\361\277\204\254\377\346\r\334\316\277\026\373\200\340\361C\357?P*\010VuG\332?\365\017\301f\356\214\327?\322\323\355+\000\035\220\277\235\360\306\342\215(\322\277\355\000\311\025\231\002\353\277<\253\365\004X\214\322\277\345O\262,\231>\354\277\016\205m\216X\364\331\277;\330S,-R\351\277y\001\342O\3376\332\277\007%\265\373\370?\360?\332+gM\263\360\340\2771U\341\'\372\310\330\277S6!K\027\014\336?\314\003\367T\"h\325\277\327<\031\252\373>\252?\340\370\017\324\014\014\300\277\227\305<\364\336F\325\277#\367j\0363:\002@\013yT\231\266/\326\277ENC\037\253$\361\277\246\337\343\035\303\243\360?\353z<\033H \351\277\355p\274\304a\254\306?\325\246Dou\000\364\277\266\353rn/\342\367?\324\033)?f\361\334\277\"\330gu\230^\342\277\003\245_\337\307\031\263\277\246\'j\306\336\316\322\277\313\261\024\265;F\276? [\025\0246{\313\277\211\257\336B\301\241\347\277\356\323j\356\303<\324\277J\377}g\306e\335?\272\207\347\276\323\357\363\277\275\241\311\202\"\340\327\277?\3332\210\340\027\322?\342C\2317\367y\350\277)\201\354m\013\263\265\277,\017\013Y\351\004\343\2771\241\260H\334\253\350\277\344\010rAu\210\361\277#6I\335\355$\320?\002\216\200\326Gl\345\277\335W[Xu\304\362\277\001\341\223@\224\021\214\277IZ\\\024M\351\364\277\270[\363\263\021\034\342\277j\375\225\3454u\352?\235E\320\234^\n\315\277\346\350\226+Uy\343\277qUZ\234\235\237\360\277\324l\207\225\006\001\362?\272D\241A\253\376\362\277\300\031\215\256\306\226\371\277)\211\020\016&\341\007@]m\304.h\262\336?\216H\020\037\360W\007@^@f\007\223\354\347?\370\n\016\322\024\343\324\277\031C\343)\362\361\303\277B\211j\025-\026\350\277>\344l!\317\026\355\277\254h\000j\374X\367\277n\242\223\331\222t\345?/\254v\\\272\224\262\277\354\214\351\306\307\337v\277\301\\\323+\357\207\372\277\372\334i\355G\250\346\277O\314&\356\037\201\354\277=\367\304%:o\342\277M\372\312\322\354\273\332\277>T`\320\227\300\310?H \237:\336\351\362?m\t\257\332\3269\356?\346\350\226+Uy\343\277\272\207\347\276\323\357\363\277\240 \004f\026\264\321?\241\r\254a\253[\334?G-\"L\223\240\353?\013yT\231\266/\326\277\035SE\227Zn\365\277yI\267\002\306T\360\277\203\277W\353x4\304\277\216F\023hru\362?\013yT\231\266/\326\2778\313\364y\223\030\356?\332\222\202N\367\265\351\277=\367\304%:o\342\277!\370B\213\270m\360\277\033\354M\3651&\332?\245f\3324\'x\347?Z\263\215\331\254\017\262\277(\353\314\235\317\035\272?\000\032\006#jm\341?j\221\353\2562\203\374\277\0135\027ia\274\301?\004\272t\341\t@\367\277\371\033\332[\220Q\333?)L\374U\251}\243\277\243\340M:\326\225\345?\342C\2317\367y\350\277\335g\243\230\252 \247?t9\006\213\222\345\272\277q5\344!q\264r?IZ\\\024M\351\364\277\320\017\020J\304,\331\277\371\306\320\241\277o\300?\317{\272\200\306\036\367\277,!\035\240\\\350\340?_\2145(u\317\327?\272\207\347\276\323\357\363\277\321\334\236\243\352\'\273?\177x;_p\373\346\277\324\242\373\366\256H\306\277\030a}Z\330m\230\277>\340r\263\323Q\363\277\214\273\3677cf\353\277j[wM\212;\310?\306\235i\317\014\022\357?vA\230{\037U\346\277\365`\320\262\303\251\370?\213\344[\361<g\370?\3168t\003\236-\366\277,\261)\361\223>\305\277\023\324\033\013\356\234\322?\254h\000j\374X\367\277>\026\310\316\324J\002@\0135\027ia\274\301?u\004\026s0\260\250\277\272\341\177\256b\376\343\277\213\316O<\316\276\340\277\021i\333\360\376\234\351?QR\263\350pc\356\277_\032L)(\351\207\277\323zPd\263,\342\277Z=\207\253\337&\337\277IZ\\\024M\351\364\277VU\222D$)\327?K\227\034\251\212+\315?\230\267s%2\033\365\277\2028\20530\335\332\277\354\214\351\306\307\337v\277IZ\\\024M\351\364\277=\367\304%:o\342\277\201K\3357\2335\320\277\306D\027\235ux\366\277\227\305<\364\336F\325\277F7\242\242y\024\316\277\272H\233\257\246\303\354\277\213\316O<\316\276\340\277\306\034\252\226\310\371\274\277\203\204TT\022\300\352\277W\270@n\206\271\304\277\207\2073\260\305\205\323?IZ\\\024M\351\364\277\303\221P\332jM\353?z\003a\301gg\256?\005\254\253\022]\024\347?z\225\206#\2507\360?\251\013\330(\205w\342?\344\010rAu\210\361\277\303\261\231@\375\235\002@N\205\346\002\374\312\361\277\246\236\232W\030\225\004@:\234\231\233@p\002@\n\235x\'\235\366\321?!\363\263U\372@\333\277\376FdJ?3\330?i\244C\263\235\333\361\277\311\246\316\023\253\206\360\277d\300\371\257\022\260\357\277\331j\327\273\373\231\325?\371\005\316\246!\251\363?+{\265\217\353\366\360?\367\320P\370\245\343\342\277\340l\375\360\320z\365?\254\027\361\035\'<\346?\211\257\336B\301\241\347\2772\032y\365\2370\177\277\331F\263-\025\323\331\277\266\325f\271\3009\340\277\324\242\373\366\256H\306\277\211\352\341\331\'\026\301\277\272\341\177\256b\376\343\277\306\374\220\364YM\324?F\342\230\350\2502\323\277&\206\237\002\345\\\310\277\001B\261\265e\211\325\277;\330S,-R\351\277\000\036\000\221e2\373?\r]\302\373\\\330\345?ha\3755u\352\360\277&\273\217\032G\222\312?,v&Z-\312\353\277 \220\005,\230\260\315?\267\302sPI\005{?\264\266\365\277\263\034\347\277(\353\314\235\317\035\272?\377\200!$\2562\352?y\001\342O\3376\332\277\305\nZ\303\006y\364?\306\367\001\277\233 \377?J\377}g\306e\335?\025\374\306\235\351\270\346\277{~4\261A\032\341?i\244C\263\235\333\361\277dk\360\365A\316\344?\216\237e\232\t\017\333?\212<\367)N\223\003@\322.\201C\321I\322\277/-6\225\376\254\344?\272\341\177\256b\376\343\277\266\211\227\230\336V\320\277t9\006\213\222\345\272\277\327\337\273\213\354\212\376?~\361h\247\'\244\355?\355\000\311\025\231\002\353\277\300s%\236U\245\351\277IZ\\\024M\351\364\277\347\2005m\031?\343?#6I\335\355$\320?\271z\366\\\254\367\001@\320\017\020J\304,\331\277>\366~hB\372\352?u\004\026s0\260\250\277_\324\273\320\220\372\371\277\357\3446x?\253\332?%\377\314J\234\005\337\277$\r\345#\024$\363?IZ\\\024M\351\364\277\'\326\267\233\215\367\365?\364\210\356\256\2455\316?QR\263\350pc\356\277\356H\236\310\177 \361?\273\'\305qD\226\234\277\320\017\020J\304,\331\277(/\n\316$\221\336?\263\337Yy\215\035\364?\216\237e\232\t\017\333?\260^\r\252/u\323\277\203\277W\353x4\304\277\215T\3346\037\241\342\277}^Y\233!\013\363?IZ\\\024M\351\364\277\370\275\370\363:\213\355\277r\372{\357\026\034\331?\251`\341\342UY\355\277\220`\365+\301e\346\277\373:KU\235n\324?$^\364o\351@\344\277;\264\020X\237<\010@\201\\\251\301\026\244\326?\000o\017\335:O\354\277\010:\312\375:f\264?`\306\362\001\344\316\351?&Bb\322\217\351\323?YP\337\257J\177\324\277\'|\037\254\376\350\345?j[wM\212;\310?u\2325ClE\224\277\273\3409\361j\211\354?NF\232\363\316\236\352\277\336\236\233C\231z\355\277\367v\270\010\027\325\362\277\220r\007s4I\344?;\264\020X\237<\010@>\217cg\3764\342?/\202?O\317\216\357\277\034\310)gK_\336\277_\243\365\352M.\000@\014t\024n\303\365\364?\270\n\344g<\377\360?\372\356{4\273\213\344?\321\232+z\323;\360\277\031\256G\243\374n\372\277\013\212 #2\236\334?\006\n\215z\262\332\304?F7\242\242y\024\316\277;\264\020X\237<\010@\003\215:\031P\367\355?2\032y\365\2370\177\277\261K\265\245\304\034\336\277}\004\301\253\222\374\342?\306D\027\235ux\366\277QR\263\350pc\356\277,\265riZ\366\362\277\361K.\032h\363\365\277hw\t\353\343\222\350?\306\220\346\275W[\366?lq\020\231\022t\356\277\273\202X\211\025\303\336\277\322.\201C\321I\322\277\357\316*\303\320\002\363?IZ\\\024M\351\364\277JP\215\263\233\202\376?\336\236\233C\231z\355\277\006\232\231\313\3510\351\277\243\245J\243o!\314?\345O\262,\231>\354\277\204\254\377\346\r\334\316\277\360\010\350\234?\002\365\277x\307$vp7\350\277\305zl\270vq\005@\243\245J\243o!\314?\234X(\241\311b\302\277qs\2517\316\304\317?}\004\301\253\222\374\342?1\263\302\217O\217\346?\016\251\221\034?\273\325?\370\302\207)\371\267\362?\365\261\337\376\230\306\351\277\310\r\352\024\357K\371\2771\021\244\367\244U\304?\277\337\317\324W\227\367?\230\267s%2\033\365\277d\274\377A\027\353\365\277>\230\235\000\3553\335\277\240 \004f\026\264\321?\201K\3357\2335\320\277\346\227\207\337\177\\\362?fs\202\346\316=\260?.\026W\214~\377\266?\237%D\221\t\356\362\277&\206\237\002\345\\\310\277:\241[\201>\370\242?\272\246|\027\374\211\332?\303\335\037\373L0\333?\233\342!s\374y\337?7\314:7\213\215\345\277\227\2129]x\322\353?\230\267s%2\033\365\277\324y\n\247\273\267\352?\214f\356}\222\204\340?\013\212 #2\236\334?\310\201\3271\263\272\316?\030a}Z\330m\230\277\037\331\321\221\253P\367\277}k\334\254\326\301\353?~\361h\247\'\244\355?0y\005\266\340\217\324?\203\200Z\346\026\373\360\277\260^\r\252/u\323\277\035SE\227Zn\365\277\036\254\227\311\361\007\356?\000t\236\022\371{\361?:\352es\2405\347?\220\314\237b\303W\364?\216s\337\337\271|\002@\376\201g\341\245\247\341\277P\013s\375L\255\363\277\314o\241\213$Z\363\277\035\013\277\356>C\323?\266\211\227\230\336V\320\277\246\337\343\035\303\243\360?\023\335U\244\334\233\355\277R5jQ\221\236\000@\341U\253~j]\346?\361\003\250qL\310\323?\033\354M\3651&\332?\314o\241\213$Z\363\277\301\244\250\336\325\245\340?\007\302D^\345L\315\277QR\263\350pc\356\277\360x\214A=\271\374?\311\252\310\201\246K\352\277\250ep\030\024\206\362?\362\216t\227\220\344\366\277\264\266\365\277\263\034\347\277\207)RHp\277\345\277\355\000\311\025\231\002\353\277\324\022\357\245w\362\341?\356\230gW]\310\352?\004r\3568\356\024\325?X\026\"\326\333\177\342\277\230#\036\\4\r\343?\035\013\277\356>C\323?\303\335\037\373L0\333?\026F\231\007N\271\001@\240 \004f\026\264\321?\341\026_o=1\377?\334e$\'\"\360\322\277u\004\026s0\260\250\277\272\341\177\256b\376\343\277YP\337\257J\177\324\277\264\266\365\277\263\034\347\277\027\3404\000\220a\326?]\343\312\\5\233\301\277F.h\t\213\025\343\277\300\274/\220\267\342\255\277\230#\036\\4\r\343?\273\'\305qD\226\234\277,%\027\016X\255\372?\006\n\215z\262\332\304?Y\234\256\320,b\344\277\273\'\305qD\226\234\277;\264\020X\237<\010@\261PD\333\202I\363\277\001f\325CLP\321?\315\277\271$\315\364\300?/\254v\\\272\224\262\277\233\342!s\374y\337?,!\035\240\\\350\340?$^\364o\351@\344\277f\337j\251\037\315\350\277\305\001\321\037M\207\365\277\351m\335h\256\346\355?\215T\3346\037\241\342\277\235\360\306\342\215(\322\277ha\3755u\352\360\277\211\352\341\331\'\026\301\277\247s9\347\300\261\342\277\322\323\355+\000\035\220\277\362\376\030<\216\233\376?\330\273\346\007\321\266\366?\346\350\226+Uy\343\277\370h\3579j\251\342?]\343\312\\5\233\301\277|l\"j\3166\343\277\365\261\337\376\230\306\351\277\027\314%\002\237\233\003@7\2217\240$\031\334?\351\250\340\377\024[\327\277\023\335U\244\334\233\355\277\274}\030^\"\211\375?\356?\025%\306.\362\277\031P\265Er\233\360?\206\214s\333\270\277\364\277\327\007)\222\231\t\270?lv\237\316\320\240\363?Q\215\266\177\327\327\307\277\030x\323AT\'\306?\353\307Q\371!x\320\277#6I\335\355$\320?\236\342\375\023\341\374\361\277#\327!\270\240\351\352?ENC\037\253$\361\277\tQ\251\006\273\023\342?\376FdJ?3\330?\257\312\267\3401g\361\277\234X(\241\311b\302\277\300\"\026R\200\210\370?l\317\361\000h:\334?\376\201g\341\245\247\341\277QR\263\350pc\356\277\021\265\252\021\341\177\331?\177\230\313\337\332\263\237?)L\374U\251}\243\277H\234\317=d\325\277?|l\"j\3166\343\277\315\277\271$\315\364\300?t\315\035\310AV\342?\0135\027ia\274\301?\013\212 #2\236\334?\000\337\002\214\003\371\307?#\327!\270\240\351\352?\224\312\357\210\270\360\327?\035\013\277\356>C\323?\227x\'\026\005\357\355\277.qT\177\254\321\003@\226-\236\262\032\201\305\277\271\001[\304\202\r\362\277\300\262q\255\202\321\360\277\333\321\316]$\342\360\277\251`\341\342UY\355\277\307\3518\360\356\364\336?\371\033\332[\220Q\333?\322r\276s&\275\266\277\361\003\250qL\310\323?\006_\2264\203\274\337?a)\202\345\236\020\002@;\264\020X\237<\010@n6\351\242\220\202\367\277\006\232\231\313\3510\351\277\266\211\227\230\336V\320\277\303!]+\242\243\317\277b\306`RV\020\003\300\272\341\177\256b\376\343\277&\206\237\002\345\\\310\277]\030\273t\227\320\303?\226D\364\231\226:\223?\266\325f\271\3009\340\277P\013s\375L\255\363\277\025\374\306\235\351\270\346\277\031G,\242\270\251\361\277Q\276]\037sU\374?i\376\333\242,\352\341\277IZ\\\024M\351\364\277\\!\365\r\206\317\356?Y\025\334\030\344\n\353?\303\204\315\310\265\226\362??\3332\210\340\027\322?\r\"\277d\366c\314?l\276%w\354\313\325\277\001\007\256\036\377\024\354?1\263\302\217O\217\346??#\2710\374B\364\277\310\201\3271\263\272\316?\tZ\343\237\251\022\335\277\246F\377\036\007i\371?\306D\027\235ux\366\277\232F\211\303<\357\365?\245f\3324\'x\347?\n\235x\'\235\366\321?\r]\302\373\\\330\345?\371\306\320\241\277o\300?\335\243*yW\247\362?\372U\2275\377P\355?\001aF\016\216#\374?\372H\024$J\232\364?\272\341\177\256b\376\343\277fX\230\361\326u\357?\344x\026\346r?\371?\372\356{4\273\213\344?\254\027\361\035\'<\346?O\031<\314\371\330\323\277\232\365ywg\322\324?wiC\016\033q\312\277\235\265\303K\'\264\350?\323zPd\263,\342\277a\253\246!\202\354\320?N\205\346\002\374\312\361\277\323?M\315L\270\330?\357\206U\020\352\344\354\277\376\201g\341\245\247\341\277( \275\2651S\254?j\221\353\2562\203\374\277\355\000\311\025\231\002\353\277I\022\326k1\276\322?\211\257\336B\301\241\347\277\370h\3579j\251\342?\016eT\354\351G\261?\202\311)\247]\370X\277\363fV\233\256X\301\277\300\274/\220\267\342\255\277ha\3755u\352\360\277=\004H7\357%\373\277\221R,]\024:\366?:Q\201t\344\372\357?\201\376\307Y\301\335\350\277\234\035%\nc\356\350\277\210\301\360\2114\205\345?\024hq\324\353\252\364?\030t\212\311\215o\370?\327\205#\234]|\356?\305\001\321\037M\207\365\277\tQ\251\006\273\023\342?\362\357\230s[\002\001@=\274\301\216\323\372\330?9\260\250\23116\325?\364\376\364\334r\036\321\277\365\017\301f\356\214\327?+\250\201\0073\376\000@Q\215\266\177\327\327\307\277\306D\027\235ux\366\2773tR!\007\346\321\277\211\352\341\331\'\026\301\277\324\033)?f\361\334\277\206\272\244V\237\212\261\277\312\362\2354\215i\360?N\307Y,\023\267\274?\221\276\326\223\026,\324?\216\332h1p\203\344\277\313\333K\302&L\341?I\263\256F\344\202\355?M\372\312\322\354\273\332\277;\330S,-R\351\277\366\342b?\031\307\340?;q8+\351\214\340\277he\367\243p\257\352\277a\264\340\272p\353\353\277cCEcF\262\300?\350\275\267u\010\344\240?\271M*\345d\360\361?\227\305<\364\336F\325\277[4M\022\361\'\344?u\250\263|c\032\357\277\220g\201\030\375t\000@\322\323\355+\000\035\220\277]W\270y\371\t\367?3tR!\007\346\321\277\231\262\344\357s\356\337\277<p\362m\361\027\351?\376FdJ?3\330?IZ\\\024M\351\364\277\033\354M\3651&\332?\036\370f\352\323\352\335?\306\330lfs\206\330\277;\264\020X\237<\010@O\031<\314\371\330\323\277y\001\342O\3376\332\277C/\322%\236\007\370\277{\323=k\022\374\353\277}\362\256d\037\031\345\277t9\006\213\222\345\272\2773\326-\367Wq\371?\035SE\227Zn\365\277\323\323\242\226J\306\372?\303\314Sq\321\301\324\27768\345m\215\177\363?@\267\016\372\371P\326\277;\264\020X\237<\010@\227\305<\364\336F\325\277}k\334\254\326\301\353?\327\235Hb\325\236\263\277\264\"\240\366\265\016\365?\013\212 #2\236\334?,!\035\240\\\350\340?}Y\312ec\336\355\277\013\212 #2\236\334?-h]\213\200\236\373?Tq$\342}\200\347\277j[wM\212;\310?\356\230gW]\310\352?\246\'j\306\336\316\322\277\0363j\201:_\347\277\366\353\234\330\007\306\333\277\300\014\n\235\021\340\340\277\023\030Y;C\020\307\277]\343\312\\5\233\301\277\363+S\004H\344\347\277H \237:\336\351\362?\313\'\033\343\010/\321?\342\241z\237L@\326?\334\261\363G\004\323\342\277\276\355\230\243\004\303\347\277\017\321<\257:\327\351\277vA\230{\037U\346\277\216\332h1p\203\344\277\324\242\373\366\256H\306\277\272\207\347\276\323\357\363\277Z\233h\0235\355\354?\251\013\330(\205w\342?,\265riZ\366\362\277\027(\273\250\253\214\370\277\211t\333\253Z-\336?\030x\323AT\'\306?-\236\321\354(\346\317\277\304\271\373lfi\337\2774o\022\366\023\254\360?\2523\203\273\200\223\326\277V\220\225\333\212\235\340\277q\316\3654\307\211\000@u\024^\263e\014\375?\334e$\'\"\360\322\277;\264\020X\237<\010@\311\037j\254\324p\000@#~\317\205\tP\362\277\314o\241\213$Z\363\277\003\017@\017\214\204\267?\356?\025%\306.\362\277\341U\253~j]\346?\236<\226\003p\013\342\277,v&Z-\312\353\277\213\316O<\316\276\340\277\2207\004\334\315\324\312?\360\036\364Q\256\252\354?h\262\014\202J\007\322\277\306\347\271~f\304\252\277}Y\312ec\336\355\277\311\367\335_\200\243\321\277\214o(\027\201\203\333\277\300\262q\255\202\321\360\277)L\374U\251}\243\277\210\033\211y\303\223\365?\304\271\373lfi\337\277\334\261\363G\004\323\342\277\3028\376\247\323\263\362\277\'\036>D\251\"\330\277\302\360w\377\267\210\320?i\256\001\226\322\354\256\277c\323Q\264}\010\345\277P*\010VuG\332?\314o\241\213$Z\363\277%P+\241<\025\364?q>\271\037l\217\315\277\312\351\024\221\323w\361\277\361\014\342\n;\307\356\277c\230N\035\027\224\333?Y\245\350i\033a\317\277\345\234\307\ns\226\323\277.6p.\355\253\337\277u\004\026s0\260\250\277\021\002\300\357\272\327\340?n\363\242%h\221\366\277\375\010^\370\t|\370\277\261Y\315~<;\362?VP\251\3461\307d?o\331\213\204\201\316\253\277N\205\346\002\374\312\361\277QR\263\350pc\356\277QR\263\350pc\356\277\262B{\014\326\035\343?\237[\231\254\n\347\001@)\201\354m\013\263\265\277I\022\326k1\276\322?$\r\345#\024$\363?^\005cp,x\316?\376\227s\226\024P\371?\036\314\340/\204X\005@j\360\022\324\177\276\361?@\267\016\372\371P\326\277\272\207\347\276\323\357\363\277.Z\224\274\323r\333?\263\337Yy\215\035\364?p\257\362\213,\256\340\277\314o\241\213$Z\363\277\344\010rAu\210\361\277\177\212M\246\343\336\344?7<.\346S7\301?\300\031\215\256\306\226\371\277\'\343:\255B\256\356?\266\023\221j\021n\315?\324\327\353\016\021~\310?\243\245J\243o!\314?\000\337\002\214\003\371\307?Hc\345\267\006\333\363?\033\354M\3651&\332?QWB\036/\220\363?\363\321\272\024\271\325\367\277\317{\272\200\306\036\367\277\261o\3313\253\343\331?v\360\210/J8\365?\216\237e\232\t\017\333?\334e$\'\"\360\322\277\023\210L\352\013\272\342?I\022\326k1\276\322?\306\347\271~f\304\252\277\364\255\345\220\235\001\360\277\340-\000\354nA\302?\214\273\3677cf\353\277\334\261\363G\004\323\342\277~\230\026u\220\n\365\277\363+S\004H\344\347\277_\032L)(\351\207\277[\";\313}D\346\277\024u\364\345\240a\355?\270\n\344g<\377\360?F7\242\242y\024\316\277\016eT\354\351G\261?\036\347\232`X|\327\277\275\241\311\202\"\340\327\277.\026W\214~\377\266?\316n\311\036\237&\005@;\264\020X\237<\010@\351\250\340\377\024[\327\277\003\330R@\254l\000@\226D\364\231\226:\223?\216A\2042\264H\355\277u\255B\262!G\364?\007\3674vG\202\317?\371V\335\362\366\305\344\277\322r\276s&\275\266\277\021\360\255\250G\364\342\277\215\262\275\236tg\320?,\265riZ\366\362\277>\344l!\317\026\355\277\3352\263\200H\353\264?\257\235\353h\352_\001\300\332\365\243\341?\266\370\277\325\246Dou\000\364\277\304\030#\222\263\244\344\277q>\271\037l\217\315\277\024u\364\345\240a\355?\035SE\227Zn\365\277\241\374\337\327/\355\325\277n6\351\242\220\202\367\277\356?\025%\306.\362\277\002\216\200\326Gl\345\277w@R\276\'\340\356?\013\212 #2\236\334?xm\214\206\341(\370\277\333\321\316]$\342\360\277=\367\304%:o\342\277ha\3755u\352\360\277\260#\n\023\311\000\352?\211\257\336B\301\241\347\277&K\234k~\350\356\277\271M*\345d\360\361?\245T\310\355\263\224\351\2777\2217\240$\031\334?\334\261\363G\004\323\342\277\372?\213\200\220\250\365\277W}=\327\037E\353\277IZ\\\024M\351\364\277/-6\225\376\254\344?\365\261\337\376\230\306\351\277\314o\241\213$Z\363\277\235\017\\;\266\302\370?\272D\241A\253\376\362\277\346\216\376;\306j\363\277QR\263\350pc\356\277^{i\236\371`\321\277c\202Bh\250\353\363?\372U\2275\377P\355?fs\202\346\316=\260?Z=\207\253\337&\337\277N\205\346\002\374\312\361\277he\367\243p\257\352\277,!\035\240\\\350\340?\232\365ywg\322\324?F7\242\242y\024\316\277\372~\210\205\362\341\310\277qs\2517\316\304\317?z\346\225o}T\341\277C/\322%\236\007\370\277\313\'\033\343\010/\321?\023\030Y;C\020\307\277\272\341\177\256b\376\343\277\300\274/\220\267\342\255\277&\206\237\002\345\\\310\277\227\305<\364\336F\325\2774\031tt\200b\372?9\370.BMa\367\277\363fV\233\256X\301\277IZ\\\024M\351\364\277IZ\\\024M\351\364\277\000\032\006#jm\341?\251`\341\342UY\355\2776\354\025M\253\234\363\277i\256\001\226\322\354\256\277\023MIS\245E\311?t\315\035\310AV\342?\212G}\204\205g\347?\334\261\363G\004\323\342\277\370\302\207)\371\267\362?t9\006\213\222\345\272\277\354\023!\032\004[\340\277VP\251\3461\307d?4\031tt\200b\372?|H\337\225@!\002@)=\257=\266?\321\277\235\243\261\004\264\320\352\277\373\316\240\036\233|\366?\273\'\305qD\226\234\277-I\3102X\004\325\277\300\262q\255\202\321\360\277-h]\213\200\236\373?d\274\377A\027\353\365\277\232\360\352A\251\245\377?\262\234\023\374d,\363?\370\271\376\205?\306\363\277iW.\325\303\203\372?\272\207\347\276\323\357\363\277\241\270\242\247\332y\301?\035SE\227Zn\365\277*N{\3071\256\327?\262\301\273\323\221\005\261\277\334e$\'\"\360\322\277t9\006\213\222\345\272\277\221\271G^X\377\376?\023\210L\352\013\272\342?/\254v\\\272\224\262\277\250\320\324\221\036\003\311?\tQ\251\006\273\023\342?&Bb\322\217\351\323?j\221\353\2562\203\374\277\246\337\343\035\303\243\360?\373:KU\235n\324?9d\331xOS\345?\346A\351]\354\022\374?\2028\20530\335\332\277\224\005\363\037\037e\341\277*\211~^\230\"\341\277\370h\3579j\251\342?&\344\200j:#\346\277\340-\000\354nA\302?\260#\n\023\311\000\352?\357\037:\017\246\037\344\277\275f\306\353\273k\356?\351\250\340\377\024[\327\277Z=\207\253\337&\337\277\213\316O<\316\276\340\277\306\374\220\364YM\324?Q\215\266\177\327\327\307\2773\326-\367Wq\371?P*\010VuG\332?$kw\201\236\367\374\277H\033\020\005 \275\355\277V\220\225\333\212\235\340\277\300\262q\255\202\321\360\277a\264\340\272p\353\353\277\240q\023\262\353\320\362?\355;\314\254\377v\304\277\273y\036\360&\304\343?(j\re\213\005\350\277u\004\026s0\260\250\277T\362\343\032\302\230\271?$^\364o\351@\344\277IZ\\\024M\351\364\277\251`\341\342UY\355\277q\316\3654\307\211\000@n\220\201\222\037\221\347\277\355\000\311\025\231\002\353\277\257\306nhk\257\303\277F7\242\242y\024\316\277t9\006\213\222\345\272\277\370\275\370\363:\213\355\277;\264\020X\237<\010@i\237\264}\337\256\334\277\276\223\000\264u\264\367\277\355\000\311\025\231\002\353\277\332\365\243\341?\266\370\277\025\301\303\006\203D\335?\n\235x\'\235\366\321?\3275Z\r\200\324\364?\211\037\322\361\211K\303?\363\360Om\341o\336?QR\263\350pc\356\277\314o\241\213$Z\363\277\341\257Cn\371k\366?\027\3404\000\220a\326?;\264\020X\237<\010@f\223\233\210=\352\330\277\243\325\307\337\236\301\001@<\253\365\004X\214\322\277\266\325f\271\3009\340\2777<.\346S7\301?\203\204TT\022\300\352\277ha\3755u\352\360\277\346\255\223\224\356\004\332?;\264\020X\237<\010@\006_\2264\203\274\337?{\330\314\240\320(\361?\227\305<\364\336F\325\277*\360\231_\334\347\351\277\327\235Hb\325\236\263\277\271\001[\304\202\r\362\277\027\3404\000\220a\326?EaP\216`&\221?J\377}g\306e\335?_\032L)(\351\207\277\310\201\3271\263\272\316?\254\2261\345\342#\264\277\205$\205\206c\365\265?\235\360\306\342\215(\322\277\302nS\303\324\254\001@\241\374\337\327/\355\325\277\210\301\360\2114\205\345?\014\036v\354/\254\376?VP\251\3461\307d?\332\315\205\345]*\303\277\366\353\234\330\007\306\333\277\027\3404\000\220a\326?\230\326\010~Z\265\333?IZ\\\024M\351\364\277\001\341\223@\224\021\214\277\226\241\213\317\336\357\372?\364\303\361E\014\252\347?\335g\243\230\252 \247?u\004\026s0\260\250\277j\221\353\2562\203\374\277\272\341\177\256b\376\343\277\351\320lLi(\006@Ju\204\225\223N\300\277p\026\016\215ps\351\277H \237:\336\351\362?\260\r\376]ZX\362\277Q\302\246\2279\r\312?\214o(\027\201\203\333\277\207\317\271X\341\260\365\277\362\244\200L\377\214\356?\311\246\316\023\253\206\360\277i\244C\263\235\333\361\277g)=\023\204\315\003@&\344\200j:#\346\277\3076N\316\310L\346?V\220\225\333\212\235\340\277\314o\241\213$Z\363\277QR\263\350pc\356\277\221\257\211{#\356\241?\014\036v\354/\254\376?;\264\020X\237<\010@A\003\336\032\3343\346\277B\233|\\\240\371\345?\3130U|\367-\354\277s\216\321\270\024*\373?H\027\026\227$\370\363\277\014\013i}z\252\236\277\351m\335h\256\346\355?\006\331\345\332\026]\360\277t9\006\213\222\345\272\277"
      }
    }
  }
}
node {
  name: "tensors/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content: "\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277\217W\243\027u\307\000@\255[N\177\202I\370\277g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\255[N\177\202I\370\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\n?\262\302L\220\006@o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\255[N\177\202I\370\277o\031aR\246o\351\277)\340(\331:\375\365?\217W\243\027u\307\000@)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277Q\025\266\352\230\355\001\300\217W\243\027u\307\000@\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277\314\374\304\225p\266\007\300o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\255[N\177\202I\370\277\255[N\177\202I\370\277\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277\314\374\304\225p\266\007\300\n?\262\302L\220\006@\217W\243\027u\307\000@o\031aR\246o\351\277g\"\026\006\027\327\344?\n?\262\302L\220\006@)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277Q\025\266\352\230\355\001\300\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277Q\025\266\352\230\355\001\300o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?\217W\243\027u\307\000@g\"\026\006\027\327\344?\217W\243\027u\307\000@\255[N\177\202I\370\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?\255[N\177\202I\370\277)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277\255[N\177\202I\370\277\255[N\177\202I\370\277\037\334+1=b\262\277\255[N\177\202I\370\277\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\n?\262\302L\220\006@\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277g\"\026\006\027\327\344?\n?\262\302L\220\006@)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?\217W\243\027u\307\000@o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?\255[N\177\202I\370\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\255[N\177\202I\370\277\255[N\177\202I\370\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?\n?\262\302L\220\006@\217W\243\027u\307\000@o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277\n?\262\302L\220\006@\217W\243\027u\307\000@)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\217W\243\027u\307\000@o\031aR\246o\351\277\217W\243\027u\307\000@\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\255[N\177\202I\370\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\255[N\177\202I\370\277)\340(\331:\375\365?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\217W\243\027u\307\000@)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?\037\334+1=b\262\277\217W\243\027u\307\000@g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?\217W\243\027u\307\000@g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?\217W\243\027u\307\000@\217W\243\027u\307\000@)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\n?\262\302L\220\006@g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277\217W\243\027u\307\000@\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277g\"\026\006\027\327\344?)\340(\331:\375\365?)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277Q\025\266\352\230\355\001\300\037\334+1=b\262\277\217W\243\027u\307\000@\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?Q\025\266\352\230\355\001\300o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?\255[N\177\202I\370\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?)\340(\331:\375\365?\217W\243\027u\307\000@\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\n?\262\302L\220\006@\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?\217W\243\027u\307\000@o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?)\340(\331:\375\365?\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277\255[N\177\202I\370\277\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?\255[N\177\202I\370\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?\255[N\177\202I\370\277g\"\026\006\027\327\344?\255[N\177\202I\370\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?\217W\243\027u\307\000@g\"\026\006\027\327\344?)\340(\331:\375\365?\255[N\177\202I\370\277\217W\243\027u\307\000@\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277\217W\243\027u\307\000@g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?\217W\243\027u\307\000@o\031aR\246o\351\277\n?\262\302L\220\006@o\031aR\246o\351\277\255[N\177\202I\370\277\255[N\177\202I\370\277\037\334+1=b\262\277F\344\323@H\177\r\300g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\217W\243\027u\307\000@\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?g\"\026\006\027\327\344?)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?\217W\243\027u\307\000@o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277\255[N\177\202I\370\277\217W\243\027u\307\000@o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277\255[N\177\202I\370\277\217W\243\027u\307\000@o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?)\340(\331:\375\365?\255[N\177\202I\370\277\255[N\177\202I\370\277\255[N\177\202I\370\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\217W\243\027u\307\000@g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?)\340(\331:\375\365?\255[N\177\202I\370\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277Q\025\266\352\230\355\001\300o\031aR\246o\351\277o\031aR\246o\351\277Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\n?\262\302L\220\006@o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277\n?\262\302L\220\006@o\031aR\246o\351\277)\340(\331:\375\365?\255[N\177\202I\370\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277\n?\262\302L\220\006@\037\334+1=b\262\277\n?\262\302L\220\006@g\"\026\006\027\327\344?Q\025\266\352\230\355\001\300o\031aR\246o\351\277g\"\026\006\027\327\344?\255[N\177\202I\370\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277\255[N\177\202I\370\277\255[N\177\202I\370\277g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?\217W\243\027u\307\000@\037\334+1=b\262\277o\031aR\246o\351\277\255[N\177\202I\370\277)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277\217W\243\027u\307\000@g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?Q\025\266\352\230\355\001\300\255[N\177\202I\370\277)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\255[N\177\202I\370\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277)\340(\331:\375\365?\n?\262\302L\220\006@o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?)\340(\331:\375\365?o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\314\374\304\225p\266\007\300\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277)\340(\331:\375\365?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277Q\025\266\352\230\355\001\300\255[N\177\202I\370\277\217W\243\027u\307\000@g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277F\344\323@H\177\r\300g\"\026\006\027\327\344?Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\n?\262\302L\220\006@\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?\255[N\177\202I\370\277\255[N\177\202I\370\277\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?)\340(\331:\375\365?o\031aR\246o\351\277\217W\243\027u\307\000@o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277\n?\262\302L\220\006@)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?\255[N\177\202I\370\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\217W\243\027u\307\000@o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277"
      }
    }
  }
}
node {
  name: "tensors/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_8"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_9"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_10"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_11"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_12"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_13"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_14"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_15"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_16"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_17"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_18"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_19"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content: "\262#!\022Q6\204?W\256+J\337&\357?\207\366\323\200d\235\274\277-\200{j\251\016\277\277\326\324D\262L\221\365?b\304\022L\3256\360\277\037\366u\315\000\233\343\277\340\021\207\032|\202\336\277b\304\022L\3256\360\277\262\270\007\nJ;\342\277B>\350B\002\230\335\277s\324\030W\305\"\335\277]\262\376 d\216\330\277O3;\312\001\243\361?F\220\344\352\002\372\323\277\207\366\323\200d\235\274\277u\021\312ZVf\340\277\2641\000\014\302d\273\277\342l,\227\037,\272\277TS\'\301yc\356?\252\274\244\037K)\310?*\007\203h1\345\345\2775\030\220\003b/\350\277\n\351\246;\017%\322\277\262$\204`\232\265\354?\205\375\n\205\315\000\326?D\265\017h~\303\345?s\324\030W\305\"\335\277\022\237\257M\332\253\323\277\342\210\256?\370\255\346?_\233\024\370\324\005\365\277Rg{dH\\\301\277\205=\363\001]\272\364?\312\276\376\243\224g\317\277I\2578\355\233\256\365?\023\237\016Z\234\305\310?\362:yH\204`\327?\263\326Z\217\036\273\337\277\251<u\031j\234\345?\253\373\r\324\351 \004\300\262\270\007\nJ;\342\277\316Ai\214\033P\320\277\232P4\357\362\001\320\2778\304v\213\025\326\002@a\323\214\210\336i\304\277\207\366\323\200d\235\274\277\2027\"\232\366\316\325\277,\353_\314\032}\316\2775\330\247\206\322u\371?k\036\020E\372\233\333\2777-\333\247\321M\333\277\331\026\306\240\177\213\363?\214\337Hd\227.\376\277\213\332xy\365w\363?\030^\300@\n\224\337\277\004Bwr\017\353\371?\232\237\365\264M\010\350\277\0053\3755\006\270\305?\305\307Hlu\225\257\277\253\373\r\324\351 \004\300\366\270\252\275\203i\364\277\333!g\363\207-\335?\2047\201\246\270\350\312?rv\335Ta\351\360?\267\005*K\205\327\371?Tg\332p\nv\326?\034\315wy\000j\350\277\t\224s\032\020M\360?C\004r!\027\260\310\277\3536Ge=\337\350\277\253\373\r\324\351 \004\300\312\276\376\243\224g\317\277\206\222&#\\\222\326\277\253\373\r\324\351 \004\300\354\271/\231\360T\010@~*G\342\014\006\342?%\346\364\000\267\t\352?\206\340O\364\327\214\343?\365\317\363\362\324\013\315?\2143\344\220\267\372\344\277\212\224\277\224\377\322\365\277\360C\"\035\'\250\314\277a\323\214\210\336i\304\277YK9\211\307\200\000\300\032\244y%\0009\355\277dh\0073/\025\332\277G\373\'Y6\202\270?TS\'\301yc\356?\030^\300@\n\224\337\2778s\224\214\307\362\350\277\244%\221\003W=\363?\2143\344\220\267\372\344\277\262\270\007\nJ;\342\277\r\357w\243u\020\361?$C\230\016<7\373?\007\016\322\270\212\356\343?\312\276\376\243\224g\317\277`*\276:\277\305\353\277rv\335Ta\351\360?\364\343G\226\243\004\340\277i\260Y\211\310\372\366?dh\0073/\025\332\277\334\254\335\375@J\006@\337\3633\225\247\002\341\277Kk\030zIJ\347?o\033\331\313\373%\360?\037\013be\256\237\261\27793\254\01789\372?\370\360\"N\215\315\303\277\267R/gz&\242\277\214\337Hd\227.\376\277\267R/gz&\242\277\267R/gz&\242\277;\177\327O\322\257\321\277;\177\327O\322\257\321\277\"QzVf^\344\277$f\305\372\325|\327\277\021\250\267.?\r\336\277\253\373\r\324\351 \004\3005W\034\250\352\216\022@\272\240\026QzT\351\277\030^\300@\n\224\337\277\031U\270_\2452\325\277\222\267\346m\035\357\340\277\360\364\277c\216\273\351?\245aA\212#L\322\277\312\276\376\243\224g\317\277\000\'[f9\341\347\277\355\204\317B{\363\272?\337\3633\225\247\002\341\277\217\216\350\031\035\276\345\2777\n\256\2737\010\377?>\343\343\271\234\324\334\277\025\027og5\343\346\277\375n\263\317N\360\365\277\344@V\326\342\236\370?2}\243\375l\262\370?\326\367q\236\346\326\321\277\365\325eNy\335\366?\204\360H\371\321\201\n@\nr\336\"U\023\357?\335\255z\260\261]\323\277Mc\250\215\303\364\347\277\253\202.\376_A\323?E\247\317`\316:f?s\324\030W\305\"\335\277\323\000\033s\211\036\267\277E\347\025\235\343U\353?*\007\203h1\345\345\277s\324\030W\305\"\335\277\251\013\007\331\343\025\353\277\270w\030\375y#\356\277\261\232\257\306\343\263\002@e\323J\241b\235\276?\360\330=\273\2659\275\277(\301\311\203;@\330\277\353\204p6\271\331\325?g\0215\215\020\323\347?\301\307u [\033\364\277s\324\030W\305\"\335\277\237z)D\224X\333?E\247\317`\316:f?\214\363\373\023(A\366?\305\377L\275&\231\330?\337\3633\225\247\002\341\277\367\007l\203\336o\374?\016\023=\204\356a\310\277\t\224s\032\020M\360?tR1\240\326\341\001@My\315\r\216\353\253\2778\253\363\360\342\014\000@\231Y<\320Wc\332\277\207\366\323\200d\235\274\277\327F3dA\335\351\277T\300E\210\314\370\367?\253\373\r\324\351 \004\300\034\315wy\000j\350\2771w1\242\310\340\316?\235\310\363\010N9\343\277\310\332!@\253\317\346\277\224i\034\251c\016\331?\362]\2464\036\246\363\277\035\260\274\350\n\366\325\277o\226\317^U\323\356\277\272\313\375\002\306\302\230?\205 8qgF\362\277\377\264l\264D\225\363?\026z\343\334 \374\346?\264M\202\264\232\346\347?\013\251\276\276\177k\363\277\021\274j\336\317\037\346\277s\014\035\250v&\246?8s\224\214\307\362\350\277\261\335\221\223\207\036\271?\004\263\315/%+\343?(\301\311\203;@\330\277u\232\001B\234T\335?\t\017j\255i\372\356\277\025\311E\226\271\350\311\277Q\276\254\026)\270\350\277\271\025\245\004S?\362?\3536Ge=\337\350\277\032\244y%\0009\355\277tTH]\246\257\357?\\\000(\362\337\210\345?\007]4r#\333\306\277n\025gpWT\306?\375|\364#;1\304?\241\006=\001\276\210\321\277s\324\030W\305\"\335\277\251\013\007\331\343\025\353\277\270w\030\375y#\356\277\232P4\357\362\001\320\277\3536Ge=\337\350\277\324N\243P\3072\351?\262x\037\215\272\201\363?\027\311\244\242{\002\337?\271(\266C\3416\313?\311.\007F\367n\221?\253\373\r\324\351 \004\300s\324\030W\305\"\335\277q\360;\363\333\212\344?e\35069\020\242\354?\345\262D\210\327\352\354\277?c\023\300}a\357?+\207\262n\022r\330?D\204\241\'\370<\353\277\355hM\232\242q\356\277\204}\333~\354s\343\277v/\035\340*\346\335\277\253\373\r\324\351 \004\300\221\300\356N\202P\353\277s\324\030W\305\"\335\277\252\274\244\037K)\310?\354\031\214\324Gk\326\277D\204\241\'\370<\353\277\362:yH\204`\327?\n\351\246;\017%\322\277fhf?\361.\317?\341\010\1779\027!\324\277Iy\372\301sq\360\277\246\260\002P~R\352\277\274I\345\236\231\370\301\277]2.\'E\033\353?$f\305\372\325|\327\277+\270 \257\230\370\302?\355\204\317B{\363\272?#\002\030\235\315q\301?\267R/gz&\242\277\325\024-/\334J\344\277\004\202_\357\236\244\350\277u\275..6\232\371\277\376\340\241\201C<\332\277`*\276:\277\305\353\277\245vW\210\375\335\202\277(\371\315\324\354C\241?\027@m\2735\024\342\277b\304\022L\3256\360\277F\255\237{\370m\346\277.\342\266\367w5\331?(\267$\360e\313\000@\362:yH\204`\327?]\262\376 d\216\330\277v\321\341\335\306\254\361?\320PB\325\346\234\371?]\262\376 d\216\330\277n\344\370/\321\315\333?\030^\300@\n\224\337\277\303\235\0210Xr\276\277u\275..6\232\371\277\310D\207\331+|\003@\\\000(\362\337\210\345?X\363L:\366\277\301?\215\326@\2032\315\363\277\253\373\r\324\351 \004\300\200\242\247\357\245#\300\277\025\311E\226\271\350\311\277]\250T\317\374\021\377?\201\216SL\327*\355?\350\276\207K\342\247\325\277\n\351\246;\017%\322\277b\304\022L\3256\360\277\217\216\350\031\035\276\345\277*\007\203h1\345\345\277\245W\2278\274\317\370?\027\347\001\244s\221\360?8$\323\306l\354\320\277\206\222&#\\\222\326\277E;\261\311\003\"\362?8s\224\214\307\362\350\277\025\027og5\343\346\277s\324\030W\305\"\335\277m\2257jv\307\343?\321\271(\246v\207\343\277\271n\020\034\025\302\343\277Q\276\254\026)\270\350\277\037\013be\256\237\261\277]\262\376 d\216\330\277|\320\332M\206N\354\277\271n\020\034\025\302\343\277\373\005\315\376\276\005\354?%:\220-\327\325\360?L1\242X^b\342\277\361\3175\332P\330\262\277wt>\320A\177\340?*\007\203h1\345\345\277k\200\354\305\006\251\320?\2641\000\014\302d\273\277R\227G4\314\307\374?\373\231P\250n\213\341\277\255f\013bI\331\353\277\271.(\237\205\010\365?*\007\203h1\345\345\277\020\023\234\220\260{\335?#\222\017\373jj\237\277\244~\374\032\031\300\344\277\247\'*u\372}\322?#\333S\256\256g\360\277\253\205\347+2*\000@\253\373\r\324\351 \004\300\r\357w\243u\020\361?\001\247\212l\032n\332?\337\3633\225\247\002\341\277s\324\030W\305\"\335\277\310\2329\303\033\026\370?{\317BY\247B\341?\021\250\267.?\r\336\277\031\243\3410!-\342?\200\311k\336\304-\361?s\324\030W\305\"\335\277\223\005oK[\003\263?:\326\010\002\263\013\351?\262\270\007\nJ;\342\277x\246D\005\247\021\346?\372\242X\211\323\354\353\277\272\313\375\002\306\302\230?k;\313\325\357\017\356\277\317\220*RvV\350\277 \231\322\277{m\362\277\313o\234\352\373z\354?\250\331\000\244~\203\345\277s\324\030W\305\"\335\277\342W@\377q\'\354\277\357\302\271.))\344?h\303\013\274\224\330\332\277\323\000\033s\211\036\267\277\302\0267\346\265!\374?\177\253\257\320\n\205\312\277\022\363\2509\200\331`\277VK\267\324\363\r\357\277n\344\370/\321\315\333?\226\r\026NO\364\004@\352\304X\263H\223\364?\232\320c\365\323\216\342?\375\213n`Dd\370?\216\027\301\364\240\222\315\277\254\027J\234\356\322\323\277\2143\344\220\267\372\344\277L1\242X^b\342\277Ev\304\235_\035\004@\030^\300@\n\224\337\277\374<\255\232\351]\360\277b\204*\317E}\341?w\365\246\276?\376\310\277\271(\266C\3416\313?\023\037\337S\2738\346?\267R/gz&\242\277\357\002\242\253\270\342\362\277p?\236\254tw\307\277\003\274\325\020\212\214\355?*\007\203h1\345\345\277\225\315\311\006l\031\317\277u\275..6\232\371\277\215e\352\305\034\215\352\277\351>\267Q\3034\350?\240#\370\221\263\374\343\277\312\276\376\243\224g\317\277\2316\017\344\275\035\376?\212\224\277\224\377\322\365\277T\247\302\355\231/\365?\300@\233\326\270\312\261?\252\2136\337\304\242\335?\352\004A0\330L\343\277^\262]-&\250\315?\267(W7\037\035\326\277s\350\313\006V5\345\277\216\016\271\023<1\303\277~\345%\362\365l\337\277\316\036<\240\201\n\364?\2027\"\232\366\316\325\277\247\305M\364\355p\335\277\253\373\r\324\351 \004\300\220\344?\360\242A\254?H\237\2753\316F\375?*\007\203h1\345\345\277\007\027\332\231\357O\356?dh\0073/\025\332\277\267(W7\037\035\326\277 v\245\323\341\'\326?\242U\376\306\030\217\351\2778s\224\214\307\362\350\2771d c:\351\365?\241\006=\001\276\210\321\277\013T\352\251B\255\266?X\363L:\366\277\301?s\324\030W\305\"\335\277%,O\331\352\224\302\277\245>\024\236\211\006\366?\020J|,\333\323\361?m\2257jv\307\343?\227D\361+\350D\347\277[\t0\323D\352\357?\010\200\300j\177:\370\277\332H\314\325\344\035\371?\334\373\243\201-X\340?\333\223Zc\016\201\003@s\324\030W\305\"\335\277\373\360\340f\021\001\276?pM\337\000a\270\365?\267R/gz&\242\277dh\0073/\025\332\277\330\375B\006M\302\360?m\2257jv\307\343?\017\223l\212\317\356\352\277\373\360\340f\021\001\276?\2143\344\220\267\372\344\277\261\362}+5#\347?u\275..6\232\371\277\311ZQF\214\\\331?\2027\"\232\366\316\325\277s\324\030W\305\"\335\277\207\366\323\200d\235\274\277V|%\025z\224\351?E\247\317`\316:f?7\217\267(\336Z\320?\231m\357\177\350u\342\277|\320\332M\206N\354\277z\357\266\027o\237\000@i:3\341\020\004\343?\344\n\030\253\272a\363\277\310\332!@\253\317\346\277\345ra\311\3318\000@\321\271(\246v\207\343\277\020\023\234\220\260{\335?\317\320\232\2348\2055?\000\2614\276\201\352\363\277`*\276:\277\305\353\277\303\377\355\260d\177\303\277\203\242e\010*W\272?\022\363\2509\200\331`\277\335\255z\260\261]\323\277\037\013be\256\237\261\277H\326\235\317\370\236\341\277\373\360\340f\021\001\276?\304\224\tO\363\020\264\277^)&F\340\271\340?2n)\301c\177\304?iC;\302ue\355?n\025gpWT\306?^\370\267\005Z3\346\277\207\366\323\200d\235\274\277\005%\274\341\031w\367\277\035\215\217\374p\260\371?\003\020q=\252X\364?\360\364\277c\216\273\351?\346\034\252!X\227\t@\033\233qD\233\327\342\277\023\037\337S\2738\346?\371\241\300\224\364\340\340?\367\007l\203\336o\374?\262\270\007\nJ;\342\277\253\373\r\324\351 \004\300F\220\344\352\002\372\323\277\337\3633\225\247\002\341\277\250\274E\023\211\017\323\277\366\2306\377\273\014\005@\212\027\003\334\034_\243\277\242U\376\306\030\217\351\277B>\350B\002\230\335\277;\234\222\340\307#\344\277s\324\030W\305\"\335\277P\214\246\341\303%\343\277\n\351\246;\017%\322\277\311\213\277\206\022\343\303?;\\\252c8j\365?s\014\035\250v&\246?\t@\330\355\357\200\351?B>\350B\002\230\335\277\357\002\242\253\270\342\362\277?c\023\300}a\357?\021c\377\306\r\235\364?\201\216SL\327*\355?W\002\307v\377\362\365?\367\007l\203\336o\374?\301\307u [\033\364\277(\325|3\314R\340\277\367\371*/\362.\316\277~j/_\234\277\360\277\244*a\356\370\363\375\277\345\343\262\310]q\347?U\203\0269\017(\006@\021\250\267.?\r\336\277\222\267\346m\035\357\340\277\016D\253\304t\350\322\277,\234\375\022\202\220\353?:\326\010\002\263\013\351?\024\245\200\265@\227\362?\274\322\034\206\337\346\356\277\226\322\002z\363\370\362?\254\027J\234\356\322\323\277\222#c\304mi\353?x\212\302\\\316\217\271\277\275\211,(\353\313\365?@\3201\207\320\366\370?\364\036V\254m\370\357\277D\204\241\'\370<\353\277)A\371\211\034\315\352?\021\250\267.?\r\336\277c\251\023eEz\255?\201\3053\350\001\203\361\277\035\215\217\374p\260\371?^\370\267\005Z3\346\277\207\341\347\350\266\230\356\277*\007\203h1\345\345\277\240#\370\221\263\374\343\277\235\310\363\010N9\343\277\266\266h\205*\321\361\277\377\246+`XT\305\277\261\362}+5#\347?\030^\300@\n\224\337\277*#\005\021\ng\262?\205\000\304\262\237\351\002@\216\016\271\023<1\303\277A \225\275-\030\340\277`[,{EL\346?\2027\"\232\366\316\325\277s\324\030W\305\"\335\277\2027\"\232\366\316\325\2776n\347\331\347\262\256?\345\343\262\310]q\347?\253\373\r\324\351 \004\300\2641\000\014\302d\273\277\242\206l\007\237\025\344?-\200{j\251\016\277\277\335\212M\304\027\030\367?\227\004\t\257X\213\370?\2027\"\232\366\316\325\277\335\255z\260\261]\323\277\272\240\026QzT\351\277\267R/gz&\242\277\231\340\\\372\315\203\t@\222\016w,\300d\275?\250\357%$Iz\251\277\242U\376\306\030\217\351\277\013T\352\251B\255\266?\037\240r\303\3231r\277\253\373\r\324\351 \004\300~\371\330\241\206\177\347\277m\325\037\347\005\201\362\277_\270\317\210\312y\367?\347L\231\231\355[\361\277\346P\321\217\260\006\361?C\022\263u\003\361\366?\310\332!@\253\317\346\277>1\r\213\030\317\351?8s\224\214\307\362\350\277\023\237\016Z\234\305\310?\271n\020\034\025\302\343\277!\337\213\244q\022\360?s\324\030W\305\"\335\277\024BV\031\201Q\226?\253\373\r\324\351 \004\300[]\313\377d\266\366?\362]\2464\036\246\363\277\220\016\030 \376J\330? (|\002f-\351\277\367*\231ox\265\330\277BR\233\362\222\252\345\277\373@\345\220\254\010\360?\003\020q=\252X\364?:\245\232\301,\205\356\277\225\271\177\337\300/\360?\213\374\010\263\036\252\002@\325\000z\177K8\334\2778s\224\214\307\362\350\277\220\344?\360\242A\254?\351>\267Q\3034\350?i\211\225\232\251\360\305\277>\343\343\271\234\324\334\277\266\223;\231\220\213\325?\253\373\r\324\351 \004\300\253\373\r\324\351 \004\300WB\257\363\216\254\344\277WB\257\363\216\254\344\277|\320\332M\206N\354\277\212\224\277\224\377\322\365\277\267(W7\037\035\326\277\252\002\377\367~\264\340\277\277\262*|\353\374\360?b\204*\317E}\341?\017l\014f\004\006\001@IV\315\325\331+\324?\360\211\246[\207\300\207\277iC;\302ue\355?\\\035\343\202\325\374\327? \231\322\277{m\362\277PFL\t\220\232\312?\315Jqm\200\261\332\277\246\341p\220\004\331\344?\264\306\020j\347\366{\277\227u_ln\313\341?\316Ai\214\033P\320\2778s\224\214\307\362\350\277\005%\274\341\031w\367\277\343\016P\241}\014\363?\312\276\376\243\224g\317\277\262\270\007\nJ;\342\277\303M\027\202\340y\340\277\234\026\035\332\3113\320?=N\310\033\016C\334?\260rN%T\226\324\277\253\373\r\324\351 \004\300\007]4r#\333\306\277\260rN%T\226\324\277\310\2329\303\033\026\370?\254\346\333[hL\311\277\343\316g$\356R\324?\317\320\232\2348\2055?\031\374LH\343\257\363\277\372\275\241I\217|\242?\267R/gz&\242\277\177\271\360$\367\305\370?\347)l\255S\026\325?\027\347\001\244s\221\360?!\213\360wQF\351?\\\035\343\202\325\374\327?\300\313\255\026\036\306\363?\004\202_\357\236\244\350\277q\360;\363\333\212\344?s\324\030W\305\"\335\277\262x\037\215\272\201\363?-\263i\360\344\213\000@MO\365\3352\342\337\277C\022\263u\003\361\366?r\361\323\347\272\226\357\2773\257\2512\322D\376?\343\272\264t]@\354?\312\276\376\243\224g\317\277\370\360\"N\215\315\303\277\326\367q\236\346\326\321\277E\247\317`\316:f?\323\253F^L`\372?\337\3633\225\247\002\341\277\366\270\252\275\203i\364\277,0\201\2741\026\341\277\273`.\324\352\232\372?\230\247e\241\323]\347?5W\034\250\352\216\022@WB\257\363\216\254\344\277\267R/gz&\242\277\245vW\210\375\335\202\277\032\244y%\0009\355\277\253\373\r\324\351 \004\300\347L\231\231\355[\361\277\321\363\236\307ao\350?i\227\326\356\2251\364?\356_E\271=\020\344\277\027\311\244\242{\002\337?7-\333\247\321M\333\277\232Y\233\334\031}\317?7-\333\247\321M\333\277-ws\211D\255\264\277j\211\364\246k\n\333?s\324\030W\305\"\335\277h\327\276k%\353\342\277\223\005oK[\003\263?\371\241\300\224\364\340\340?\225\315\311\006l\031\317\277l\362\332w\373\364\364?\253\373\r\324\351 \004\300\307+\004?\371\262\000@%,O\331\352\224\302\277u\021\312ZVf\340\277^\370\267\005Z3\346\277\242U\376\306\030\217\351\277n\025gpWT\306?\262\270\007\nJ;\342\277\211X\017\0163\304\326?f\312B\300\375;\264?\344c\203\302|\344\324\277\2316\017\344\275\035\376?s\217`\357\223\262\363?\345\343\262\310]q\347?\014\021\010\335\236B\000@\253\202.\376_A\323?(\301\311\203;@\330\277\347L\231\231\355[\361\277\037\240r\303\3231r\277J\272z3\3426\312\277M\n=v\001r\366?\360j\346\013F\262\375?\213<\354q\034\\\357\277u\021\312ZVf\340\277B\345|+@\025\374\277O3;\312\001\243\361?\001\247\212l\032n\332?\322\234m\025\201\023\321\277$5W\272O\366\314\277\227\004\t\257X\213\370?E\247\317`\316:f?\2027\"\232\366\316\325\277\253\373\r\324\351 \004\300b\304\022L\3256\360\277\013\251\276\276\177k\363\277\250\231\030\'\357\311\366?\271(\266C\3416\313?6\361*!\005?\374?\355\006\332\241{\215\362?\030\226\304\221\273\227\250?\300$\031.\340H\345\277\331\333\255\016\222\210\357?\212\224\277\224\377\322\365\277\032\244y%\0009\355\277\242U\376\306\030\217\351\277\016\313\313\356\352\010\002@\320A\310\230\335i\305?\253\373\r\324\351 \004\300H}2\2706\034\360?\2354p_\236\263\355?\004\263\315/%+\343?\262\270\007\nJ;\342\277\364\343G\226\243\004\340\277H\326\235\317\370\236\341\277\266\266h\205*\321\361\277\277^\217O\3130\352?Y&\214WxD\315\277\2143\344\220\267\372\344\2774R\006%M\027\355?<\316\230\025-\266\351\2777-\333\247\321M\333\277\262\270\007\nJ;\342\2778\217\0265\240t\265?\003\274\325\020\212\214\355?\032\244y%\0009\355\277u\275..6\232\371\277+\270 \257\230\370\302?>\236+Rkd\363?\200\\M\027r\230\347?\242U\376\306\030\217\351\277G\373\'Y6\202\270?\243\270r<\004\250\351?\317\301\230\222\374\334\342?VK\267\324\363\r\357\277\327\006K\347\261#\373?n\344\370/\321\315\333?\267R/gz&\242\277\220\344?\360\242A\254?\265\023\014\223\257\376\342\277\332\322\245--\'\345?\216\016\271\023<1\303\277\312\003 \224\253\000\342\277\267R/gz&\242\277\305\307Hlu\225\257\277l\025\010d\225:\321\277\227D\361+\350D\347\277h\322\351\302\361,\006@O\306\034\003\257\r\350?\201\253\016\335\314\236\337?d|\272\342\277\'\342\277\375\213n`Dd\370?s\324\030W\305\"\335\277\025\311E\226\271\350\311\277$\203\200\213\313\360\351\277\262[d\374\304\r\361\277\323\222\303\303\031\227\367?|\320\332M\206N\354\2778s\224\214\307\362\350\277*\007\203h1\345\345\277\303\377\355\260d\177\303\277\t\017j\255i\372\356\2778s\224\214\307\362\350\277\016\023=\204\356a\310\277\030^\300@\n\224\337\277.\"\237t\007\357\367?dh\0073/\025\332\2779$2\323.\006\306?\247\342\010\205\343\344\357\2775W\034\250\352\216\022@\361\3175\332P\330\262\277\337\3633\225\247\002\341\277\007\216\242\262\251a\321\277\377\264l\264D\225\363?\035\215\217\374p\260\371?>\343\343\271\234\324\334\277CX\"\201\315\302\220\277s\324\030W\305\"\335\277|\320\332M\206N\354\277\t\362\256\034t\206\334\277\365\274\342\263F\024\364?\264\306\020j\347\366{\277\226\265G\351\375\204\360\277\007]4r#\333\306\277\374\374\304\035Z\244\341?\2027\"\232\366\316\325\277\327\351\217V\274\257\370\277iC;\302ue\355?\346c\342\316>\376\311?8\230\036\026\005\326\277?\037\366u\315\000\233\343\277\303\271\223\3300\364\352?\034\315wy\000j\350\277PFL\t\220\232\312?\032\300\373\315\330\272\271?k\200\354\305\006\251\320?\201\3053\350\001\203\361\277\373\005\315\376\276\005\354?]\262\376 d\216\330\277\356{\307a\026\222\260?\206a\270\342\325\013\314\277\032\244y%\0009\355\277f\256\300\027%\272\347\277\204}\333~\354s\343\277\033\233qD\233\327\342\277\267(W7\037\035\326\277}P\nTg\333\336?\t\362\256\034t\206\334\277G\020\024\361\343\206\346?\347L\231\231\355[\361\277q\277\315\262U\004\352\2775W\034\250\352\216\022@?\201p\301u\360\360\277\307+\004?\371\262\000@\357\337t\277\036\235\326?\253\373\r\324\351 \004\300\2027\"\232\366\316\325\277\310\332!@\253\317\346\277s\324\030W\305\"\335\277\277\336_I\352\243\327\277\005%\274\341\031w\367\2776n\347\331\347\262\256?\342W@\377q\'\354\277\2143\344\220\267\372\344\277\360\211\246[\207\300\207\277\032\244y%\0009\355\277u\275..6\232\371\277Z\035\204v\023\343\302\277\351>\267Q\3034\350?B\203\t3\0311\340?\370\360\"N\215\315\303\277&\254~\337\313!\345\277o\270\256/<\340\223?\365F\274\013\217\035\340?\372\360\201ZO\347\330?t\313\020v`\301\322\277\340\021\207\032|\202\336\277<Xrmu\277\365\277o\033\331\313\373%\360?R\360\262K\216J\356\277E\231\354\313g[\336\277\373\205\235\370\335x\331\277x\212\302\\\316\217\271\277u\275..6\232\371\277\025\311E\226\271\350\311\277\342l,\227\037,\272\277\334\266\202\221\026\277\335\2773\346\211\316\374\234\342\277\000<G\376\346\345\265\277\217\277VZ\243D\340?\000\'[f9\341\347\277\024BV\031\201Q\226?\231m\357\177\350u\342\277\366\270\252\275\203i\364\277*\221\\\300y\356\361\277\2755\221\373\312\377\356?\017\223l\212\317\356\352\277$5W\272O\366\314\277\253\373\r\324\351 \004\300\253\373\r\324\351 \004\300\240#\370\221\263\374\343\277z\354\375\351\234\266\323??c\023\300}a\357?\342W@\377q\'\354\2776n\347\331\347\262\256?\300\313\255\026\036\306\363?i:3\341\020\004\343?\004Bwr\017\353\371?\216\016\271\023<1\303\277\006\371\206\024\033\320\320?]\262\376 d\216\330\277\301\375\263K\203X\371?\375K\206\343\264\252\331?\337|k|\355\360\335?\2027\"\232\366\316\325\277\347L\231\231\355[\361\277\007\216\242\262\251a\321\277\271n\020\034\025\302\343\277\242U\376\306\030\217\351\277\214\235I*8\247\001@\362:yH\204`\327?\037\266\215Pq\341\364?\300\336\276U\254\275\314?V\320\300A\232`\360?\372\242X\211\323\354\353\277\025\311E\226\271\350\311\277X\305\227\'B\"\004@X\345\013\346\t\177\363\277\271n\020\034\025\302\343\277\310\2329\303\033\026\370?\033[\211\307\013\036\364?\315Jqm\200\261\332\277\345\343\262\310]q\347?S\347\252j)\351\343\277\322y@)\347\315\364?\274\322\034\206\337\346\356\277*\007\203h1\345\345\277\265\023\014\223\257\376\342\277\223\005oK[\003\263?\032\244y%\0009\355\277u\021\312ZVf\340\277\205 8qgF\362\277\300$\031.\340H\345\2779$2\323.\006\306?\334\266\202\221\026\277\335\277\223\243\222\312N\366\315?\372\242X\211\323\354\353\277\355\006\332\241{\215\362?o\270\256/<\340\223?\032\244y%\0009\355\277\276\373\032\332\337\027\352\277TS\'\301yc\356?8\230\036\026\005\326\277?G\020\024\361\343\206\346?\',\256\345\254\256\327?\240#\370\221\263\374\343\2778\372\005\327z\342t?%:\220-\327\325\360?;\\\252c8j\365?\343\316g$\356R\324?}ngU_j\360?\305\377L\275&\231\330?\275\211,(\353\313\365?\032\244y%\0009\355\277\3756p\345\332\030\211?P\214\246\341\303%\343\277\240\317\\e\2230\375\277~\371\330\241\206\177\347\277\221\2433\276\214\334\330\277\316\265\264\333\2639\277?\213mZ\262\242\342\351?$5W\272O\366\314\277\030^\300@\n\224\337\277\353g\265\245\303e\343?WB\257\363\216\254\344\277\316Ai\214\033P\320\277\247\'*u\372}\322?p?\236\254tw\307\277\035\215\217\374p\260\371?\261\301\017\353\256\234\354\277\264\215j1*\240\366\277\030\343\311\255\260\346\360\277\212\224\277\224\377\322\365\277\263\315R\256\271Y\325\277\271(\266C\3416\313?My\315\r\216\353\253\277*\301(\220\375Y\315?\215\344\201\327\036\016\302?\341\345QM}\333\367?\032\244y%\0009\355\277U\031\261\237\216{\351\277E\321\360\034\031_\247?s\324\030W\305\"\335\277\023\256\210\226\245\370\374?t\213(\371\320\007\364\277\2027\"\232\366\316\325\277^\262]-&\250\315?7-\333\247\321M\333\277\301\214bL\377\037\002\300\253\373\r\324\351 \004\300u\021\312ZVf\340\277,+\254\023\376W\004@\263\326Z\217\036\273\337\277w&\025\377\305\204\323\277\217\277VZ\243D\340?$5W\272O\366\314\277\032\300\373\315\330\272\271?\315Jqm\200\261\332\277E\231\354\313g[\336\277\360\364\277c\216\273\351?\2143\344\220\267\372\344\277#\021\222\331\326\244\365?\327\306bj\"j\334?*\007\203h1\345\345\277\000X\311\246\277g\342?\024Q\345\210 \313\353? v\245\323\341\'\326? (|\002f-\351\277z\354\375\351\234\266\323?Iy\372\301sq\360\277\253\373\r\324\351 \004\300\"QzVf^\344\277\340\021\207\032|\202\336\277s\324\030W\305\"\335\277s\324\030W\305\"\335\277i\227\326\356\2251\364?E\247\317`\316:f?\311\014(u\020b\354\277tTH]\246\257\357?u\021\312ZVf\340\277\006\227\252\223\016\303\333\277\2143\344\220\267\372\344\277\032\244y%\0009\355\277\357\342-\355\360\205\003@\340\021\207\032|\202\336\277\343\327o\005S\264\336?\244~\374\032\031\300\344\277LF\216\360\013g\260\277O\306\034\003\257\r\350?\2143\344\220\267\372\344\277\266\266h\205*\321\361\277\304\260\213\367\313\222\340?\330\375B\006M\302\360?\357\002\242\253\270\342\362\277\370\360\"N\215\315\303\277\206\222&#\\\222\326\277\222\267\346m\035\357\340\277\336\030\276\036\345\345\267?\362\002u\367\322\\\256\277s\324\030W\305\"\335\277\r\257\217&\346V\322?]\262\376 d\216\330\277\r\010\373=\250\331\363?\030^\300@\n\224\337\277\377\364T1\324N\342\277{\236\324\030!\274\346\277\345\343\262\310]q\347?\021\355\330\036V\246\340?\360\364\277c\216\273\351?\2143\344\220\267\372\344\277\017\223l\212\317\356\352\277l\362\332w\373\364\364?\231\024\204h&\363\360?\216\016\271\023<1\303\277b\304\022L\3256\360\277\202\245\277):&\002@\201\"\327\365\206\260\342\277\002\031y\036\017\272\376?%,O\331\352\224\302\277\356\031\353\340\t\205\313?=N\310\033\016C\334?\24602V_\337\334?\177\322s\277)\217\373?\232Y\233\334\031}\317?\300\313\255\026\036\306\363?\263\234\344m3\323\312\277$f\305\372\325|\327\277?a\374\002\256\223\001@\342W@\377q\'\354\277\217\277VZ\243D\340?#\333S\256\256g\360\277\253\373\r\324\351 \004\300@)\235\236\222y\352\277\220\016\030 \376J\330?fn\330\232\225\000\371?~j/_\234\277\360\277\360\211\246[\207\300\207\277\037\266\215Pq\341\364?\370\360\"N\215\315\303\277\220\344?\360\242A\254?\337\3633\225\247\002\341\277\271(\266C\3416\313?\024\221\315\005\260\204\372\277\266\266h\205*\321\361\277V\320\300A\232`\360?\203\267Q\240\327[\350?\266\223;\231\220\213\325?s\324\030W\305\"\335\277E\247\317`\316:f?\006\371\206\024\033\320\320?\356\031\353\340\t\205\313?\013T\352\251B\255\266?\214\337Hd\227.\376\277\360\364\277c\216\273\351?8s\224\214\307\362\350\277\037\240r\303\3231r\277iC;\302ue\355?o\270\256/<\340\223?\232\237\365\264M\010\350\2775\242i[\2528\364\277\347L\231\231\355[\361\277\263\326Z\217\036\273\337\277\214\363\373\023(A\366?\232\331k\3268\360\354?pM\337\000a\270\365?\031U\270_\2452\325\277\024BV\031\201Q\226?\2027\"\232\366\316\325\277\356\031\353\340\t\205\313?\341\345QM}\333\367?8s\224\214\307\362\350\277\022\237\257M\332\253\323\277\030\343\311\255\260\346\360\277\021\274j\336\317\037\346\277\027\311\244\242{\002\337?\347iT*\343\317\363?\261\335\221\223\207\036\271?\212\224\277\224\377\322\365\277\331!\010\347\305\023\310\277tTH]\246\257\357?\025\241H\277}\354\362\277N\315\r\'D\241\004@(\301\311\203;@\330\277E\'\376\031s\017\372\277S\347\252j)\351\343\277\312\276\376\243\224g\317\277\315Jqm\200\261\332\277)\225\224\266<\231\361?\004Bwr\017\353\371?\360H[\220\256\207\360?^\370\267\005Z3\346\277\310\332!@\253\317\346\277\013T\352\251B\255\266?\264M\202\264\232\346\347?\252\2136\337\304\242\335?\305\307Hlu\225\257\277\034\033\241J|d\325?+\270 \257\230\370\302?\244~\374\032\031\300\344\277\241\217t\350\003w\356?\223\032[\343\010\010\341?u\021\312ZVf\340\277\335\255z\260\261]\323\277s\324\030W\305\"\335\277f\256\300\027%\272\347\277\036\377}\256e\374\355\277\277\324\265\367\202\'\376?E;\261\311\003\"\362?\000\'[f9\341\347\277b\304\022L\3256\360\277 v\245\323\341\'\326?@Z\013\337\030\000\345?9$2\323.\006\306?\366\306\353\021p\252\302?\030\300\234\301\026\241\324?\322\234m\025\201\023\321\277\331!\010\347\305\023\310\277\253\373\r\324\351 \004\300\032\244y%\0009\355\277\337\3633\225\247\002\341\2778$\323\306l\354\320\277\216\027\301\364\240\222\315\277\024\003\274\267\244\320\336\277\263\315R\256\271Y\325\277\343N8\036\r\306\341\277y\365\005\313\001\030\336?\253\373\r\324\351 \004\300\267R/gz&\242\277\310\332!@\253\317\346\277LF\216\360\013g\260\2775W\034\250\352\216\022@E\231\354\313g[\336\277\267R/gz&\242\277E\247\317`\316:f?\265\234Cz\365\354\337?\364\343G\226\243\004\340\277o\033\331\313\373%\360?[\235\263|\364o\345\277-\200{j\251\016\277\277\201\"\327\365\206\260\342\277"
      }
    }
  }
}
node {
  name: "tensors/component_20"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1168
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1168
          }
        }
        tensor_content: "\000\000\000\000\000Pc@\000\000\000\000\000Pt@\000\000\000\000\000\300\\@\000\000\000\000\000\340c@\000\000\000\000\000\270s@\000\000\000\000\000\340R@\000\000\000\000\000xs@\000\000\000\000\000@b@\000\000\000\000\000 U@\000\000\000\000\000\360`@\000\000\000\000\000 b@\000\000\000\000\000@`@\000\000\000\000\000@T@\000\000\000\000\000\300j@\000\000\000\000\000\240f@\000\000\000\000\000\320`@\000\000\000\000\000\360f@\000\000\000\000\000\340`@\232\231\231\231\231\231]@\000\000\000\000\000@l@\000\000\000\000\000`c@\000\000\000\000\000@j@\000\000\000\000\000\260e@\000\000\000\000\000 `@\000\000\000\000\000\000h@\315\314\314\314\314<c@?5^\272I\244f@\000\000\000\000\000\240a@\000\000\000\000\000\240f@\315\314\314\314\314\034j@\000\000\000\000\000\300_@\000\000\000\000\000\300q@\000\000\000\000\000\020i@\000\000\000\000\000\370`@\000\000\000\000\000\340o@\000\000\000\000\000\200a@\000\000\000\000\000@a@\000\000\000\000\000pk@\000\000\000\000\000`s@\000\000\000\000\000@X@\000\000\000\000\000\240\\@\000\000\000\000\000\240i@\000\000\000\000\000\340]@L7\211A`\251o@\000\000\000\000\000\020`@\000\000\000\000\000`]@\000\000\000\000\000\300\\@\000\000\000\000\000\300_@33333?|@\000\000\000\000\000\000b@\000\000\000\000\000\300]@\000\000\000\000\000\200h@\000\000\000\000\000\300\\@\000\000\000\000\000\360q@\000\000\000\000\000\020b@\000\000\000\000\000@p@\000\000\000\000\000\240j@\000\000\000\000\000\340e@\000\000\000\000\000\300Z@\000\000\000\000\000\340Z@\000\000\000\000\000 Q@\000\000\000\000\000@c@\000\000\000\000\000\320s@\'1\010\254\034\202p@\305 \260rh\267q@\000\000\000\000\000`n@\000\000\000\000\000@[@\000\000\000\000\000\020s@\000\000\000\000\000`W@\000\000\000\000\000\000f@\364\375\324x\351\266]@\000\000\000\000\000\300`@\215\227n\022\203@[@\000\000\000\000\000`W@\307K7\211A\035\203@\000\000\000\000\000\240e@\000\000\000\000\000\300u@\000\000\000\000\000Pu@\000\000\000\000\000\240a@\232\231\231\231\2319_@\000\000\000\000\000\200]@\000\000\000\000\000\300P@\000\000\000\000\000@\\@33333\323V@\000\000\000\000\000\260b@\000\000\000\000\000\240`@\000\000\000\000\000\240p@\000\000\000\000\000\300g@\315\314\314\314\314|c@\037\205\353Q\270zc@\000\000\000\000\0000c@\000\000\000\000\000\000c@\000\000\000\000\000 _@\000\000\000\000\000\320r@\000\000\000\000\000\020a@H\341z\024\256?e@\000\000\000\000\000\240i@\315\314\314\314\314\374f@\315\314\314\314\314\234i@\000\000\000\000\000@p@\000\000\000\000\000pd@\315\314\314\314\314\034l@\000\000\000\000\000\200n@\000\000\000\000\000\200`@\000\000\000\000\000@h@\000\000\000\000\000\220c@\000\000\000\000\000\200c@\000\000\000\000\0000q@\000\000\000\000\000 b@\000\000\000\000\000\340`@\000\000\000\000\000\000N@\000\000\000\000\000\000_@\000\000\000\000\000\300_@\000\000\000\000\0000a@\000\000\000\000\000\260j@\000\000\000\000\000\300]@\232\231\231\231\231\371Z@\000\000\000\000\000\300^@\000\000\000\000\000\000\\@\000\000\000\000\000\300q@\000\000\000\000\000\240`@\000\000\000\000\000\240b@\000\000\000\000\000 e@\000\000\000\000\000\340i@\000\000\000\000\000\340e@\000\000\000\000\000 a@\000\000\000\000\000\200m@\000\000\000\000\000\340S@\000\000\000\000\000\000b@\315\314\314\314\314\\d@\315\314\314\314\314<g@fffff\036w@\315\314\314\314\314\274h@\000\000\000\000\000\000Z@+\207\026\331\316\247A@\000\000\000\000\000\030u@b\020X9\264\364v@\000\000\000\000\000H`@\000\000\000\000\000\300l@\000\000\000\000\000\230\207@\000\000\000\000\0000y@\000\000\000\000\000\200`@\000\000\000\000\000@f@\000\000\000\000\000\020a@\000\000\000\000\000 b@\000\000\000\000\000\300^@\000\000\000\000\000@o@33333cg@\315\314\314\314\314\274`@\000\000\000\000\000\300P@\000\000\000\000\0000a@\000\000\000\000\000`c@\207\026\331\316\367\023i@\232\231\231\231\231Ic@\000\000\000\000\000\300V@\000\000\000\000\000\000a@L7\211A`=[@\000\000\000\000\000\200a@\000\000\000\000\000\200U@\315\314\314\314\314l`@\315\314\314\314\314|f@\000\000\000\000\000\000b@\254\034Zd;Qr@\000\000\000\000\000\020b@\000\000\000\000\000\240]@\000\000\000\000\000\240a@\000\000\000\000\000\340m@\000\000\000\000\000@q@\317\367S\343\245d\201@\315\314\314\314\314\214n@\000\000\000\000\000\200v@\315\314\314\314\314\314Y@\000\000\000\000\000\200Y@\000\000\000\000\000\340b@\000\000\000\000\000\320q@\347\373\251\361\322\315`@\000\000\000\000\000@\\@\000\000\000\000\000pg@\000\000\000\000\000`_@\000\000\000\000\0000f@\315\314\314\314\314|f@\311v\276\237\032\377K@\000\000\000\000\000\220`@\000\000\000\000\000\340`@\000\000\000\000\000\340o@\000\000\000\000\000\200a@\000\000\000\000\000\360p@\321\"\333\371~\322n@\000\000\000\000\000Pi@\000\000\000\000\000\300R@\000\000\000\000\000\240^@\037\205\353Q\270\036[@\000\000\000\000\000\000d@\000\000\000\000\000`e@\000\000\000\000\000\200h@\000\000\000\000\000 l@\000\000\000\000\000\240h@\000\000\000\000\000\000D@\000\000\000\000\000\220e@\315\314\314\314\314\\c@\000\000\000\000\000\200q@\000\000\000\000\000\340e@\000\000\000\000\000`b@\000\000\000\000\000\260s@\000\000\000\000\000 g@\000\000\000\000\000\360`@\000\000\000\000\000\360m@\000\000\000\000\000`a@\000\000\000\000\000\200a@\000\000\000\000\000\200[@\000\000\000\000\000 l@\000\000\000\000\000\360a@fffff\036`@\000\000\000\000\000\220e@\000\000\000\000\0000n@\000\000\000\000\000hp@\337O\215\227nFh@\000\000\000\000\000\340a@\000\000\000\000\000@`@\000\000\000\000\000\200_@\000\000\000\000\000\320a@\000\000\000\000\000\300o@\000\000\000\000\0000k@\000\000\000\000\000\240P@\000\000\000\000\000 i@\000\000\000\000\000`c@\232\231\231\231\231\031Q@\000\000\000\000\000 P@\000\000\000\000\000\240e@\213l\347\373\251\261Y@\232\231\231\231\2319U@33333\263d@\000\000\000\000\000\000^@\000\000\000\000\000\340`@\000\000\000\000\000\200k@fffff2c@\315\314\314\314\314lh@\000\000\000\000\000`b@\000\000\000\000\000Pq@\000\000\000\000\000\340a@\232\231\231\231\231yZ@\000\000\000\000\000@n@\000\000\000\000\000Ph@\024\256G\341zl{@\000\000\000\000\000 g@\000\000\000\000\000\340Z@\000\000\000\000\000\240d@\000\000\000\000\000\000f@\315\314\314\314\314<`@\000\000\000\000\000\300\\@\024\256G\341z\004h@\000\000\000\000\000\000d@\000\000\000\000\000 b@\000\000\000\000\000\200U@\000\000\000\000\000\300c@\000\000\000\000\000\340_@\000\000\000\000\000\300\\@\000\000\000\000\000\340]@\315\314\314\314\314\374e@\000\000\000\000\000\000n@\000\000\000\000\000\260x@\000\000\000\000\000\240d@fffff\006`@\000\000\000\000\0000q@\313\241E\266\363}s@\000\000\000\000\000\300j@\000\000\000\000\0000c@\000\000\000\000\000\000b@\000\000\000\000\000\300\\@\000\000\000\000\000\200f@\000\000\000\000\000\020}@\000\000\000\000\000\200f@\000\000\000\000\000\240o@\000\000\000\000\000@U@33333sY@\000\000\000\000\000\220b@\000\000\000\000\0000a@\345\320\"\333\371\340s@\000\000\000\000\000\340a@\000\000\000\000\000\200a@\000\000\000\000\000\020h@\000\000\000\000\000\000W@\000\000\000\000\000\240h@\000\000\000\000\000`[@\000\000\000\000\000\220r@\000\000\000\000\0008g@\000\000\000\000\000\300l@\240\032/\335$^V@\000\000\000\000\000@p@\000\000\000\000\000\240g@\000\000\000\000\000\000[@\000\000\000\000\000 _@\000\000\000\000\000 b@\000\000\000\000\000@f@\000\000\000\000\000@U@\000\000\000\000\000\340e@\000\000\000\000\000\300_@\315\314\314\314\314\274b@\000\000\000\000\000\300e@\000\000\000\000\000`_@\000\000\000\000\000\360e@\000\000\000\000\000 l@\000\000\000\000\000 `@fffff\376c@\000\000\000\000\000\240c@\000\000\000\000\000\240i@\000\000\000\000\000\200a@\000\000\000\000\000\000i@\000\000\000\000\000 k@\000\000\000\000\000@_@\000\000\000\000\000\360c@\000\000\000\000\000\000g@\000\000\000\000\000 X@\000\000\000\000\000\000i@\000\000\000\000\000\240b@\315\314\314\314\314\\f@\315\314\314\314\314\034g@fffff\226d@\000\000\000\000\000\360t@\000\000\000\000\000\340U@=\n\327\243p%m@33333\253b@\000\000\000\000\000\240`@\000\000\000\000\000\200X@\000\000\000\000\000\360i@\000\000\000\000\000\300b@\315\314\314\314\314\334`@\000\000\000\000\000xg@\000\000\000\000\000\260b@33333\003]@\020X9\264\310*c@\000\000\000\000\000\240d@\000\000\000\000\000P`@\232\231\231\231\231\311i@\000\000\000\000\000@b@\000\000\000\000\000\240_@\000\000\000\000\000`a@\000\000\000\000\000@\\@\000\000\000\000\000\300S@\000\000\000\000\000\300f@\000\000\000\000\000\200g@\000\000\000\000\000 `@\000\000\000\000\000\000d@\000\000\000\000\000\300e@\037\205\353Q\270fk@\000\000\000\000\000`s@\000\000\000\000\000`w@\000\000\000\000\000\000Y@\000\000\000\000\000@o@\000\000\000\000\000 b@\000\000\000\000\000Pt@\000\000\000\000\000\300w@\000\000\000\000\0000q@\000\000\000\000\000\200f@33333\253n@\000\000\000\000\000\360b@\000\000\000\000\000\320`@\000\000\000\000\000\200W@\000\000\000\000\000\000k@\000\000\000\000\000\340u@\000\000\000\000\000`h@\000\000\000\000\000\000^@\000\000\000\000\000\220l@\000\000\000\000\000\000o@\000\000\000\000\000\000_@\000\000\000\000\000\340g@\000\000\000\000\000\240f@\000\000\000\000\000@Z@\315\314\314\314\314|a@\315\314\314\314\314\274c@\000\000\000\000\000P`@\315\314\314\314\314\214e@\000\000\000\000\000@`@\000\000\000\000\000@f@\000\000\000\000\0000d@\232\231\231\231\231\371]@\000\000\000\000\000\340m@\000\000\000\000\000\300g@\232\231\231\231\231YU@\000\000\000\000\000\240i@\000\000\000\000\000\300`@\000\000\000\000\000\000e@\000\000\000\000\000 g@\000\000\000\000\000\220f@\000\000\000\000\000\000c@\000\000\000\000\000\340j@\000\000\000\000\000 c@\000\000\000\000\000\200Z@\000\000\000\000\000@u@\000\000\000\000\000\340c@\000\000\000\000\000\000^@\000\000\000\000\000\300\\@\000\000\000\000\000\000`@^\272I\014\002\255s@\000\000\000\000\000``@\031\004V\016-\344{@\000\000\000\000\000\340_@\000\000\000\000\000`c@\000\000\000\000\0000f@\000\000\000\000\000\020`@\000\000\000\000\000\000f@\000\000\000\000\000 y@\000\000\000\000\000@`@\000\000\000\000\000 b@\000\000\000\000\000`b@\000\000\000\000\000\300\\@\000\000\000\000\000\240g@\000\000\000\000\000\340a@\000\000\000\000\000\000n@\000\000\000\000\000\300l@\000\000\000\000\000\300g@\000\000\000\000\000\240j@\000\000\000\000\000\240T@fffff.q@\000\000\000\000\000`c@\000\000\000\000\000pz@\000\000\000\000\000\020`@\000\000\000\000\000\360t@\000\000\000\000\000`p@\000\000\000\000\0000`@\000\000\000\000\000\320k@\000\000\000\000\000\340p@\000\000\000\000\000\360i@\000\000\000\000\000\340e@\000\000\000\000\000\300m@\315\314\314\314\314\374`@\000\000\000\000\000\000l@\000\000\000\000\000@e@\000\000\000\000\000 g@\000\000\000\000\000pp@\033/\335$\0061O@\000\000\000\000\000\300b@\000\000\000\000\000`e@\000\000\000\000\000`a@33333\213_@fffff\276i@\000\000\000\000\000\200[@\000\000\000\000\000P~@\000\000\000\000\000\300e@\000\000\000\000\000 b@fffff\346j@\000\000\000\000\000\000t@\000\000\000\000\000\200j@\000\000\000\000\000\020e@\000\000\000\000\000\240g@\000\000\000\000\000\200a@\000\000\000\000\000pg@\315\314\314\314\314\334o@\000\000\000\000\000\340`@\000\000\000\000\000\340b@\000\000\000\000\000 \\@\000\000\000\000\000\000g@\000\000\000\000\000\240h@\000\000\000\000\0000d@\000\000\000\000\000@U@\000\000\000\000\000`i@\000\000\000\000\000Pt@\000\000\000\000\000\220s@\000\000\000\000\000\240m@\000\000\000\000\000\220f@\000\000\000\000\000 a@fffff\226V@\315\314\314\314\314\334b@\000\000\000\000\000\300j@\000\000\000\000\000`^@\000\000\000\000\000H\207@\000\000\000\000\000\300g@\000\000\000\000\000\240f@\000\000\000\000\000\000N@\000\000\000\000\000\340m@\000\000\000\000\000\240]@\000\000\000\000\000`[@\000\000\000\000\000\200[@\000\000\000\000\000`Z@\315\314\314\314\314\374h@fffff\376p@\000\000\000\000\000p`@\000\000\000\000\000\340`@\000\000\000\000\000\300]@\000\000\000\000\000\340j@\000\000\000\000\000\260`@\000\000\000\000\000 e@\000\000\000\000\0000a@\000\000\000\000\000`b@\000\000\000\000\000\000m@\000\000\000\000\000\200c@\000\000\000\000\000@e@\000\000\000\000\000\240T@\000\000\000\000\000`c@R\270\036\205\353\215z@\000\000\000\000\000\220m@\000\000\000\000\000@k@\000\000\000\000\000\240j@\000\000\000\000\000\210s@\000\000\000\000\000`g@\000\000\000\000\000\240f@\000\000\000\000\000 m@\000\000\000\000\000\300W@\000\000\000\000\000\000J@\000\000\000\000\000\240f@\010\254\034Zd]\177@\000\000\000\000\000\000V@\000\000\000\000\000\000\\@\000\000\000\000\000\200a@\000\000\000\000\000\340d@\000\000\000\000\000(b@\000\000\000\000\000@j@\000\000\000\000\000\260c@\315\314\314\314\314\234j@\000\000\000\000\000`]@\000\000\000\000\0000g@\000\000\000\000\000@U@\000\000\000\000\000 b@\000\000\000\000\000\360o@\000\000\000\000\000\000_@\315\314\314\314\314\334`@\000\000\000\000\000\320l@\000\000\000\000\000\200[@\217\302\365(\\\'m@\000\000\000\000\000\240c@33333\323a@\000\000\000\000\000@c@\341z\024\256Guf@\000\000\000\000\000\300V@\315\314\314\314\314\274h@\000\000\000\000\000\240i@\000\000\000\000\000 d@\315\314\314\314\314\274b@\000\000\000\000\000\340i@\000\000\000\000\000\340a@\000\000\000\000\000\220q@\000\000\000\000\000Hw@\000\000\000\000\000`m@\000\000\000\000\000\320j@\000\000\000\000\000@p@fffff\266b@\000\000\000\000\000``@\000\000\000\000\000\000b@\000\000\000\000\000\340j@\000\000\000\000\000\000f@\000\000\000\000\000\000b@\000\000\000\000\000`c@\000\000\000\000\000 r@\000\000\000\000\000\300l@\000\000\000\000\000 r@fffff\216t@\000\000\000\000\000\300a@\000\000\000\000\000\360l@\000\000\000\000\000@d@\000\000\000\000\000\240`@\000\000\000\000\000$x@\000\000\000\000\000\240[@\000\000\000\000\000<u@\000\000\000\000\000\300U@\000\000\000\000\000\320c@\000\000\000\000\000@e@\000\000\000\000\000\200K@\252\361\322Mb\\a@\000\000\000\000\000@e@\000\000\000\000\000\000n@\315\314\314\314\314lb@\000\000\000\000\000\020r@\000\000\000\000\000\340`@\000\000\000\000\000\200a@\246\233\304 \260\322t@\000\000\000\000\000Pb@\000\000\000\000\000 v@\000\000\000\000\000\340a@fffff\236p@\000\000\000\000\000@b@\000\000\000\000\000\240d@\000\000\000\000\000\200T@\000\000\000\000\000\250j@\000\000\000\000\000\300S@\000\000\000\000\000\340a@\000\000\000\000\000P`@\315\314\314\314\314\374m@\000\000\000\000\0000f@\024\256G\341zdp@\000\000\000\000\000`l@\000\000\000\000\000\360c@\000\000\000\000\000 k@\000\000\000\000\000\240y@\000\000\000\000\000\200b@\000\000\000\000\000@f@\315\314\314\314\314\\d@\000\000\000\000\000pg@\000\000\000\000\000\000d@\000\000\000\000\000\200j@\000\000\000\000\000`a@\000\000\000\000\000\000[@\000\000\000\000\000\000U@\000\000\000\000\000\200e@\232\231\231\231\2319Z@\307K7\211A\240\\@\000\000\000\000\000\200Z@\315\314\314\314\314|f@\000\000\000\000\000\200Y@\000\000\000\000\000\300g@\000\000\000\000\000@u@\000\000\000\000\000\200f@\000\000\000\000\000\300i@\000\000\000\000\000p`@\000\000\000\000\000\300b@\000\000\000\000\000@g@\232\231\231\231\2319]@\315\314\314\314\314\274r@\000\000\000\000\000\200g@\000\000\000\000\000\340a@\000\000\000\000\000Pa@\000\000\000\000\000@p@\000\000\000\000\000\300]@\000\000\000\000\000\360d@\000\000\000\000\000`U@\000\000\000\000\0000j@\315\314\314\314\314\334i@\000\000\000\000\000\000\\@\000\000\000\000\000 h@\000\000\000\000\000\260h@\000\000\000\000\000`a@\000\000\000\000\000\360]@\000\000\000\000\000\320h@\000\000\000\000\000\340`@\000\000\000\000\000\360k@\000\000\000\000\0000s@\000\000\000\000\000\200`@\000\000\000\000\000\000e@\000\000\000\000\000\360q@\000\000\000\000\000\240h@fffff\316`@fffff\266`@\000\000\000\000\000 s@\000\000\000\000\000\200f@33333\023m@\315\314\314\314\314\374e@\000\000\000\000\000@f@\000\000\000\000\000`l@\315\314\314\314\314\244d@\000\000\000\000\000\360k@\000\000\000\000\000\360i@\315\314\314\314\314\004p@\211A`\345\320\226w@\000\000\000\000\000\020l@fffff6o@\000\000\000\000\000\000Y@X9\264\310vR{@\000\000\000\000\000\220f@\000\000\000\000\000@^@\000\000\000\000\000\200c@\000\000\000\000\000\200f@\000\000\000\000\000\300Z@\000\000\000\000\000\230w@\000\000\000\000\000 g@\000\000\000\000\000\340e@\000\000\000\000\000`h@fffff\376s@\000\000\000\000\000\300g@\000\000\000\000\000\030g@\000\000\000\000\000`[@\000\000\000\000\000 `@\000\000\000\000\000\200b@\315\314\314\314\314\334c@fffff\246C@\000\000\000\000\000\340b@H\341z\024\256Wf@\000\000\000\000\000\000_@\000\000\000\000\000\300l@\000\000\000\000\000 b@\000\000\000\000\000`_@\000\000\000\000\000\300c@\000\000\000\000\000pd@\000\000\000\000\000 `@\000\000\000\000\000Ph@\000\000\000\000\000\300_@\000\000\000\000\000\220l@\000\000\000\000\000\200q@\000\000\000\000\000@m@\000\000\000\000\000\340e@\000\000\000\000\000 h@\000\000\000\000\000\000^@P\215\227n\022\263x@\315\314\314\314\314\034a@\000\000\000\000\000\000b@\000\000\000\000\000\360e@\000\000\000\000\000\200[@\315\314\314\314\314\374o@\000\000\000\000\000\200[@\000\000\000\000\000\240l@\232\231\231\231\2319_@\000\000\000\000\000\200d@\000\000\000\000\000\020p@\000\000\000\000\000\340m@\000\000\000\000\000\000i@\000\000\000\000\000`e@\000\000\000\000\000\320q@\000\000\000\000\0000h@\276\237\032/\335\004b@\000\000\000\000\000@o@\000\000\000\000\000\000o@\000\000\000\000\000\340r@\000\000\000\000\000`t@\000\000\000\000\000\340_@\000\000\000\000\000\200f@\000\000\000\000\000`V@\000\000\000\000\000\300g@\000\000\000\000\000\240g@\000\000\000\000\000\000h@\000\000\000\000\000\260W@\000\000\000\000\000\000t@\000\000\000\000\000\000`@\000\000\000\000\000\340`@\004V\016-\262\275]@\000\000\000\000\000@T@\000\000\000\000\000\000V@\000\000\000\000\000Pt@fffff~a@\000\000\000\000\000`b@\000\000\000\000\000\240i@\000\000\000\000\000\300_@\000\000\000\000\000\300e@\000\000\000\000\000\340g@\000\000\000\000\000`V@\000\000\000\000\000@\\@\000\000\000\000\000pf@fffff\036s@\000\000\000\000\000`c@\000\000\000\000\000@W@\000\000\000\000\000\030p@\000\000\000\000\000Pq@\000\000\000\000\000\200t@\000\000\000\000\000\240d@\000\000\000\000\0000`@\000\000\000\000\000\230i@\000\000\000\000\000\340g@\000\000\000\000\000\260d@\000\000\000\000\000\240e@\000\000\000\000\000\340]@\000\000\000\000\000\340_@\000\000\000\000\000\360c@\315\314\314\314\314<c@\315\314\314\314\314<`@\000\000\000\000\000\000c@\000\000\000\000\000 g@\000\000\000\000\000\300_@\000\000\000\000\000\020e@q=\n\327\243\334p@\000\000\000\000\000\240n@\000\000\000\000\000\000p@\000\000\000\000\000\340`@\000\000\000\000\000\300U@!\260rh\221\371m@\354Q\270\036\205\017f@\000\000\000\000\000\000]@5^\272I\014.w@\000\000\000\000\000\000f@\000\000\000\000\000\000c@\315\314\314\314\314\274b@\000\000\000\000\000\000e@\000\000\000\000\000@p@\000\000\000\000\000\300j@\000\000\000\000\0000a@\000\000\000\000\0000e@\000\000\000\000\000\240]@\315\314\314\314\314\354b@\315\314\314\314\314\274e@\000\000\000\000\000\300p@\000\000\000\000\000Pi@\000\000\000\000\000 g@\315\314\314\314\314\334j@\000\000\000\000\000\340s@\000\000\000\000\000@X@\000\000\000\000\000@`@\232\231\231\231\2319Z@\000\000\000\000\000\300^@\000\000\000\000\000\000t@\000\000\000\000\000\300_@\000\000\000\000\000 S@\000\000\000\000\000\240`@\000\000\000\000\000\200]@\000\000\000\000\000\000^@\341z\024\256Gqf@\000\000\000\000\000\300l@\000\000\000\000\000\200a@\000\000\000\000\000\240z@\000\000\000\000\000@]@\000\000\000\000\000`m@\000\000\000\000\000\000[@\000\000\000\000\000\000d@\000\000\000\000\000\000b@)\\\217\302\365vp@\000\000\000\000\000\340`@\000\000\000\000\000hp@\000\000\000\000\000@_@fffffVl@\000\000\000\000\000\340`@\000\000\000\000\000\300g@\000\000\000\000\000\200^@\000\000\000\000\000pg@\000\000\000\000\000\000q@\000\000\000\000\000\220e@\000\000\000\000\000`_@\000\000\000\000\000\340^@\343\245\233\304 <h@\000\000\000\000\000\300U@33333\003g@\315\314\314\314\314\334f@\000\000\000\000\000 U@\000\000\000\000\000\000i@\000\000\000\000\000\340f@\000\000\000\000\0000h@\000\000\000\000\000``@\000\000\000\000\000\300`@\000\000\000\000\000\260d@\000\000\000\000\000@_@\000\000\000\000\000\200S@33333sf@\000\000\000\000\000@`@\000\000\000\000\000\200o@\000\000\000\000\000\360l@\000\000\000\000\000\000T@\000\000\000\000\000@_@\000\000\000\000\000pk@\000\000\000\000\000@f@\000\000\000\000\000\300d@\000\000\000\000\000\000f@\232\231\231\231\231+q@\315\314\314\314\314\374d@\000\000\000\000\000\000d@\000\000\000\000\000\000a@\000\000\000\000\000X\201@\000\000\000\000\000\000`@\000\000\000\000\000\210\203@\000\000\000\000\000 r@\000\000\000\000\000\200T@\000\000\000\000\000@_@\000\000\000\000\000Pg@\000\000\000\000\000\300[@\004V\016-\262\225o@\000\000\000\000\000\200[@\000\000\000\000\000\240a@\000\000\000\000\000\000]@\315\314\314\314\314\374d@\000\000\000\000\000\200m@fffff\346Y@\315\314\314\314\314|d@\000\000\000\000\000@\\@\303\365(\\\217Ro@\000\000\000\000\000\200k@\000\000\000\000\000\200_@\000\000\000\000\000pa@\000\000\000\000\000\200q@q=\n\327\243\374c@\232\231\231\231\231\tj@\000\000\000\000\000\000_@\000\000\000\000\000`b@\000\000\000\000\000@]@\000\000\000\000\000\260c@\000\000\000\000\000@T@\000\000\000\000\000\020j@\000\000\000\000\000\200c@\000\000\000\000\000 g@\000\000\000\000\000\360d@\000\000\000\000\000\220`@\315\314\314\314\314<e@\000\000\000\000\000\220h@\000\000\000\000\000@W@\000\000\000\000\000 f@\000\000\000\000\000\360d@\000\000\000\000\000\300e@\000\000\000\000\000\340m@\000\000\000\000\000\200[@\000\000\000\000\000 U@\000\000\000\000\000@n@\000\000\000\000\000\340e@\000\000\000\000\000\300e@\000\000\000\000\000 `@\232\231\231\231\231y[@\000\000\000\000\000\200V@33333\003i@\022\203\300\312\241\367r@\315\314\314\314\314\274b@\000\000\000\000\000`a@\000\000\000\000\000\200l@\000\000\000\000\000`m@\000\000\000\000\000 l@X9\264\310v7\202@\000\000\000\000\000\200n@\000\000\000\000\000\240c@\000\000\000\000\000\200[@\000\000\000\000\000@t@\000\000\000\000\000\360p@\000\000\000\000\000\000d@\000\000\000\000\000\000^@33333\363B@\000\000\000\000\000\240m@\000\000\000\000\000\300g@33333sA@\000\000\000\000\000\260s@\000\000\000\000\000Pi@\000\000\000\000\000\340j@\000\000\000\000\000\000c@\000\000\000\000\000\360i@\000\000\000\000\000\300c@\000\000\000\000\000@`@\000\000\000\000\000\200n@\000\000\000\000\000\300S@\000\000\000\000\000\200K@\000\000\000\000\000\200l@D\213l\347\373Yt@\000\000\000\000\000\340g@\000\000\000\000\000`d@\000\000\000\000\000`j@\000\000\000\000\000\210x@\000\000\000\000\000\340a@\000\000\000\000\000\000V@\000\000\000\000\000\240`@\315\314\314\314\314\034b@\000\000\000\000\000\340V@\000\000\000\000\000 a@\000\000\000\000\000 X@\000\000\000\000\000\240b@\315\314\314\314\314\334e@\000\000\000\000\000\020k@\000\000\000\000\000\320k@\000\000\000\000\0008d@\000\000\000\000\000\200k@\000\000\000\000\000\330b@\000\000\000\000\000\000`@\315\314\314\314\314|f@\000\000\000\000\000\340r@\000\000\000\000\000\260}@\000\000\000\000\000@e@\000\000\000\000\000\360t@\000\000\000\000\000\300\\@\000\000\000\000\000@[@\232\231\231\231\231\311s@\000\000\000\000\000\340p@\000\000\000\000\000\300a@\230n\022\203\300\256q@\000\000\000\000\000\200d@\000\000\000\000\000@o@\232\231\231\231\231\271^@\000\000\000\000\000@c@\000\000\000\000\000`c@\000\000\000\000\000\000N@\000\000\000\000\000\000T@\000\000\000\000\000\000Y@\000\000\000\000\000\220`@\000\000\000\000\000\340c@\000\000\000\000\000 _@\000\000\000\000\000p`@\000\000\000\000\000\200f@\000\000\000\000\000\000S@\000\000\000\000\000\000[@\000\000\000\000\000\240c@\000\000\000\000\000 l@\000\000\000\000\000\200g@\000\000\000\000\000@R@\000\000\000\000\000\300V@\372~j\274t\267e@\000\000\000\000\000\240W@\000\000\000\000\000@j@\000\000\000\000\000 `@\000\000\000\000\000\200b@\000\000\000\000\000`j@\000\000\000\000\000\340c@\315\314\314\314\314\274h@\000\000\000\000\000\200]@\000\000\000\000\000\200T@\000\000\000\000\000@e@\000\000\000\000\000\020a@\000\000\000\000\000\360s@\000\000\000\000\000@Y@\000\000\000\000\000`b@\000\000\000\000\000 r@\000\000\000\000\000\340]@\000\000\000\000\000\000]@\232\231\231\231\2319W@\000\000\000\000\000@Z@T\343\245\233\304\364y@\000\000\000\000\000\340j@\000\000\000\000\000\260a@\000\000\000\000\000\200`@\000\000\000\000\000 [@\000\000\000\000\000 b@\000\000\000\000\000`d@\000\000\000\000\000\200a@\000\000\000\000\000\200[@\000\000\000\000\000\220`@\331\316\367S\343wr@\315\314\314\314\314\374h@\000\000\000\000\0000`@\000\000\000\000\000\000l@\000\000\000\000\000\200x@\000\000\000\000\000`f@\000\000\000\000\000\000g@\000\000\000\000\000\020f@\000\000\000\000\000\200X@\000\000\000\000\000 e@\000\000\000\000\000\000Y@\000\000\000\000\000\220b@\000\000\000\000\000\340_@\000\000\000\000\000 ^@\000\000\000\000\000\200[@\000\000\000\000\000\300a@\000\000\000\000\000\200N@\000\000\000\000\000\300k@\232\231\231\231\231\331Z@\000\000\000\000\000 h@\000\000\000\000\000\260h@\000\000\000\000\000@\\@\000\000\000\000\000\020x@\000\000\000\000\000\220b@\000\000\000\000\000pb@fffff\346f@\000\000\000\000\0008p@\000\000\000\000\000\340m@\000\000\000\000\000\240a@\000\000\000\000\000\200a@\315\314\314\314\314<b@\000\000\000\000\000\240k@\000\000\000\000\000\000\\@fffff\346^@\000\000\000\000\000\000n@\000\000\000\000\000@]@\305 \260rh\223q@\000\000\000\000\0008q@\000\000\000\000\000@`@\000\000\000\000\000\220u@\000\000\000\000\000\300^@fffffff@\000\000\000\000\000\240a@\000\000\000\000\000\000b@\000\000\000\000\000\300_@fffffVh@\000\000\000\000\000\340j@\000\000\000\000\000\000t@\000\000\000\000\000\200a@\000\000\000\000\000@_@\000\000\000\000\000\200k@fffff\236l@\000\000\000\000\000\260d@\000\000\000\000\000\000T@\262\235\357\247\306-y@\000\000\000\000\000`l@\020X9\264\310\032k@\000\000\000\000\000\340Z@\000\000\000\000\000\000Y@\000\000\000\000\000@h@\000\000\000\000\000\300b@\000\000\000\000\000\300l@\000\000\000\000\000\240e@=\n\327\243p\361q@\315\314\314\314\314\\i@\232\231\231\231\231\371S@\000\000\000\000\000\200{@\000\000\000\000\000\300Z@\000\000\000\000\000\360a@\315\314\314\314\314|e@\000\000\000\000\000\000Y@\315\314\314\314\314|f@\315\314\314\314\314\274`@\000\000\000\000\000\000n@\000\000\000\000\000@V@\000\000\000\000\000\020a@\000\000\000\000\000`m@\000\000\000\000\000@a@\000\000\000\000\000\304a@\000\000\000\000\000pg@\315\314\314\314\314\274f@\000\000\000\000\000\200a@\000\000\000\000\000 b@\000\000\000\000\000\340e@\000\000\000\000\000@m@\232\231\231\231\231y[@\315\314\314\314\314<`@\315\314\314\314\314la@\000\000\000\000\000 r@fffff\006d@\000\000\000\000\000`a@\000\000\000\000\000\200`@\000\000\000\000\000\300d@H\341z\024\256\177d@\000\000\000\000\0000b@\000\000\000\000\000\000i@\000\000\000\000\000@d@\000\000\000\000\000 ^@\000\000\000\000\000\000V@\232\231\231\231\231\371S@\000\000\000\000\000 l@\315\314\314\314\314\034o@\313\241E\266\363\365m@\000\000\000\000\000\300g@\000\000\000\000\000\000e@\000\000\000\000\000\210`@\000\000\000\000\000\240\\@\000\000\000\000\000@o@)\\\217\302\365\034a@\000\000\000\000\000\320w@\000\000\000\000\000@`@\000\000\000\000\000\240g@\000\000\000\000\000@_@\000\000\000\000\000\220e@\000\000\000\000\000\000m@\232\231\231\231\231Ya@\000\000\000\000\000\000Y@\000\000\000\000\000@`@\000\000\000\000\000pr@\000\000\000\000\000\200d@\000\000\000\000\000pw@\000\000\000\000\000\300\\@\000\000\000\000\000`a@\000\000\000\000\000 f@\000\000\000\000\000`a@\000\000\000\000\000\300k@\000\000\000\000\000\340d@\000\000\000\000\000\340s@\000\000\000\000\000\200j@\000\000\000\000\000\240e@\000\000\000\000\000\340`@\000\000\000\000\000 n@\341z\024\256GUi@?5^\272Iju@\000\000\000\000\000`a@\000\000\000\000\000\240k@\000\000\000\000\000Ps@\000\000\000\000\000\200f@\000\000\000\000\000\240g@fffffff@\000\000\000\000\000 f@\000\000\000\000\000 i@\000\000\000\000\000\320[@\315\314\314\314\314lf@\000\000\000\000\000\200V@\000\000\000\000\0000n@\000\000\000\000\0000p@\000\000\000\000\000\000`@\000\000\000\000\000\200U@\000\000\000\000\000@_@\000\000\000\000\000\000q@\000\000\000\000\000\300c@\000\000\000\000\000\000d@\000\000\000\000\000\360i@\037\205\353Q\270\376`@fffff.a@\000\000\000\000\000\200V@\000\000\000\000\000\300U@\000\000\000\000\000\000f@\315\314\314\314\314Lf@\000\000\000\000\000\370a@\000\000\000\000\000\260s@\000\000\000\000\000\000b@\000\000\000\000\000`g@\000\000\000\000\000\300a@\000\000\000\000\000 T@\000\000\000\000\000\000c@\000\000\000\000\000 f@\000\000\000\000\000\260p@\000\000\000\000\000\340z@\000\000\000\000\000\300g@\000\000\000\000\000\340a@\000\000\000\000\0000c@\000\000\000\000\000\220p@\000\000\000\000\000\340`@\315\314\314\314\314\034j@\000\000\000\000\000\330p@\000\000\000\000\000\240b@\000\000\000\000\000\340V@"
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 15
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 10000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "OneShotIterator"
  op: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dataset_factory"
    value {
      func {
        name: "_make_dataset_BNJ8tkOlla0"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1stFlrSF/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1stFlrSF/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext"
  input: "dnn/input_from_feature_columns/input_layer/1stFlrSF/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1stFlrSF/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/1stFlrSF/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1stFlrSF/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/1stFlrSF/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1stFlrSF/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1stFlrSF/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1stFlrSF/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1stFlrSF/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/1stFlrSF/Shape"
  input: "dnn/input_from_feature_columns/input_layer/1stFlrSF/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/1stFlrSF/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/1stFlrSF/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1stFlrSF/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1stFlrSF/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/1stFlrSF/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/1stFlrSF/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/1stFlrSF/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/1stFlrSF/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/1stFlrSF/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/Shape"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:2"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/Shape"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:3"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/Shape"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:4"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:5"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:6"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:7"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:8"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:9"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:10"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:11"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:12"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:13"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:14"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:15"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:16"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:17"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:18"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:19"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Shape"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/1stFlrSF/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 20
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4629100561141968
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4629100561141968
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/kernel/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/bias/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Size"
  op: "Size"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Switch"
  op: "Switch"
  input: "dnn/zero_fraction/LessEqual"
  input: "dnn/zero_fraction/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/switch_t"
  op: "Identity"
  input: "dnn/zero_fraction/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/switch_f"
  op: "Identity"
  input: "dnn/zero_fraction/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/pred_id"
  op: "Identity"
  input: "dnn/zero_fraction/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/zeros"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction/cond/count_nonzero/NotEqual/Switch:1"
  input: "dnn/zero_fraction/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/zero_fraction/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/Const"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction/cond/count_nonzero/Cast"
  input: "dnn/zero_fraction/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual/Switch"
  input: "dnn/zero_fraction/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/zero_fraction/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction/cond/count_nonzero_1/Cast"
  input: "dnn/zero_fraction/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Merge"
  op: "Merge"
  input: "dnn/zero_fraction/cond/count_nonzero_1/nonzero_count"
  input: "dnn/zero_fraction/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction/counts_to_fraction/Cast"
  input: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/fraction"
  op: "Identity"
  input: "dnn/zero_fraction/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.7071067690849304
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7071067690849304
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/kernel/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/bias/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_1/kernel/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_1/bias/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Size"
  op: "Size"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Switch"
  op: "Switch"
  input: "dnn/zero_fraction_1/LessEqual"
  input: "dnn/zero_fraction_1/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/switch_t"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/switch_f"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/pred_id"
  op: "Identity"
  input: "dnn/zero_fraction_1/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual/Switch:1"
  input: "dnn/zero_fraction_1/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/zero_fraction_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/Const"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_1/cond/count_nonzero/Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual/Switch"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/zero_fraction_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Merge"
  op: "Merge"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/nonzero_count"
  input: "dnn/zero_fraction_1/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_1/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_1/activation/tag"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.095445156097412
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.095445156097412
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/kernel/part_0"
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/bias/part_0"
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/bias/part_0"
  input: "dnn/logits/bias/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "Identity"
  input: "dnn/logits/kernel/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/bias/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "Identity"
  input: "dnn/logits/bias/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Size"
  op: "Size"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Switch"
  op: "Switch"
  input: "dnn/zero_fraction_2/LessEqual"
  input: "dnn/zero_fraction_2/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/switch_t"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/switch_f"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/pred_id"
  op: "Identity"
  input: "dnn/zero_fraction_2/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual/Switch:1"
  input: "dnn/zero_fraction_2/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/Const"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_2/cond/count_nonzero/Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual/Switch"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Merge"
  op: "Merge"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/nonzero_count"
  input: "dnn/zero_fraction_2/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_2/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_2/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/labels/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:20"
  input: "dnn/head/labels/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/Shape"
  op: "Shape"
  input: "dnn/head/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/Shape_1"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "dnn/head/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/strided_slice/stack"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice"
  op: "StridedSlice"
  input: "dnn/head/labels/Shape_1"
  input: "dnn/head/labels/strided_slice/stack"
  input: "dnn/head/labels/strided_slice/stack_1"
  input: "dnn/head/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/head/labels/concat/values_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat/axis"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat"
  op: "ConcatV2"
  input: "dnn/head/labels/strided_slice"
  input: "dnn/head/labels/concat/values_1"
  input: "dnn/head/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Equal"
  op: "Equal"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/All"
  op: "All"
  input: "dnn/head/labels/assert_equal/Equal"
  input: "dnn/head/labels/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert"
  op: "Assert"
  input: "dnn/head/labels/assert_equal/All"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/labels"
  op: "Identity"
  input: "dnn/head/labels/ExpandDims"
  input: "^dnn/head/labels/assert_equal/Assert/Assert"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/ToFloat"
  op: "Cast"
  input: "dnn/head/labels"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/SquaredDifference"
  op: "SquaredDifference"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/values/shape"
  op: "Shape"
  input: "dnn/head/mean_squared_error/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "dnn/head/mean_squared_error/ToFloat/x"
  op: "Const"
  input: "^dnn/head/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/Mul"
  op: "Mul"
  input: "dnn/head/mean_squared_error/SquaredDifference"
  input: "dnn/head/mean_squared_error/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "dnn/head/mean_squared_error/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "dnn/head/weighted_loss/ToFloat/x"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Mul"
  op: "Mul"
  input: "dnn/head/mean_squared_error/Mul"
  input: "dnn/head/weighted_loss/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Const"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Sum"
  op: "Sum"
  input: "dnn/head/weighted_loss/Mul"
  input: "dnn/head/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/gradients/Fill"
  op: "Fill"
  input: "dnn/head/gradients/Shape"
  input: "dnn/head/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/Fill"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "dnn/head/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "dnn/head/mean_squared_error/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  input: "dnn/head/weighted_loss/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/head/mean_squared_error/Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape"
  op: "Shape"
  input: "dnn/head/mean_squared_error/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/head/mean_squared_error/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/head/mean_squared_error/SquaredDifference"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/control_dependency"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/scalar"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/sub"
  op: "Sub"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/ToFloat"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Mul"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/mul_1"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/mul_1"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Neg"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape"
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Neg"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/control_dependency"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/control_dependency"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/L2Loss"
  op: "L2Loss"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/L2Loss_1"
  op: "L2Loss"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/L2Loss_2"
  op: "L2Loss"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/L2Loss_3"
  op: "L2Loss"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/L2Loss_4"
  op: "L2Loss"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/L2Loss_5"
  op: "L2Loss"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/stack"
  op: "Pack"
  input: "dnn/head/global_norm/L2Loss"
  input: "dnn/head/global_norm/L2Loss_1"
  input: "dnn/head/global_norm/L2Loss_2"
  input: "dnn/head/global_norm/L2Loss_3"
  input: "dnn/head/global_norm/L2Loss_4"
  input: "dnn/head/global_norm/L2Loss_5"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/head/global_norm/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/Sum"
  op: "Sum"
  input: "dnn/head/global_norm/stack"
  input: "dnn/head/global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/global_norm/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/mul"
  op: "Mul"
  input: "dnn/head/global_norm/Sum"
  input: "dnn/head/global_norm/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/global_norm"
  op: "Sqrt"
  input: "dnn/head/global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/VerifyFinite/CheckNumerics"
  op: "CheckNumerics"
  input: "dnn/head/global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/global_norm/global_norm"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "message"
    value {
      s: "Found Inf or NaN global norm."
    }
  }
}
node {
  name: "dnn/head/VerifyFinite/control_dependency"
  op: "Identity"
  input: "dnn/head/global_norm/global_norm"
  input: "^dnn/head/VerifyFinite/CheckNumerics"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/global_norm/global_norm"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/truediv/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/truediv"
  op: "RealDiv"
  input: "dnn/head/clip_by_global_norm/truediv/x"
  input: "dnn/head/VerifyFinite/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/truediv_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/truediv_1"
  op: "RealDiv"
  input: "dnn/head/clip_by_global_norm/Const"
  input: "dnn/head/clip_by_global_norm/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "dnn/head/clip_by_global_norm/truediv"
  input: "dnn/head/clip_by_global_norm/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul"
  op: "Mul"
  input: "dnn/head/clip_by_global_norm/mul/x"
  input: "dnn/head/clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul_1"
  op: "Mul"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  input: "dnn/head/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_0"
  op: "Identity"
  input: "dnn/head/clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul_2"
  op: "Mul"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  input: "dnn/head/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_1"
  op: "Identity"
  input: "dnn/head/clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul_3"
  op: "Mul"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  input: "dnn/head/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_2"
  op: "Identity"
  input: "dnn/head/clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul_4"
  op: "Mul"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  input: "dnn/head/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_3"
  op: "Identity"
  input: "dnn/head/clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul_5"
  op: "Mul"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  input: "dnn/head/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_4"
  op: "Identity"
  input: "dnn/head/clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul_6"
  op: "Mul"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  input: "dnn/head/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_5"
  op: "Identity"
  input: "dnn/head/clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/GradientDescent/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/head/GradientDescent/update_dnn/hiddenlayer_0/kernel/part_0/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/head/GradientDescent/learning_rate"
  input: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/GradientDescent/update_dnn/hiddenlayer_0/bias/part_0/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/head/GradientDescent/learning_rate"
  input: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/GradientDescent/update_dnn/hiddenlayer_1/kernel/part_0/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "dnn/head/GradientDescent/learning_rate"
  input: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/GradientDescent/update_dnn/hiddenlayer_1/bias/part_0/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "dnn/head/GradientDescent/learning_rate"
  input: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/GradientDescent/update_dnn/logits/kernel/part_0/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/head/GradientDescent/learning_rate"
  input: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/GradientDescent/update_dnn/logits/bias/part_0/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dnn/logits/bias/part_0"
  input: "dnn/head/GradientDescent/learning_rate"
  input: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/GradientDescent/update"
  op: "NoOp"
  input: "^dnn/head/GradientDescent/update_dnn/hiddenlayer_0/bias/part_0/ResourceApplyGradientDescent"
  input: "^dnn/head/GradientDescent/update_dnn/hiddenlayer_0/kernel/part_0/ResourceApplyGradientDescent"
  input: "^dnn/head/GradientDescent/update_dnn/hiddenlayer_1/bias/part_0/ResourceApplyGradientDescent"
  input: "^dnn/head/GradientDescent/update_dnn/hiddenlayer_1/kernel/part_0/ResourceApplyGradientDescent"
  input: "^dnn/head/GradientDescent/update_dnn/logits/bias/part_0/ResourceApplyGradientDescent"
  input: "^dnn/head/GradientDescent/update_dnn/logits/kernel/part_0/ResourceApplyGradientDescent"
}
node {
  name: "dnn/head/GradientDescent/value"
  op: "Const"
  input: "^dnn/head/GradientDescent/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/GradientDescent"
  op: "AssignAdd"
  input: "global_step"
  input: "dnn/head/GradientDescent/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/ones_like/Shape"
  op: "Shape"
  input: "dnn/head/mean_squared_error/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/ones_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/ones_like"
  op: "Fill"
  input: "dnn/head/ones_like/Shape"
  input: "dnn/head/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/mul"
  op: "Mul"
  input: "dnn/head/mul/x"
  input: "dnn/head/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/Sum"
  op: "Sum"
  input: "dnn/head/mul"
  input: "dnn/head/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/truediv"
  op: "RealDiv"
  input: "dnn/head/weighted_loss/Sum"
  input: "dnn/head/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "dnn/head/weighted_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "average_loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "average_loss"
      }
    }
  }
}
node {
  name: "average_loss"
  op: "ScalarSummary"
  input: "average_loss/tags"
  input: "dnn/head/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/hiddenlayer_0/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_0/kernel/part_0/Assign"
  input: "^dnn/hiddenlayer_1/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_1/kernel/part_0/Assign"
  input: "^dnn/logits/bias/part_0/Assign"
  input: "^dnn/logits/kernel/part_0/Assign"
  input: "^global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 7
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/hiddenlayer_1/kernel/part_0"
        string_val: "dnn/hiddenlayer_1/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 7
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/hiddenlayer_1/kernel/part_0"
        string_val: "dnn/hiddenlayer_1/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_0/activation"
  input: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_1/activation"
  input: "dnn/dnn/logits/fraction_of_zero_values"
  input: "dnn/dnn/logits/activation"
  input: "loss"
  input: "average_loss"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/Identity"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/Read_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/Identity_2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/Read_2/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/Identity_4"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/Read_3/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/Identity_6"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_4/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/Read_4/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/Identity_8"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_5/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/Read_5/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/Identity_10"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_7df6c18e859c48a6bd7fb40972942528/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "global_step"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/ShardedFilename_1/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename_1"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename_1/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Read_6/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/Read_6/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/Identity_12"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_7/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/Read_7/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/Identity_14"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_8/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/Read_8/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/Identity_16"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_9/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/Read_9/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/Identity_18"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_10/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/Read_10/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/Identity_20"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_11/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/Read_11/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_23"
  op: "Identity"
  input: "save/Identity_22"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/SaveV2_1/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 6
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
      }
    }
  }
}
node {
  name: "save/SaveV2_1/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 6
          }
        }
        string_val: "8 0,8"
        string_val: "20 8 0,20:0,8"
        string_val: "4 0,4"
        string_val: "8 4 0,8:0,4"
        string_val: "1 0,1"
        string_val: "4 1 0,4:0,1"
      }
    }
  }
}
node {
  name: "save/SaveV2_1"
  op: "SaveV2"
  input: "save/ShardedFilename_1"
  input: "save/SaveV2_1/tensor_names"
  input: "save/SaveV2_1/shape_and_slices"
  input: "save/Identity_13"
  input: "save/Identity_15"
  input: "save/Identity_17"
  input: "save/Identity_19"
  input: "save/Identity_21"
  input: "save/Identity_23"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency_1"
  op: "Identity"
  input: "save/ShardedFilename_1"
  input: "^save/SaveV2_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "save/ShardedFilename_1"
  input: "^save/control_dependency"
  input: "^save/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity_24"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  input: "^save/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 6
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 6
          }
        }
        string_val: "8 0,8"
        string_val: "20 8 0,20:0,8"
        string_val: "4 0,4"
        string_val: "8 4 0,8:0,4"
        string_val: "1 0,1"
        string_val: "4 1 0,4:0,1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 20
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Identity_25"
  op: "Identity"
  input: "save/RestoreV2_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "save/Identity_25"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_26"
  op: "Identity"
  input: "save/RestoreV2_1:1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "save/Identity_26"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_27"
  op: "Identity"
  input: "save/RestoreV2_1:2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "save/Identity_27"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_28"
  op: "Identity"
  input: "save/RestoreV2_1:3"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "save/Identity_28"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_29"
  op: "Identity"
  input: "save/RestoreV2_1:4"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "dnn/logits/bias/part_0"
  input: "save/Identity_29"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_30"
  op: "Identity"
  input: "save/RestoreV2_1:5"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel/part_0"
  input: "save/Identity_30"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/restore_shard_1"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_5"
  device: "/device:CPU:0"
}
node {
  name: "save/restore_all/NoOp"
  op: "NoOp"
  input: "^save/restore_shard"
}
node {
  name: "save/restore_all/NoOp_1"
  op: "NoOp"
  input: "^save/restore_shard_1"
  device: "/device:CPU:0"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_all/NoOp"
  input: "^save/restore_all/NoOp_1"
}
library {
  function {
    signature {
      name: "_make_dataset_BNJ8tkOlla0"
      output_arg {
        name: "modeldataset"
        type: DT_VARIANT
      }
      description: "Factory function for a dataset."
      is_stateful: true
    }
    node_def {
      name: "optimizations"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 3
              }
            }
            string_val: "map_and_batch_fusion"
            string_val: "noop_elimination"
            string_val: "shuffle_and_repeat_fusion"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_0"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content: "\360-Y\022\326\246\317\2771\230\320M\034S\355?\005\372\224L\301\270\326\277\247h\240\016\365\333\332\277b\226v\331\216\325\363?~N\237\347v\325\366\277@\307]\332\261q\257\277h\006\2511\353E\352\277~N\237\347v\325\366\277\217\244\357\334\310\316\350\277^\036\271xs`\350\277H\325\331\264\246\242\350\277\205\274\377#Q\351\346\277\303!\247\005\271+\360?\020\340\262\351\266A\342\277\214+Inl+\332\277\373\230L^\353\220\353\277\361\2324\316r\312\261\277q\356\361\315\343z\331\277\312\227\353\250\265\203\353?Fa\\\203\251\270\373?\270\272L\314B\034\360\277\trR\255\334-\362\277\270\2735\332\203J\343\277))\340\346\201`\347?\344\350\361\347=\010\273?-\244\377\215\337\020\337?\252\341F}Q\177\351\277\032\310\242\242.\'\344\277\277\255\202\267<\221\340?\270\2735\332\203J\343\277\031\312t\276\260\203\332\277}\323\315y\027\206\364?\202A\207\231r\351\341\277}\323\315y\027\206\364?\273 \206\215ai\260\277\273 \206\215ai\260\277\203C\000\322s\366\352\277\277\255\202\267<\221\340?.\230\202\024\036\362\347\277KPR?\205\242\355\277\'3\344\'Br\305?\311\020\235\301\224\025\342\277\004\3019/\321\002\003@\022]\375\217\027\236\335\277^\313\223\201\021\032\251?\ts;\273\035\\\345\277\230\212f]?\247\341\277\330r\303\023)}\370?H\325\331\264\246\242\350\277\022]\375\217\027\236\335\277\371\233UF\312\214\361?\366\243\353s\356o\367\277\225[\032\246t\341\014@\340[\365\275b\340\352\277\302)\344O\\\277\370?\031\312t\276\260\203\332\277\310\203\356\320\267N\267\277\272\251\377s\205\203\275\277F\\\332b\311\257\354\277\227\022\3675\"\223\373\277j\020\373\253\251\270\315?\376\351FVJ+\247\277\005\006\022\306\202\327\355?(*\311\364\302\216\372?\205\376ut\300\202\005@~\315bK\366N\362\277\264N\014\345\350\305\353?xY\227\340\372\003\340\277h\204\203\207)\221\362\277\303!\247\005\271+\360?\023c\004\266R\247\301?9\371q\037s\312\345\277\264B\217k\'\247\324\277\343\227\247\374/\363\t@\244\367\322\341U\236\326?\330q\332\005\350N\345?\010\177\2704\337z\334?\n%\003#\243\007\233\277\242qm\010v^\360\277\346\317\300(^+\375\277\367\232\320@o\214\314\277\022]\375\217\027\236\335\277\240\371V\304\331\231\347\277\030N\272B\020\006\365\277\313\215\347g\365q\335\277\005u\277\235\241W\306\2773\021\320\237\371E\351?\340[\365\275b\340\352\277:\370\210\0212\234\362\277l\375)\366\2054\361?\242qm\010v^\360\277KPR?\205\242\355\277\201F\t\272R\362\360?\233\213\235\244~6\372?\2145\364\313\253\355\332?\202A\207\231r\351\341\277\203\301\332\'\262A\363\277\352\310\272%\372&\355?\307G\354\236;\301\222\277\260S@\314\312m\365?\347\310l\354\373\305\347\277\2442\'\372U\351\006@\014\356\263E\374[\352\277\314\020\353\372\222v\347?\'\260\340\224\244m\353?\223\230\300\234\005\021\327\277O\310\017\240\240\027\371?\205\276\321?\323E\335\277\264B\217k\'\247\324\277\201\312\000\200\226\003\357\277\264B\217k\'\247\324\277\264B\217k\'\247\324\277\316\004\025\236P\010\343\277\316\004\025\236P\010\343\277\364+\325/R\253\356\277\016g\263\227\331N\346\277\217\244\357\334\310\316\350\277\031\324\037\034\360E\333?\301\250\247\263\3338\364?HS\264\n\345\355\360\277\340[\365\275b\340\352\277{\324\017k\331\003\345\277\035\274sbki\322\277\t\370\020j=\275\345?[\243@\356\224`\343\277H\327\253\320(\377\336\277t\345r\222~i\360\277\317\372\020]\220\366\304\277\026\326\243\376sA\354\277\323\367\243l\313\314\360\277H\226\023i\225\265\002@c\0221U/S\351\277/\021\202f\373\344\343\277[+\321\306wL\375\277\247\354\214\257\323\016\370?\214\2575\017K^\367?q\354\037\262a\036\343\277;\370/.\261L\365?\246\260\201\215\205\254\013@\317\213c\205qv\354?\323\370\214z\014\373\343\277\034E\355H\217\203\337\277\377\017!\261\305\327\343?IN2\352\004\345\321\277\261N\276\253\352d\346\277;tC\215\322\031\330\277\205A\325\322pJ\347?v\337\256\200\334\342\360\277\252\341F}Q\177\351\277\311\277\360\0024\334\253?\354\273\373\272v\212\365\277\225[\032\246t\341\014@\177C\013|\366\344\302\277\367\232\320@o\214\314\277>\355\351\373.\275\346\277\206?\003\267\356\355\320?l}}\204\305\214\342?\371\235\'bL\351\367\277\310o\230\0259\312\245\277\311\241\357\351u\225\311?IN2\352\004\345\321\277\256Y\004\336l\364\364?\310\036\354V\330\220\357?\026\326\243\376sA\354\277\321\005L\345\217\227\373?\252\343\030\231\323\333\337\277\264N\014\345\350\305\353?\212q\261\264\373\356\001@\335\350UuAF\300?\341\225.\304.\346\000@.\230\202\024\036\362\347\277\214+Inl+\332\277\016f\312\211\230 \363\277%\357&\243\304\342\004@j\362\371\222\353q\273\277\310\231\026\250\270/\357\277\241\013\333c\326\301\262?\227\023\340Cc\301\356\277\245k\251\366\323\327\360\277u\352\233\317\335\"\322?\232\0058\313\236\366\323\277;rqqP\275\341\277mx\373c\345\203\363\277;\357m\336\262\270\307\277j\177\250\203\3108\346\277\346\315\356\014\334\316\366?1\230\320M\034S\355?\365\'1\370M\362\341?LOi1Dt\372\277\353:\277\036\366\003\361\277-\025\177\201\200\355\315\277c\024\003q\261\257\337\277\237l\250\323\374\322\274\277\311\034\032;V4\331?\240\355\331J\030{\300\277\370\256&\374\355\020\316?\357\2657\251\324\003\366\277tijX\302z\336\277\276\261&\357@J\355\277 :\234\361\247\025\360?h\204\203\207)\221\362\277\030N\272B\020\006\365\277\014s\211\364\033\275\352?Y6\276\025y\214\336?H\327\253\320(\377\336\2773d\365\226[\214\250\277O\265\242\362b\301\272\277\'=\217\205\2014\266?\314\213\025Ls\025\347\2774xKR\332\020\272\277\373\033P\361\210\225\325?\320\016g\030\017{\306?\302\242<\205\272\001\362\277\304\241\372\223\370\203\341?\'(P\274\301\201\361?\247\353\243\241\222\340\344?\310o\230\0259\312\245\277\277\255\202\267<\221\340?\256\337\302\232\315\203\330?\205\274\377#Q\351\346\277\302\257\242\014\275N\334?\200\315\thu\377\364?\321~\244\032\356\331\364\277~\324]\244\327d\352?I\335\262\366c\010\303?\314\212,>2\347\363\277L\307\330Xa\210\340\277\201\312\000\200\226\003\357\277\333g}\341\246\355\351\277\214)wR\352\316\343\277\236\3761\310:\362\363\277\252\341F}Q\177\351\277\005\211\025Y \334\307?v\340\227\216\035\021\344\277\314\212,>2\347\363\277k\207\201\305\205\236\300?\334\342NO\006=\334\277\311\277\360\0024\334\253?\004\177\303\336ai\344\277\307\226\264av\364\362\277\026\\b\273\324\320\377?\343O\306}\237\"\331\277\370\242\251\202,\362\346?@f\351M\014\260\342\277\276\261&\357@J\355\277))\340\346\201`\347?@\307]\332\261q\257\277.\021\333I|4\321\277\206\276x\\R\366\357\277PAh\325\376Y\362\277;\373\352Wt\327\356\277\022]\375\217\027\236\335\277\210\265R\004n4\364\277\014j\364\265d\243a\277c\217-\302\221N\317\277\005\201<\027cv\355\277~N\237\347v\325\366\277 \276\223\267\353&\356\277\014\366\214\207\271\301\304?B\245}\225*\206\001@k\207\201\305\205\236\300?\205\274\377#Q\351\346\277\nr\371\311[\336\364?4\213\270\377\027g\370?\205\274\377#Q\351\346\277Y6\276\025y\214\336?\340[\365\275b\340\352\277`\231\212\346\322\257\332\277\214(\216D\251\240\360\277\360q\226Yb\276\003@Y6\276\025y\214\336?\023O\256\372\323\"\300\277}\325\237\225\231\342\372\277Bp;\310\312\"\306?4\007\314^94\333\277\006\370\3020?\\\340\277U=\304\030\335\220\376?\366)\2520O\377\352?\177\310\340*\026F\323\277\270\2735\332\203J\343\277~N\237\347v\325\366\277FYx\034\207t\360\277\234\007X \037\264\357\277\247\354\214\257\323\016\370?,\244Xq``\354?\235~\3369\373\231\342\277BR:\257\014\334\263\277V\275\027\247\034\351\357?:\370\210\0212\234\362\277\034\301\365\202Kr\361\277\252\341F}Q\177\351\277\376\226\310{g\225\332?%\262\013\224\247\031\357\277\017i,\320\332[\357\277\001\010\226\250\006\323\336\277\223\230\300\234\005\021\327\277\205\274\377#Q\351\346\277D\340x\312\251\201\364\277\017i,\320\332[\357\277j\004~2\350\231\346?\243\371\244\375\327\372\354?e\2130\247\014F\345\277\376\007Ho\010r\311\277\322\375\016\233\354\003\363?\206\316\203\303M\021\262?\261q$\340\177,\207?\376\214\035\036(\323\331\277bW\211\256\357\257\007@\215+\360\212\353\333\354\277\314\212,>2\347\363\277\306\234\037\220\227+\365?\206\276x\\R\366\357\277\240\005\324=\233\270\336?\'\244c\033\343N\324\277-\026]j\\=\360\277\377%I\210\306\270\273?\227\221\272\231\241\014\367\277\\+x\343\366\374\377?\264B\217k\'\247\324\277wg\346u>\177\355?x\352\351\010\334\203\307?\317\177\346\013\260W\325\277\252\341F}Q\177\351\277qr\336n\302\255\366?b\226v\331\216\325\363?~O\210\365\267\003\352\277g\020\255r\253W\330?a\036\007\262q\301\355?\252\341F}Q\177\351\277Bp;\310\312\"\306?\207\272\324$N=\343?KPR?\205\242\355\277H\341V.h\301\337?\264G\021\214\007\260\363\277\314\004n\201\321W\320\277\032H\3660n\177\365\277\254Y]\301\355C\362\277\000\214\333,fU\371\277?r\277\252N\036\347?^\234\223\316\261\253\360\277\252\341F}Q\177\351\277\020\340\262\351\266A\342\277g\t\262\031\312A\360?\030O\243PQ4\350\277\223\230\300\234\005\021\327\277Cg \225K?\373?L\307\330Xa\210\340\277\331sS>\351[\356?g\0040\371\3518\341\277\227\230\265\362\202\"\357?\223\\\203v\304\227\003@\256Y\004\336l\364\364?\223\242k\372D\323\327?\377\020\n\277\006\006\367?\256\323E!\014e\341\277\010u\r\327\237\270\333\277\242qm\010v^\360\277\222\037hg\247\316\355\277\230P\373R\200\212\004@\237l\250\323\374\322\274\277\305\035\265\017\231\001\367\277\265L:\311fi\325?\217\246\301\370J+\337\277\310o\230\0259\312\245\277\2766\374\235`\253\355?\235\212[\263\274\270\331?\314\212,>2\347\363\277j\004~2\350\231\346?.\035X\303=S\350?v\337\256\200\334\342\360\277\337Y|\205a\323\341\277\332\352\331W\305A\341?mx\373c\345\203\363\277\273B+\336#i\337?\371\037M\014\016\236\357\277^\363?\370\016#\234?\333\355;\236\007}\375?\346\317\300(^+\375\2771\020@u9g\363?O\277MP\242\203\313\277\005~\201\355\237\353\363?;\373\352Wt\327\356\2773<I ^\203\225\277OBQ\343?\210\345\277\314\004n\201\321W\320\277\311\034\032;V4\331?\022\330\'\341\367<\315\277\237}\234H9\034\362?\214\246s\277L\312\311\277\311\020\235\301\224\025\342\277\020\347\255B\230W\372?\256\323E!\014e\341\277\300\260\344\375~\314\374?\361\206\336\022\364E\240\277\340\340\312l\202A\353?\013\354:\r\373N\341\277{\324\017k\331\003\345\277\377%I\210\306\270\273?\014\356\263E\374[\352\277:\370\210\0212\234\362\277qr\336n\302\255\366? 7\354\354Ii\327\277\255PB\216n`\307\277\023O\256\372\323\"\300\277\252\341F}Q\177\351\277\005\372\224L\301\270\326\2776\004\270Q\365Y\364?i\003\356\007(\273\360?\376\226\310{g\225\332?\347A\305!Z\010\321\277\373\035\"\r\013\362\353?\233\004\366\331\334x\363\277\216\251q\375\250\327\367?\220\'\363of\323\322?\n\262\317\002<2\004@\252\341F}Q\177\351\277]\217\221O\225\214\264\277\251e\214\001\261\001\364?\264B\217k\'\247\324\277\347\310l\354\373\305\347\277\\*\217\325\265\316\354?\376\226\310{g\225\332?nsyC\005{\324\277\ts;\273\035\\\345\277\270\2735\332\203J\343\277\223\033\304/\243\025\341?\214(\216D\251\240\360\277\232\224\270\327\375\031\305?\ts;\273\035\\\345\277\252\341F}Q\177\351\277\035\274sbki\322\277\272;0\205BS\367?IN2\352\004\345\321\277\332\210j\335:\250\201?w\342\020\307\036\036\355\277D\340x\312\251\201\364\277\344\217j\262\214_\001@*\243\310F\240\201\366?\272\263\252\321\304E\316\277\275\256\304\250\376\016\361\277iC\304@\010\017\000@F\\\332b\311\257\354\277x\336l\217\032e\340?\220\035H\022\'\021\322\277\364\244-e\260\355\327\277\210\265R\004n4\364\277>\357\273\027\261\031\335\277]\231<\255\324N\305\277\326\354]:I=\322\277\323\370\214z\014\373\343\277\014\330\213n\373z\262\277C\346\343\370\312\270\366?\014\3426\314:=\303\277\255\325\027=\216\301\327\277\3613`8\021\260\323?\361\2324\316r\312\261\277\340\340\312l\202A\353?\222\t@\220\246\355\265\277.\021\333I|4\321\277\214+Inl+\332\277\023ZBfT\023\364\277\330r\303\023)}\370?,\034\310\230}t\362?E\3376\331\347\003\344?\242\271\'\250x\366\n@\256\334\332_\303~j?\2766\374\235`\253\355?\177\322\213\210U\010\324?\321\005L\345\217\227\373?KPR?\205\242\355\277\264B\217k\'\247\324\277`\227\270\312PS\344\277\026\326\243\376sA\354\277\365\242[I.\221\341\277\025\227\335\262bT\006@\373\021\245\223I\323\324\277\307\226\264av\364\362\277\304\034%\345\330\"\341\277\344\336F\212\376E\312?\252\341F}Q\177\351\277\027T%q1=\367?\326\354]:I=\322\277j\362\371\222\353q\273\277\033\307`\261l\251\363?-\025\177\201\200\355\315\277[(\026\235\264\301\343?\224\230g\271\204\301\351\277\2130\313\216L4\371\277~\324]\244\327d\352?\033\307`\261l\251\363?\375\226!_\350\344\347?\223\034\255=\344C\364?\321\005L\345\217\227\373?\223\023\353\355\345\257\306\277\314\213\025Ls\025\347\277\365\242[I.\221\341\277\366\243\353s\356o\367\277h\204\203\207)\221\362\277\2114\275\204l^\362?\245/E\361\004&\007@~O\210\365\267\003\352\277r\356\230\352b+\354\277n}$\241D=\325?\nr\371\311[\336\364?\207\272\324$N=\343?6D\216\212\325\255\003@\256\323E!\014e\341\277\260\322\0030J\347\360?\275\257\255\266?=\344\277O\307&\222_\351\345?*\037\334\245\301N\331\277\2755ls\240\314\367?\325x\207%\313\003\370?V,\305~;i\310\277\270\272L\314B\034\360\277\326\370\332\263\n\\\351?~O\210\365\267\003\352\277\334]y\240\346\333\313\277OD#\377\301\344\333\277\330r\303\023)}\370?\275\256\304\250\376\016\361\277\245\354\345\222T^\365\277\343\326mHA\340\357\2773d\365\226[\214\250\277]\231<\255\324N\305\277r\356\230\352b+\354\277\346\312>\010~\"\336\277\223\033\304/\243\025\341?\340[\365\275b\340\352\277j\362\371\222\353q\273\277\247\250DC\342\030\003@\367\037\246\357\216\355\334\277\030\324x\377p\225\350?\202\306\\H\222J\342?\344\336F\212\376E\312?j\177\250\203\3108\346\277\ts;\273\035\\\345\277\337\337:B\302b\365?\344\322\311\020=\'\343?\001\307\375@s\211\002@d\213\211\212\215\225\322\277\335\354\371\254E\377\334?\247h\240\016\365\333\332\277%\257Pj\344\216\365?H\332[\325\206\253\367?\ts;\273\035\\\345\277\323\370\214z\014\373\343\277~\315bK\366N\362\277\264B\217k\'\247\324\277Z\355\363\210\247\215\n@\231\200b\034\177\225\303\277\361)\265\332\321\355\322\277\227\023\340Cc\301\356\2773<I ^\203\225\277Qh+>\2734\242?\350\003\217\000\t\372\000\300\314\213\025Ls\025\347\277\'3\344\'Br\305?V5\207\3169\375\365?\227\022\3675\"\223\373\277\242yQo\230\242\373?\337\337:B\302b\365?\304\034%\345\330\"\341\277j\004~2\350\231\346?Y*A\234\267m\347\277\273 \206\215ai\260\277\017i,\320\332[\357\277\373\035\"\r\013\362\353?\377%I\210\306\270\273?x\336l\217\032e\340?3<I ^\203\225\277\207\273\2752\217k\366?\266B6\210\246W\347\277\274>\207\246\037\260\302?\257S\231\257K\275\362\277\016g\263\227\331N\346\277\300\250\000\227\\\210\361\277N\306\226g\237\n\360?,\034\310\230}t\362?]\267=\306\222\225\267?\\*\217\325\265\316\354?\005\276W&\200?\003@\302\243%\223\373/\345\277\026\326\243\376sA\354\277\222\t@\220\246\355\265\277SB\237\034>\351\352?tijX\302z\336\277c\0221U/S\351\277\2231\354\006\244\366\270?\310\203\356\320\267N\267\277\312\022\026\372\225\"\353\277\207\n\206\365\311\236\226?l\370\247\325\245+\342\277D\340x\312\251\201\364\277\346\317\300(^+\375\277.\035X\303=S\350?\014\366\214\207\271\301\304?1\230\320M\034S\355?\343Yq\333\336\344\331?\027\224\373\251\021\221\006@k\207\201\305\205\236\300?\361)\265\332\321\355\322\277\347MB\233\033\'\350?\241\0010\006\227\377\301?\000\214\333,fU\371\277\274\\\210\277\335\366\244?tg\230<@\036\350\277\335\354\371\254E\377\334?d\213\211\212\215\225\322\277g\020\255r\253W\330?\020\340\262\351\266A\342\277\273 \206\215ai\260\277y[\020\031\374\020\351\277S\272\016D[\375\360?\255PB\216n`\307\277\226\226<\272\201\025\346?\252\341F}Q\177\351\277@\353\276\374+\021\343?6\004\270Q\365Y\364?;rqqP\275\341\277\021b\177\260\367\246\374\277H\327\253\320(\377\336\277\3565\344\032\225\253\344\277\377\020\n\277\006\006\367?\277(\255\010\0350\340\277\375\226!_\350\344\347?\220\035H\022\'\021\322\277\264B\217k\'\247\324\277\344\336F\212\376E\312?\264B\217k\'\247\324\277/\227@#\\t\367?\336g\313\032\245N\357?,\244Xq``\354?\234\203`Z\333\242\361?\241\0010\006\227\377\301?\343Rv\202\375\316\361?q\356\361\315\343z\331\277\272\263\252\321\304E\316\277\252\341F}Q\177\351\277\000\212\t\021\344\370\362?\337\233\362\325\320l\000@\'+\013\346\204\014\353\277\337\337:B\302b\365?\305\227\366R8r\323\277!\275Q\306)\251\375?T\273\236n\033\334\346?\202A\207\231r\351\341\277\205\276\321?\323E\335\277\022]\375\217\027\236\335\277IN2\352\004\345\321\277\226\227%\310\302C\371?C\341a\330\352\257\347\2778\005H|\2658\352?\271\275\256\022\205W\354\277\200NF\004\366\205\371?}\322\344k\326W\341?\225[\032\246t\341\014@\\\242W\340S2\360\277j\362\371\222\353q\273\277\344\322\311\020=\'\343?\030N\272B\020\006\365\277x\234\366>\253\313\001\300\021\341B\024w \370\277O\307&\222_\351\345?\346L\262p[H\362?\234\007X \037\264\357\277\206?\003\267\356\355\320?j\177\250\203\3108\346\277\264\006n`<\332s\277\332e\004\251\245\340\340\277\333\354R\220\306N\352?\256d\230I\355\344\310?\252\341F}Q\177\351\277\274\\\210\277\335\366\244?\376\007Ho\010r\311\277\177\322\213\210U\010\324?\337Y|\205a\323\341\277\355:f;u\264\363?-\244\377\215\337\020\337?>\256#\260\035\320\000@\327{\336F\250`\303?\347\310l\354\373\305\347\277\275\256\304\250\376\016\361\277\307\226\264av\364\362\277v\031`\244\305\311\235\277KPR?\205\242\355\277\263L\223\254\347\270\342?\274H2\004_r\263?4\005\372B\267\327\344\277\333\355;\236\007}\375?@kkn\354\270\361?!\272\357\177\347m\341?\206zW\317\3568\001@\311\241\357\351u\225\311?5\264M\204V\236\256?\227\022\3675\"\223\373\277\035\274sbki\322\277\226\0239\'\344\020\334\277y\341\316\325\\\240\374?\305\244\\\332:\277\375?f\215\251\337\rS\356\277\373\230L^\353\220\353\277\026O\3743\322\203\325\277\345\325+W\177b\377?x\352\351\010\334\203\307?@f\351M\014\260\342\277g\0040\371\3518\341\277E\340\037\347(2\367?Z\243\231\321\025\260\320\277\344\336F\212\376E\312?\303!\247\005\271+\360?~N\237\347v\325\366\277LOi1Dt\372\277\230\020%\032\2406\365?\310o\230\0259\312\245\277\270\30203e`\373?\255\330\307A\354m\360?\250\355\034\332\223\355\355?\275\256\304\250\376\016\361\277\312\227\353\250\265\203\353?\346\317\300(^+\375\277\030N\272B\020\006\365\277d\213\211\212\215\225\322\277\321@\307\334\035\033\002@\343\300Eq@\377\267\277\376\375\234\021\311\257\270\277\302\252 \354\334E\375?t\354m\353_\177\350?\311\034\032;V4\331?\255F\2270/\236\266\277\312\022\026\372\225\"\353\277\200\310\207G\225\366\345\277\016\354\210F\371\257\346?\351\307*\3739H\367?\013\354:\r\373N\341\277\242qm\010v^\360\277\346\315\356\014\334\316\366?X\256\206 \027\360\361?\002\006\304\214\204v\350\277KPR?\205\242\355\277<\367F p\036\342?.\035X\303=S\350?\272\263\252\321\304E\316\277\364+\325/R\253\356\277\255F\2270/\236\266\277\262\314?\036\250`\361?\232\na\010\376\257\365?\307\226\264av\364\362\277\005u\277\235\241W\306\277\242\367+\305\326\355\343?\256\337\302\232\315\203\330?PAh\325\376Y\362\277\370\243\222\220m \372?$3\226\356C\021\320?\3527h\375\030\247\305\277j\374\244\360*4\314\277\255\\\277\0070\177\356\277\367)QM\316\257\335?\255\325\027=\216\301\327\277H\341V.h\301\337?]\255\222hS\323\306?\276*\177$\237\214\326\277\244\367\322\341U\236\326?5\004\0215v\251\361\277/\327\026\\<\310\006@<\367F p\036\342?\241|ZWw\236\321?1\023\373\236\374\361\354\277\377\020\n\277\006\006\367?\252\341F}Q\177\351\277\006\370\3020?\\\340\277\340\336\370P\000\345\324?`\2435D\022r\333?\027T%q1=\367?^\234\223\316\261\253\360\277\311\034\032;V4\331?v\337\256\200\334\342\360\277\367\232\320@o\214\314\277\\#\224|\324\270\364\277:\370\210\0212\234\362\277`\231\212\346\322\257\332\277\340[\365\275b\340\352\277O\310\017\240\240\027\371?\347\310l\354\373\305\347\277\344\336F\212\376E\312?\233\005\337\347\035\247\346\277\225[\032\246t\341\014@H\341V.h\301\337?\026\326\243\376sA\354\277\226\0239\'\344\020\334\277\264\212p\352\267w\005@\330r\303\023)}\370?c\0221U/S\351\277\177\310\340*\026F\323\277\252\341F}Q\177\351\277q\354\037\262a\036\343\277\\{;\224\026\010\243\277\322\375\016\233\354\003\363?\273\307\000\215C\312\317?\224\026B\017\303\014\362\277\361\206\336\022\364E\240\277xe\024Z\274\"\327?\ts;\273\035\\\345\277t\345r\222~i\360\277\347MB\233\033\'\350?\237XR\030~N\253\277d\006\264\333m4\302\277\310\231\026\250\270/\357\277\265G\270\250\206`\366?y[\020\031\374\020\351\2773d\365\226[\214\250\277\273*1\353\240+\301\277\261q$\340\177,\207?X\260X<\231L\370\277j\004~2\350\231\346?\205\274\377#Q\351\346\2774\202\366\257\031\323\312\277}M\017\275\266\366\340\277\030N\272B\020\006\365\277\221\034\006!e\223\361\277g\0040\371\3518\341\277f\215\251\337\rS\356\277OBQ\343?\210\345\277\274\271\261\367\377N\322?\375\021L\260\310\203\347\277\205\310|\235\022\010\336?i\005\300#\252\027\367\277l~f\222\006\273\365?r0\017;\322\304\n@c\220\013\253m\236\361\2775\014\365\233\230\355\374?\274>\207\246\037\260\302?\235~\3369\373\231\342\277\ts;\273\035\\\345\277KM\360\370Bg\361\277\020\340\262\351\266A\342\277EZa*\310\242\343\277\347\307\203\336\272\227\364\277O\277MP\242\203\313\277\240\370m\266\230k\364\277\310\231\026\250\270/\357\277\240r\257\3717\334\320\277\236\3761\310:\362\363\277\331\356}\217\311\372\355\277\177\310\340*\026F\323\277\202\306\\H\222J\342?\005\004@\252\000{\327?\205\276\321?\323E\335\277\235~\3369\373\231\342\277HR\326!\t\236\316\277\274\271\261\367\377N\322?\361\2705\3470\021\304?EZa*\310\242\343\277h\006\2511\353E\352\277{\326\341\206[`\333\277\'\260\340\224\244m\353?\217\243\006\317\207\240\365\277\305\036\236\035\332/\352\277\ts;\273\035\\\345\277E\345\314S\275\266A?\3564\373\014T}\361\277\006\370\3020?\\\340\277]\036\022\\\364\257\325\2778\200r\315\225\327\351\277|\326\210\243\332\020\356\277\3603\271\033\222\377\340?.\033\206\247\273\366\321?\302\242<\205\272\001\362\277\023\324\203\251\363\203\320\2776\007s{\270\344\355\277\227\022\3675\"\223\373\277\223\\\203v\304\227\003@\357\2742\002\266\031\356?\205\273\026\026\020\273\363\277g\0040\371\3518\341\277\264B\217k\'\247\324\277\264B\217k\'\247\324\277\016g\263\227\331N\346\277PT\325\202<\260\260?~\324]\244\327d\352?\223\226\356\200\203\264\340\277O\277MP\242\203\313\277{\331\221\213\271\014\364?;~\356\352\021\334\330?\302)\344O\\\277\370?\255\325\027=\216\301\327\277\022g\250\355V`\336?\205\274\377#Q\351\346\277y`\2229\334\031\370?\265\321\017x\206\312\305?-)\325<\377q\317?\ts;\273\035\\\345\277\021\341B\024w \370\277\2075\377u.\334\342\277\343\326mHA\340\357\277\307\226\264av\364\362\277\240\272\220x\310\254\001@4\n|c\227\340\363?\244q\024%\365\016\363?v\031`\244\305\311\235\277\000\212\t\021\344\370\362?V4\236\300\370\316\342?\006\370\3020?\\\340\277\335\"\363\203\363y\004@\214(\216D\251\240\360\277\017i,\320\332[\357\277\244\362P\301u\225\367?1\020@u9g\363?\363)\\\367P\236\345\277!\272\357\177\347m\341?.\230\202\024\036\362\347\277\230\020%\032\2406\365?\026\326\243\376sA\354\277\235\200\260U}\366\330\277\256\323E!\014e\341\277\376\007Ho\010r\311\277\030N\272B\020\006\365\2778\200r\315\225\327\351\277\234\007X \037\264\357\277\366\244\324\201/\236\352\277\210Z\336\342\304\260\214?8\200r\315\225\327\351\277\307G\354\236;\301\222\277+\235]\030\177J\364\277\255\330\307A\354m\360?\226\035\344\204#\323\334?y\331\352n:\\\361\277|\326\210\243\332\020\356\2773\021\320\237\371E\351?\255\341\224\266O\340\356?\335\354\371\254E\377\334?\376\033\236*\207\366\312?\226\0239\'\344\020\334\277\002\177\034\302\342\270\321\277\243\371\244\375\327\372\354?\301\250\247\263\3338\364?\274H2\004_r\263?8\005H|\2658\352?\327{\336F\250`\303?\332\353\302e\006p\364?\030N\272B\020\006\365\277.\021\333I|4\321\277\364+\325/R\253\356\277\301+\266k\336\033\377\277\252_!\323\217\312\361\277\314\213\025Ls\025\347\277\362\302\340Dp\323\264?\214\256L\001\n0\344?g\0040\371\3518\341\277\340[\365\275b\340\352\277\347\324\351e\275\344\336?\\\242W\340S2\360\277\020\340\262\351\266A\342\277^\313\223\201\021\032\251?`\231\212\346\322\257\332\277\330r\303\023)}\370?\275\256\304\250\376\016\361\277\255[\326\371\356P\373\277=s\001\234\020\234\367\277\346\317\300(^+\375\277\242rV\026\267\214\343\277\310o\230\0259\312\245\277\352\274=\2548\010\326\277\261q$\340\177,\207?\013a\005U\037\225\277\277\221\243\255\353\006Q\370?\030N\272B\020\006\365\277W\261AJ\332z\353\277\343\312\360\316\177\301\310\277\252\341F}Q\177\351\277\034\311\331\351m\266\374?\241y\252R\031\362\370\277\ts;\273\035\\\345\277\261q$\340\177,\207?\004\177\303\336ai\344\277OBQ\343?\210\345\277\264B\217k\'\247\324\277\373\230L^\353\220\353\277\336\037\021{\242\266\004@\203C\000\322s\366\352\277~\314\204b\032\377\317\277IX\335GD\247\322?g\0040\371\3518\341\277\3527h\375\030\247\305\277tg\230<@\036\350\277\240\355\331J\030{\300\277E\3376\331\347\003\344?\215+\360\212\353\333\354\277\223\034\255=\344C\364?\247\367 \033T\377\313?v\337\256\200\334\342\360\277\304\242\343\2419\262\364?\200M]\366\264W\346?\377%I\210\306\270\273?\257S\231\257K\275\362\277O\307&\222_\351\345?i\005\300#\252\027\367\277\227\217\350}\037\260\360?\025\323A\2701\006\360\277h\006\2511\353E\352\277\252\341F}Q\177\351\277\252\341F}Q\177\351\277(*\311\364\302\216\372?IN2\352\004\345\321\277$\260\222[\246\014\346\277\'\260\340\224\244m\353?\373\230L^\353\220\353\277.\230\202\024\036\362\347\277\343\312\360\316\177\301\310\277\030N\272B\020\006\365\2777A\254\201\204\352\003@h\006\2511\353E\352\277\370\240\327f\252\225\320?\nu\264\363\036i\356\277Y\257\026K\327\316\347?<\367F p\036\342?\242qm\010v^\360\277\005u\277\235\241W\306\277d\2254\350\314W\323?\\*\217\325\265\316\354?\017i,\320\332[\357\277\205\276\321?\323E\335\277\017\354/cx`\331?r\356\230\352b+\354\277\014\330\213n\373z\262\277B\341\272\273k\377\324\277T6\311\277\373z\346\2775\264M\204V\236\256?\205\274\377#Q\351\346\277\206:\201\226\016\345\361?\340[\365\275b\340\352\277\3577]S\226\270\355\277\275\257\255\266?=\344\277!\272\357\177\347m\341?\035\310\360\333,\210\351?E\3376\331\347\003\344?tijX\302z\336\277\264\31166\311d\353\277GY\0379\006%\363?\220\"qO\206\312\363?\367\"V\364\354\231\365?~N\237\347v\325\366\277\001\307\375@s\211\002@ \276\223\267\353&\356\277MO\020N\303$\375?V4\236\300\370\316\342?g\020\255r\253W\330?\031Y\365\312\017\247\313?O\323\243\013!\010\315?\270\30203e`\373?\033\026)t\247\334\223?\373\225\2214(\006\362?\261P\220\307l\301\334\277\343\312\360\316\177\301\310\277\374\322\205d\267\226\001@ \276\223\267\353&\356\277IX\335GD\247\322?\227\221\272\231\241\014\367\277l~f\222\006\273\365?\233\004\366\331\334x\363\277\023\336.\0073F\321?\031Na_\217\266\367?\366\243\353s\356o\367\277\361)\265\332\321\355\322\277\273\307\000\215C\312\317?\205\276\321?\323E\335\277j\374\244\360*4\314\277c\024\003q\261\257\337\277\342Y\312\276_4\347?\352\274=\2548\010\326\277\013M\257\231\240\020\256\277\373\035\"\r\013\362\353?\310\025\037\342t\036\361?\2231\354\006\244\366\270?\252\341F}Q\177\351\277IN2\352\004\345\321\277O\335Ni`\312\275?\222\365\351\324\'i\244\277\255PB\216n`\307\277v\337\256\200\334\342\360\277E\3376\331\347\003\344?:\370\210\0212\234\362\277\035\274sbki\322\277\347MB\233\033\'\350?\211\272{A\315\355\325?FYx\034\207t\360\277\177\317\333\203\367[\373\277\252_!\323\217\312\361\277\203C\000\322s\366\352\277\256Y\004\336l\364\364?\255\341\224\266O\340\356?Be\247\\J2\362?{\324\017k\331\003\345\277\264B\217k\'\247\324\277\ts;\273\035\\\345\277\222\365\351\324\'i\244\277\207\273\2752\217k\366?\266\003p<\225j\001@\032\310\242\242.\'\344\277\205\276\321?\323E\335\277\353:\277\036\366\003\361\277\206?\003\267\356\355\320?\265\306{\014\006\332\361?x\326\223M]\377\305\277\346\317\300(^+\375\277c\024\003q\261\257\337\277ox\242\200d4\366?O\277MP\242\203\313\277\217e)\221\267\341\002@>\355\351\373.\275\346\277\271\274\305\004D)\371\277U8B\370\374\207\357\277\202A\207\231r\351\341\277\207\273\2752\217k\366?f\022\177\216-\264\356?\302)\344O\\\277\370?wg\346u>\177\355?\275\256\304\250\376\016\361\277KM\360\370Bg\361\277\240\355\331J\030{\300\277\365\'1\370M\362\341?\022\354}\234v\301\316?\347\324\351e\275\344\336?x\364\224f\033F\270?\'\025\343\016\204+\263\277\nu\264\363\036i\356\277\023\340\000#\265\242\347?xe\024Z\274\"\327?\373\230L^\353\220\353\277\270\2735\332\203J\343\277\252\341F}Q\177\351\277y\331\352n:\\\361\277j\004~2\350\231\346?\312\230\324\266\366\261\376?V\275\027\247\034\351\357?\302\242<\205\272\001\362\277~N\237\347v\325\366\277\377%I\210\306\270\273?\177L\315\313\364x\360?\030\324x\377p\225\350?\325\346V\024\0164\276\277\362\302\340Dp\323\264?@f\351M\014\260\342\277E\345\314S\275\266A?\005\004@\252\000{\327?\373\230L^\353\220\353\277]\231<\255\324N\305\277\010u\r\327\237\270\333\277\256\323E!\014e\341\277;w\363\2210\306\360?\033\026)t\247\334\223?;tC\215\322\031\330\277\273\307\000\215C\312\317?\030N\272B\020\006\365\277\264B\217k\'\247\324\277\245k\251\366\323\327\360\277\206\304\330e\016O\301?\225[\032\246t\341\014@\260!\314\362\204\032\221?\207\n\206\365\311\236\226?\240vS1<\225\315\277\306\241\241\260w4\324?)\244\n8b\377\346\277\271B\204\301\244\270\354?\214(\216D\251\240\360\277\247h\240\016\365\333\332\2774\007\314^94\333\277"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_1"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content: "6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277\223\277\217\357\016\272\006\300p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?\223\277\217\357\016\272\006\3006\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?\223\277\217\357\016\272\006\300p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?\223\277\217\357\016\272\006\3006\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277\223\277\217\357\016\272\006\3006\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?\223\277\217\357\016\272\006\300S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?\223\277\217\357\016\272\006\300p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277\223\277\217\357\016\272\006\300p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\277S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@6\211\230G9i\360\277p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\2776\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?S\261\272\363G\326\004@p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?6\211\230G9i\360\277p\331\334\237VC\351?p\331\334\237VC\351?6\211\230G9i\360\2776\211\230G9i\360\277"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content: "j\353\203\236\301\221\354\277\356\270\260\275\357\030\002@\220\307\020-\005+\357\277\306\374\220\364YM\324?K\227\034\251\212+\315?j\221\353\2562\203\374\277u\272\305\303\326\375\354?t9\006\213\222\345\272\277j\221\353\2562\203\374\277\334\272-\341\362\321\315\277\022\240\323\233\355\366\257\277\304\276\212\242$\226\364\277\272\207\347\276\323\357\363\277( \275\2651S\254?*N{\3071\256\327?\321\232+z\323;\360\277c\230N\035\027\224\333?\222\346\201&\022H\350\277\234\\q\031\220\032\360\277\300\274/\220\267\342\255\277\315a\330\274w.\343?\332\002v\375\277_\305?\335\310\322P\204\200\260\277\215\372CG\220\222\362\277\031C\343)\362\361\303\277\325\000\335^\004\017\344\277l\276%w\354\313\325\277IZ\\\024M\351\364\277\250\320\324\221\036\003\311?\356\323j\356\303<\324\277V\220\225\333\212\235\340\277\000t\236\022\371{\361?;\264\020X\237<\010@\271\001[\304\202\r\362\277\367.2`\373\251\320?]\250\307\305\316&\350\277F\247\225QB\276\351?\303\221P\332jM\353?\311\037j\254\324p\000@ZB\026\341\235S\364\2777\314:7\213\215\345\277QWB\036/\220\363?\323 \270t$\036\362\277\3125\344\261\265Z\361?\333\321\316]$\342\360\277\200jr\220\303\317\366?\314o\241\213$Z\363\277\021S\317;\220\364\361\277\366\243\0260\354\232\371?\350\275\267u\010\344\240?\333\321\316]$\342\360\277\240\252\3757I\313\276?\343}V\021fy\332\277\026\033\312F\204\224\006@\035SE\227Zn\365\277J\377}g\306e\335?\345\372\250r\310\\\341?f\337j\251\037\315\350\277U\367\260\334\316b\351\277\264\031\027S\374\034\366\277\017\240v\311\367\n\000\300\365J\304\375T\001\341\277\243\344G\250\321Z\377?L\377\2630\337\035m\277\000\032\006#jm\341?\316A\375\246W\037\365?\361\014\342\n;\307\356\2772\223\347y/\200\370?\225\253Z0\220V\361\277\314G4\205w\333\271\277( \275\2651S\254?\226\213\177\032pG\343\277\216=\212\304\270\203\363\277QR\263\350pc\356\277|\305t\234e\320\373?\225\246\313\372\321)\334\277\360x\214A=\271\374?I\rG6s\221\375?\351\364\257 \367=\347\277\244t\243\003\324\243\367\277ha\3755u\352\360\277{\323=k\022\374\353\277\333\321\316]$\342\360\277%\004\\\200Z2\364\277\364S\376\226C\000\314\277\315\277\271$\315\364\300?\347\347Pn]\004\354?\361#\301\023\273t\274\277\035SE\227Zn\365\277t9\006\213\222\345\272\277\375\343\265 \335\242\272?K\227\034\251\212+\315?\306D\027\235ux\366\277\273\000\203W\375\331\003@,!\035\240\\\350\340?f\223\233\210=\352\330\277\3352\263\200H\353\264?\306\034\252\226\310\371\274\277u\2325ClE\224\277j\232tR\354t\373?RIyO\202d\323?,!\035\240\\\350\340?\255\264\317\212\336;\367?\315\365-\206u<\365\277\257\306nhk\257\303\277i\256\001\226\322\354\256\277\305\005\313\215HL\357\277\363\360Om\341o\336?\300\262q\255\202\321\360\277\303\204\315\310\265\226\362?\232=\000 \203\375\366\277QR\263\350pc\356\277QR\263\350pc\356\277\241n\311\326|\323\205?-\247\251\232\255\312\342?e\377E\277?\334\366\277\336\232\241\325\235\265\363\277\336\335\347R\306\246\364\277\021i\333\360\376\234\351?\007\3674vG\202\317?\320\276\000\376\356\017\370\277\035SE\227Zn\365\277\000\337\002\214\003\371\307?w\3316\275\343\032\346?\372~\210\205\362\341\310\277\032\212r\037\341\232\362\277\3435\320hJN\370?\032\212r\037\341\232\362\2773\'=C-\216\352\277\306\374\220\364YM\324?\211\037\322\361\211K\303?\021\\X\337I\346\360?Pw\0354O\237\341?\374\021\347\233\303m\367?\031\327\031\255H\261\000\300\371\033\332[\220Q\333?\24786PZ=\331?r\333\346\226\356\201\362\277\263\216J-\270\000\323?;\264\020X\237<\010@d\362T]\030\344\004@\367v\270\010\027\325\362\277\340\202\t\246?#\335?\376FdJ?3\330?\251`\341\342UY\355\277k*\320\255\356\275\363\277\022\237\236\\r\327\361?\203\277W\353x4\304\277C/\322%\236\007\370\277IZ\\\024M\351\364\277\315O\306u\004K\345\277\303\314Sq\321\301\324\277\350\270\365\217\n\\\000@\322M\026\234\371\343\370?{\323=k\022\374\353\277\251\013\330(\205w\342?\266\325f\271\3009\340\277)=\257=\266?\321\2776\226w\313\027S\375\277\211\257\336B\301\241\347\2774\300!B\351\310\341\277\251`\341\342UY\355\277\n\235x\'\235\366\321?:\241[\201>\370\242?\021\360\255\250G\364\342\277}\004\301\253\222\374\342?\013>Q\002P\273\354?\260CSy[Q\001@\317\261\017\234\307\027\006@\002\244\214\213\266\024\375?k\203\"\340\205W\354?ZB\026\341\235S\364\277.\265\'\324\244\237\235?\200\371\372\227\264\023\271?\351\320lLi(\006@\006\n\215z\262\332\304?z/\240a\337\221\245\277\303\335\037\373L0\333?F\342\230\350\2502\323\277\315\277\271$\315\364\300?\371\367\265\315\251\212\337\277\347\325>\'\352 \356\277\236\342\375\023\341\374\361\277\204\254\377\346\r\334\316\277\026\373\200\340\361C\357?P*\010VuG\332?\365\017\301f\356\214\327?\322\323\355+\000\035\220\277\235\360\306\342\215(\322\277\355\000\311\025\231\002\353\277<\253\365\004X\214\322\277\345O\262,\231>\354\277\016\205m\216X\364\331\277;\330S,-R\351\277y\001\342O\3376\332\277\007%\265\373\370?\360?\332+gM\263\360\340\2771U\341\'\372\310\330\277S6!K\027\014\336?\314\003\367T\"h\325\277\327<\031\252\373>\252?\340\370\017\324\014\014\300\277\227\305<\364\336F\325\277#\367j\0363:\002@\013yT\231\266/\326\277ENC\037\253$\361\277\246\337\343\035\303\243\360?\353z<\033H \351\277\355p\274\304a\254\306?\325\246Dou\000\364\277\266\353rn/\342\367?\324\033)?f\361\334\277\"\330gu\230^\342\277\003\245_\337\307\031\263\277\246\'j\306\336\316\322\277\313\261\024\265;F\276? [\025\0246{\313\277\211\257\336B\301\241\347\277\356\323j\356\303<\324\277J\377}g\306e\335?\272\207\347\276\323\357\363\277\275\241\311\202\"\340\327\277?\3332\210\340\027\322?\342C\2317\367y\350\277)\201\354m\013\263\265\277,\017\013Y\351\004\343\2771\241\260H\334\253\350\277\344\010rAu\210\361\277#6I\335\355$\320?\002\216\200\326Gl\345\277\335W[Xu\304\362\277\001\341\223@\224\021\214\277IZ\\\024M\351\364\277\270[\363\263\021\034\342\277j\375\225\3454u\352?\235E\320\234^\n\315\277\346\350\226+Uy\343\277qUZ\234\235\237\360\277\324l\207\225\006\001\362?\272D\241A\253\376\362\277\300\031\215\256\306\226\371\277)\211\020\016&\341\007@]m\304.h\262\336?\216H\020\037\360W\007@^@f\007\223\354\347?\370\n\016\322\024\343\324\277\031C\343)\362\361\303\277B\211j\025-\026\350\277>\344l!\317\026\355\277\254h\000j\374X\367\277n\242\223\331\222t\345?/\254v\\\272\224\262\277\354\214\351\306\307\337v\277\301\\\323+\357\207\372\277\372\334i\355G\250\346\277O\314&\356\037\201\354\277=\367\304%:o\342\277M\372\312\322\354\273\332\277>T`\320\227\300\310?H \237:\336\351\362?m\t\257\332\3269\356?\346\350\226+Uy\343\277\272\207\347\276\323\357\363\277\240 \004f\026\264\321?\241\r\254a\253[\334?G-\"L\223\240\353?\013yT\231\266/\326\277\035SE\227Zn\365\277yI\267\002\306T\360\277\203\277W\353x4\304\277\216F\023hru\362?\013yT\231\266/\326\2778\313\364y\223\030\356?\332\222\202N\367\265\351\277=\367\304%:o\342\277!\370B\213\270m\360\277\033\354M\3651&\332?\245f\3324\'x\347?Z\263\215\331\254\017\262\277(\353\314\235\317\035\272?\000\032\006#jm\341?j\221\353\2562\203\374\277\0135\027ia\274\301?\004\272t\341\t@\367\277\371\033\332[\220Q\333?)L\374U\251}\243\277\243\340M:\326\225\345?\342C\2317\367y\350\277\335g\243\230\252 \247?t9\006\213\222\345\272\277q5\344!q\264r?IZ\\\024M\351\364\277\320\017\020J\304,\331\277\371\306\320\241\277o\300?\317{\272\200\306\036\367\277,!\035\240\\\350\340?_\2145(u\317\327?\272\207\347\276\323\357\363\277\321\334\236\243\352\'\273?\177x;_p\373\346\277\324\242\373\366\256H\306\277\030a}Z\330m\230\277>\340r\263\323Q\363\277\214\273\3677cf\353\277j[wM\212;\310?\306\235i\317\014\022\357?vA\230{\037U\346\277\365`\320\262\303\251\370?\213\344[\361<g\370?\3168t\003\236-\366\277,\261)\361\223>\305\277\023\324\033\013\356\234\322?\254h\000j\374X\367\277>\026\310\316\324J\002@\0135\027ia\274\301?u\004\026s0\260\250\277\272\341\177\256b\376\343\277\213\316O<\316\276\340\277\021i\333\360\376\234\351?QR\263\350pc\356\277_\032L)(\351\207\277\323zPd\263,\342\277Z=\207\253\337&\337\277IZ\\\024M\351\364\277VU\222D$)\327?K\227\034\251\212+\315?\230\267s%2\033\365\277\2028\20530\335\332\277\354\214\351\306\307\337v\277IZ\\\024M\351\364\277=\367\304%:o\342\277\201K\3357\2335\320\277\306D\027\235ux\366\277\227\305<\364\336F\325\277F7\242\242y\024\316\277\272H\233\257\246\303\354\277\213\316O<\316\276\340\277\306\034\252\226\310\371\274\277\203\204TT\022\300\352\277W\270@n\206\271\304\277\207\2073\260\305\205\323?IZ\\\024M\351\364\277\303\221P\332jM\353?z\003a\301gg\256?\005\254\253\022]\024\347?z\225\206#\2507\360?\251\013\330(\205w\342?\344\010rAu\210\361\277\303\261\231@\375\235\002@N\205\346\002\374\312\361\277\246\236\232W\030\225\004@:\234\231\233@p\002@\n\235x\'\235\366\321?!\363\263U\372@\333\277\376FdJ?3\330?i\244C\263\235\333\361\277\311\246\316\023\253\206\360\277d\300\371\257\022\260\357\277\331j\327\273\373\231\325?\371\005\316\246!\251\363?+{\265\217\353\366\360?\367\320P\370\245\343\342\277\340l\375\360\320z\365?\254\027\361\035\'<\346?\211\257\336B\301\241\347\2772\032y\365\2370\177\277\331F\263-\025\323\331\277\266\325f\271\3009\340\277\324\242\373\366\256H\306\277\211\352\341\331\'\026\301\277\272\341\177\256b\376\343\277\306\374\220\364YM\324?F\342\230\350\2502\323\277&\206\237\002\345\\\310\277\001B\261\265e\211\325\277;\330S,-R\351\277\000\036\000\221e2\373?\r]\302\373\\\330\345?ha\3755u\352\360\277&\273\217\032G\222\312?,v&Z-\312\353\277 \220\005,\230\260\315?\267\302sPI\005{?\264\266\365\277\263\034\347\277(\353\314\235\317\035\272?\377\200!$\2562\352?y\001\342O\3376\332\277\305\nZ\303\006y\364?\306\367\001\277\233 \377?J\377}g\306e\335?\025\374\306\235\351\270\346\277{~4\261A\032\341?i\244C\263\235\333\361\277dk\360\365A\316\344?\216\237e\232\t\017\333?\212<\367)N\223\003@\322.\201C\321I\322\277/-6\225\376\254\344?\272\341\177\256b\376\343\277\266\211\227\230\336V\320\277t9\006\213\222\345\272\277\327\337\273\213\354\212\376?~\361h\247\'\244\355?\355\000\311\025\231\002\353\277\300s%\236U\245\351\277IZ\\\024M\351\364\277\347\2005m\031?\343?#6I\335\355$\320?\271z\366\\\254\367\001@\320\017\020J\304,\331\277>\366~hB\372\352?u\004\026s0\260\250\277_\324\273\320\220\372\371\277\357\3446x?\253\332?%\377\314J\234\005\337\277$\r\345#\024$\363?IZ\\\024M\351\364\277\'\326\267\233\215\367\365?\364\210\356\256\2455\316?QR\263\350pc\356\277\356H\236\310\177 \361?\273\'\305qD\226\234\277\320\017\020J\304,\331\277(/\n\316$\221\336?\263\337Yy\215\035\364?\216\237e\232\t\017\333?\260^\r\252/u\323\277\203\277W\353x4\304\277\215T\3346\037\241\342\277}^Y\233!\013\363?IZ\\\024M\351\364\277\370\275\370\363:\213\355\277r\372{\357\026\034\331?\251`\341\342UY\355\277\220`\365+\301e\346\277\373:KU\235n\324?$^\364o\351@\344\277;\264\020X\237<\010@\201\\\251\301\026\244\326?\000o\017\335:O\354\277\010:\312\375:f\264?`\306\362\001\344\316\351?&Bb\322\217\351\323?YP\337\257J\177\324\277\'|\037\254\376\350\345?j[wM\212;\310?u\2325ClE\224\277\273\3409\361j\211\354?NF\232\363\316\236\352\277\336\236\233C\231z\355\277\367v\270\010\027\325\362\277\220r\007s4I\344?;\264\020X\237<\010@>\217cg\3764\342?/\202?O\317\216\357\277\034\310)gK_\336\277_\243\365\352M.\000@\014t\024n\303\365\364?\270\n\344g<\377\360?\372\356{4\273\213\344?\321\232+z\323;\360\277\031\256G\243\374n\372\277\013\212 #2\236\334?\006\n\215z\262\332\304?F7\242\242y\024\316\277;\264\020X\237<\010@\003\215:\031P\367\355?2\032y\365\2370\177\277\261K\265\245\304\034\336\277}\004\301\253\222\374\342?\306D\027\235ux\366\277QR\263\350pc\356\277,\265riZ\366\362\277\361K.\032h\363\365\277hw\t\353\343\222\350?\306\220\346\275W[\366?lq\020\231\022t\356\277\273\202X\211\025\303\336\277\322.\201C\321I\322\277\357\316*\303\320\002\363?IZ\\\024M\351\364\277JP\215\263\233\202\376?\336\236\233C\231z\355\277\006\232\231\313\3510\351\277\243\245J\243o!\314?\345O\262,\231>\354\277\204\254\377\346\r\334\316\277\360\010\350\234?\002\365\277x\307$vp7\350\277\305zl\270vq\005@\243\245J\243o!\314?\234X(\241\311b\302\277qs\2517\316\304\317?}\004\301\253\222\374\342?1\263\302\217O\217\346?\016\251\221\034?\273\325?\370\302\207)\371\267\362?\365\261\337\376\230\306\351\277\310\r\352\024\357K\371\2771\021\244\367\244U\304?\277\337\317\324W\227\367?\230\267s%2\033\365\277d\274\377A\027\353\365\277>\230\235\000\3553\335\277\240 \004f\026\264\321?\201K\3357\2335\320\277\346\227\207\337\177\\\362?fs\202\346\316=\260?.\026W\214~\377\266?\237%D\221\t\356\362\277&\206\237\002\345\\\310\277:\241[\201>\370\242?\272\246|\027\374\211\332?\303\335\037\373L0\333?\233\342!s\374y\337?7\314:7\213\215\345\277\227\2129]x\322\353?\230\267s%2\033\365\277\324y\n\247\273\267\352?\214f\356}\222\204\340?\013\212 #2\236\334?\310\201\3271\263\272\316?\030a}Z\330m\230\277\037\331\321\221\253P\367\277}k\334\254\326\301\353?~\361h\247\'\244\355?0y\005\266\340\217\324?\203\200Z\346\026\373\360\277\260^\r\252/u\323\277\035SE\227Zn\365\277\036\254\227\311\361\007\356?\000t\236\022\371{\361?:\352es\2405\347?\220\314\237b\303W\364?\216s\337\337\271|\002@\376\201g\341\245\247\341\277P\013s\375L\255\363\277\314o\241\213$Z\363\277\035\013\277\356>C\323?\266\211\227\230\336V\320\277\246\337\343\035\303\243\360?\023\335U\244\334\233\355\277R5jQ\221\236\000@\341U\253~j]\346?\361\003\250qL\310\323?\033\354M\3651&\332?\314o\241\213$Z\363\277\301\244\250\336\325\245\340?\007\302D^\345L\315\277QR\263\350pc\356\277\360x\214A=\271\374?\311\252\310\201\246K\352\277\250ep\030\024\206\362?\362\216t\227\220\344\366\277\264\266\365\277\263\034\347\277\207)RHp\277\345\277\355\000\311\025\231\002\353\277\324\022\357\245w\362\341?\356\230gW]\310\352?\004r\3568\356\024\325?X\026\"\326\333\177\342\277\230#\036\\4\r\343?\035\013\277\356>C\323?\303\335\037\373L0\333?\026F\231\007N\271\001@\240 \004f\026\264\321?\341\026_o=1\377?\334e$\'\"\360\322\277u\004\026s0\260\250\277\272\341\177\256b\376\343\277YP\337\257J\177\324\277\264\266\365\277\263\034\347\277\027\3404\000\220a\326?]\343\312\\5\233\301\277F.h\t\213\025\343\277\300\274/\220\267\342\255\277\230#\036\\4\r\343?\273\'\305qD\226\234\277,%\027\016X\255\372?\006\n\215z\262\332\304?Y\234\256\320,b\344\277\273\'\305qD\226\234\277;\264\020X\237<\010@\261PD\333\202I\363\277\001f\325CLP\321?\315\277\271$\315\364\300?/\254v\\\272\224\262\277\233\342!s\374y\337?,!\035\240\\\350\340?$^\364o\351@\344\277f\337j\251\037\315\350\277\305\001\321\037M\207\365\277\351m\335h\256\346\355?\215T\3346\037\241\342\277\235\360\306\342\215(\322\277ha\3755u\352\360\277\211\352\341\331\'\026\301\277\247s9\347\300\261\342\277\322\323\355+\000\035\220\277\362\376\030<\216\233\376?\330\273\346\007\321\266\366?\346\350\226+Uy\343\277\370h\3579j\251\342?]\343\312\\5\233\301\277|l\"j\3166\343\277\365\261\337\376\230\306\351\277\027\314%\002\237\233\003@7\2217\240$\031\334?\351\250\340\377\024[\327\277\023\335U\244\334\233\355\277\274}\030^\"\211\375?\356?\025%\306.\362\277\031P\265Er\233\360?\206\214s\333\270\277\364\277\327\007)\222\231\t\270?lv\237\316\320\240\363?Q\215\266\177\327\327\307\277\030x\323AT\'\306?\353\307Q\371!x\320\277#6I\335\355$\320?\236\342\375\023\341\374\361\277#\327!\270\240\351\352?ENC\037\253$\361\277\tQ\251\006\273\023\342?\376FdJ?3\330?\257\312\267\3401g\361\277\234X(\241\311b\302\277\300\"\026R\200\210\370?l\317\361\000h:\334?\376\201g\341\245\247\341\277QR\263\350pc\356\277\021\265\252\021\341\177\331?\177\230\313\337\332\263\237?)L\374U\251}\243\277H\234\317=d\325\277?|l\"j\3166\343\277\315\277\271$\315\364\300?t\315\035\310AV\342?\0135\027ia\274\301?\013\212 #2\236\334?\000\337\002\214\003\371\307?#\327!\270\240\351\352?\224\312\357\210\270\360\327?\035\013\277\356>C\323?\227x\'\026\005\357\355\277.qT\177\254\321\003@\226-\236\262\032\201\305\277\271\001[\304\202\r\362\277\300\262q\255\202\321\360\277\333\321\316]$\342\360\277\251`\341\342UY\355\277\307\3518\360\356\364\336?\371\033\332[\220Q\333?\322r\276s&\275\266\277\361\003\250qL\310\323?\006_\2264\203\274\337?a)\202\345\236\020\002@;\264\020X\237<\010@n6\351\242\220\202\367\277\006\232\231\313\3510\351\277\266\211\227\230\336V\320\277\303!]+\242\243\317\277b\306`RV\020\003\300\272\341\177\256b\376\343\277&\206\237\002\345\\\310\277]\030\273t\227\320\303?\226D\364\231\226:\223?\266\325f\271\3009\340\277P\013s\375L\255\363\277\025\374\306\235\351\270\346\277\031G,\242\270\251\361\277Q\276]\037sU\374?i\376\333\242,\352\341\277IZ\\\024M\351\364\277\\!\365\r\206\317\356?Y\025\334\030\344\n\353?\303\204\315\310\265\226\362??\3332\210\340\027\322?\r\"\277d\366c\314?l\276%w\354\313\325\277\001\007\256\036\377\024\354?1\263\302\217O\217\346??#\2710\374B\364\277\310\201\3271\263\272\316?\tZ\343\237\251\022\335\277\246F\377\036\007i\371?\306D\027\235ux\366\277\232F\211\303<\357\365?\245f\3324\'x\347?\n\235x\'\235\366\321?\r]\302\373\\\330\345?\371\306\320\241\277o\300?\335\243*yW\247\362?\372U\2275\377P\355?\001aF\016\216#\374?\372H\024$J\232\364?\272\341\177\256b\376\343\277fX\230\361\326u\357?\344x\026\346r?\371?\372\356{4\273\213\344?\254\027\361\035\'<\346?O\031<\314\371\330\323\277\232\365ywg\322\324?wiC\016\033q\312\277\235\265\303K\'\264\350?\323zPd\263,\342\277a\253\246!\202\354\320?N\205\346\002\374\312\361\277\323?M\315L\270\330?\357\206U\020\352\344\354\277\376\201g\341\245\247\341\277( \275\2651S\254?j\221\353\2562\203\374\277\355\000\311\025\231\002\353\277I\022\326k1\276\322?\211\257\336B\301\241\347\277\370h\3579j\251\342?\016eT\354\351G\261?\202\311)\247]\370X\277\363fV\233\256X\301\277\300\274/\220\267\342\255\277ha\3755u\352\360\277=\004H7\357%\373\277\221R,]\024:\366?:Q\201t\344\372\357?\201\376\307Y\301\335\350\277\234\035%\nc\356\350\277\210\301\360\2114\205\345?\024hq\324\353\252\364?\030t\212\311\215o\370?\327\205#\234]|\356?\305\001\321\037M\207\365\277\tQ\251\006\273\023\342?\362\357\230s[\002\001@=\274\301\216\323\372\330?9\260\250\23116\325?\364\376\364\334r\036\321\277\365\017\301f\356\214\327?+\250\201\0073\376\000@Q\215\266\177\327\327\307\277\306D\027\235ux\366\2773tR!\007\346\321\277\211\352\341\331\'\026\301\277\324\033)?f\361\334\277\206\272\244V\237\212\261\277\312\362\2354\215i\360?N\307Y,\023\267\274?\221\276\326\223\026,\324?\216\332h1p\203\344\277\313\333K\302&L\341?I\263\256F\344\202\355?M\372\312\322\354\273\332\277;\330S,-R\351\277\366\342b?\031\307\340?;q8+\351\214\340\277he\367\243p\257\352\277a\264\340\272p\353\353\277cCEcF\262\300?\350\275\267u\010\344\240?\271M*\345d\360\361?\227\305<\364\336F\325\277[4M\022\361\'\344?u\250\263|c\032\357\277\220g\201\030\375t\000@\322\323\355+\000\035\220\277]W\270y\371\t\367?3tR!\007\346\321\277\231\262\344\357s\356\337\277<p\362m\361\027\351?\376FdJ?3\330?IZ\\\024M\351\364\277\033\354M\3651&\332?\036\370f\352\323\352\335?\306\330lfs\206\330\277;\264\020X\237<\010@O\031<\314\371\330\323\277y\001\342O\3376\332\277C/\322%\236\007\370\277{\323=k\022\374\353\277}\362\256d\037\031\345\277t9\006\213\222\345\272\2773\326-\367Wq\371?\035SE\227Zn\365\277\323\323\242\226J\306\372?\303\314Sq\321\301\324\27768\345m\215\177\363?@\267\016\372\371P\326\277;\264\020X\237<\010@\227\305<\364\336F\325\277}k\334\254\326\301\353?\327\235Hb\325\236\263\277\264\"\240\366\265\016\365?\013\212 #2\236\334?,!\035\240\\\350\340?}Y\312ec\336\355\277\013\212 #2\236\334?-h]\213\200\236\373?Tq$\342}\200\347\277j[wM\212;\310?\356\230gW]\310\352?\246\'j\306\336\316\322\277\0363j\201:_\347\277\366\353\234\330\007\306\333\277\300\014\n\235\021\340\340\277\023\030Y;C\020\307\277]\343\312\\5\233\301\277\363+S\004H\344\347\277H \237:\336\351\362?\313\'\033\343\010/\321?\342\241z\237L@\326?\334\261\363G\004\323\342\277\276\355\230\243\004\303\347\277\017\321<\257:\327\351\277vA\230{\037U\346\277\216\332h1p\203\344\277\324\242\373\366\256H\306\277\272\207\347\276\323\357\363\277Z\233h\0235\355\354?\251\013\330(\205w\342?,\265riZ\366\362\277\027(\273\250\253\214\370\277\211t\333\253Z-\336?\030x\323AT\'\306?-\236\321\354(\346\317\277\304\271\373lfi\337\2774o\022\366\023\254\360?\2523\203\273\200\223\326\277V\220\225\333\212\235\340\277q\316\3654\307\211\000@u\024^\263e\014\375?\334e$\'\"\360\322\277;\264\020X\237<\010@\311\037j\254\324p\000@#~\317\205\tP\362\277\314o\241\213$Z\363\277\003\017@\017\214\204\267?\356?\025%\306.\362\277\341U\253~j]\346?\236<\226\003p\013\342\277,v&Z-\312\353\277\213\316O<\316\276\340\277\2207\004\334\315\324\312?\360\036\364Q\256\252\354?h\262\014\202J\007\322\277\306\347\271~f\304\252\277}Y\312ec\336\355\277\311\367\335_\200\243\321\277\214o(\027\201\203\333\277\300\262q\255\202\321\360\277)L\374U\251}\243\277\210\033\211y\303\223\365?\304\271\373lfi\337\277\334\261\363G\004\323\342\277\3028\376\247\323\263\362\277\'\036>D\251\"\330\277\302\360w\377\267\210\320?i\256\001\226\322\354\256\277c\323Q\264}\010\345\277P*\010VuG\332?\314o\241\213$Z\363\277%P+\241<\025\364?q>\271\037l\217\315\277\312\351\024\221\323w\361\277\361\014\342\n;\307\356\277c\230N\035\027\224\333?Y\245\350i\033a\317\277\345\234\307\ns\226\323\277.6p.\355\253\337\277u\004\026s0\260\250\277\021\002\300\357\272\327\340?n\363\242%h\221\366\277\375\010^\370\t|\370\277\261Y\315~<;\362?VP\251\3461\307d?o\331\213\204\201\316\253\277N\205\346\002\374\312\361\277QR\263\350pc\356\277QR\263\350pc\356\277\262B{\014\326\035\343?\237[\231\254\n\347\001@)\201\354m\013\263\265\277I\022\326k1\276\322?$\r\345#\024$\363?^\005cp,x\316?\376\227s\226\024P\371?\036\314\340/\204X\005@j\360\022\324\177\276\361?@\267\016\372\371P\326\277\272\207\347\276\323\357\363\277.Z\224\274\323r\333?\263\337Yy\215\035\364?p\257\362\213,\256\340\277\314o\241\213$Z\363\277\344\010rAu\210\361\277\177\212M\246\343\336\344?7<.\346S7\301?\300\031\215\256\306\226\371\277\'\343:\255B\256\356?\266\023\221j\021n\315?\324\327\353\016\021~\310?\243\245J\243o!\314?\000\337\002\214\003\371\307?Hc\345\267\006\333\363?\033\354M\3651&\332?QWB\036/\220\363?\363\321\272\024\271\325\367\277\317{\272\200\306\036\367\277\261o\3313\253\343\331?v\360\210/J8\365?\216\237e\232\t\017\333?\334e$\'\"\360\322\277\023\210L\352\013\272\342?I\022\326k1\276\322?\306\347\271~f\304\252\277\364\255\345\220\235\001\360\277\340-\000\354nA\302?\214\273\3677cf\353\277\334\261\363G\004\323\342\277~\230\026u\220\n\365\277\363+S\004H\344\347\277_\032L)(\351\207\277[\";\313}D\346\277\024u\364\345\240a\355?\270\n\344g<\377\360?F7\242\242y\024\316\277\016eT\354\351G\261?\036\347\232`X|\327\277\275\241\311\202\"\340\327\277.\026W\214~\377\266?\316n\311\036\237&\005@;\264\020X\237<\010@\351\250\340\377\024[\327\277\003\330R@\254l\000@\226D\364\231\226:\223?\216A\2042\264H\355\277u\255B\262!G\364?\007\3674vG\202\317?\371V\335\362\366\305\344\277\322r\276s&\275\266\277\021\360\255\250G\364\342\277\215\262\275\236tg\320?,\265riZ\366\362\277>\344l!\317\026\355\277\3352\263\200H\353\264?\257\235\353h\352_\001\300\332\365\243\341?\266\370\277\325\246Dou\000\364\277\304\030#\222\263\244\344\277q>\271\037l\217\315\277\024u\364\345\240a\355?\035SE\227Zn\365\277\241\374\337\327/\355\325\277n6\351\242\220\202\367\277\356?\025%\306.\362\277\002\216\200\326Gl\345\277w@R\276\'\340\356?\013\212 #2\236\334?xm\214\206\341(\370\277\333\321\316]$\342\360\277=\367\304%:o\342\277ha\3755u\352\360\277\260#\n\023\311\000\352?\211\257\336B\301\241\347\277&K\234k~\350\356\277\271M*\345d\360\361?\245T\310\355\263\224\351\2777\2217\240$\031\334?\334\261\363G\004\323\342\277\372?\213\200\220\250\365\277W}=\327\037E\353\277IZ\\\024M\351\364\277/-6\225\376\254\344?\365\261\337\376\230\306\351\277\314o\241\213$Z\363\277\235\017\\;\266\302\370?\272D\241A\253\376\362\277\346\216\376;\306j\363\277QR\263\350pc\356\277^{i\236\371`\321\277c\202Bh\250\353\363?\372U\2275\377P\355?fs\202\346\316=\260?Z=\207\253\337&\337\277N\205\346\002\374\312\361\277he\367\243p\257\352\277,!\035\240\\\350\340?\232\365ywg\322\324?F7\242\242y\024\316\277\372~\210\205\362\341\310\277qs\2517\316\304\317?z\346\225o}T\341\277C/\322%\236\007\370\277\313\'\033\343\010/\321?\023\030Y;C\020\307\277\272\341\177\256b\376\343\277\300\274/\220\267\342\255\277&\206\237\002\345\\\310\277\227\305<\364\336F\325\2774\031tt\200b\372?9\370.BMa\367\277\363fV\233\256X\301\277IZ\\\024M\351\364\277IZ\\\024M\351\364\277\000\032\006#jm\341?\251`\341\342UY\355\2776\354\025M\253\234\363\277i\256\001\226\322\354\256\277\023MIS\245E\311?t\315\035\310AV\342?\212G}\204\205g\347?\334\261\363G\004\323\342\277\370\302\207)\371\267\362?t9\006\213\222\345\272\277\354\023!\032\004[\340\277VP\251\3461\307d?4\031tt\200b\372?|H\337\225@!\002@)=\257=\266?\321\277\235\243\261\004\264\320\352\277\373\316\240\036\233|\366?\273\'\305qD\226\234\277-I\3102X\004\325\277\300\262q\255\202\321\360\277-h]\213\200\236\373?d\274\377A\027\353\365\277\232\360\352A\251\245\377?\262\234\023\374d,\363?\370\271\376\205?\306\363\277iW.\325\303\203\372?\272\207\347\276\323\357\363\277\241\270\242\247\332y\301?\035SE\227Zn\365\277*N{\3071\256\327?\262\301\273\323\221\005\261\277\334e$\'\"\360\322\277t9\006\213\222\345\272\277\221\271G^X\377\376?\023\210L\352\013\272\342?/\254v\\\272\224\262\277\250\320\324\221\036\003\311?\tQ\251\006\273\023\342?&Bb\322\217\351\323?j\221\353\2562\203\374\277\246\337\343\035\303\243\360?\373:KU\235n\324?9d\331xOS\345?\346A\351]\354\022\374?\2028\20530\335\332\277\224\005\363\037\037e\341\277*\211~^\230\"\341\277\370h\3579j\251\342?&\344\200j:#\346\277\340-\000\354nA\302?\260#\n\023\311\000\352?\357\037:\017\246\037\344\277\275f\306\353\273k\356?\351\250\340\377\024[\327\277Z=\207\253\337&\337\277\213\316O<\316\276\340\277\306\374\220\364YM\324?Q\215\266\177\327\327\307\2773\326-\367Wq\371?P*\010VuG\332?$kw\201\236\367\374\277H\033\020\005 \275\355\277V\220\225\333\212\235\340\277\300\262q\255\202\321\360\277a\264\340\272p\353\353\277\240q\023\262\353\320\362?\355;\314\254\377v\304\277\273y\036\360&\304\343?(j\re\213\005\350\277u\004\026s0\260\250\277T\362\343\032\302\230\271?$^\364o\351@\344\277IZ\\\024M\351\364\277\251`\341\342UY\355\277q\316\3654\307\211\000@n\220\201\222\037\221\347\277\355\000\311\025\231\002\353\277\257\306nhk\257\303\277F7\242\242y\024\316\277t9\006\213\222\345\272\277\370\275\370\363:\213\355\277;\264\020X\237<\010@i\237\264}\337\256\334\277\276\223\000\264u\264\367\277\355\000\311\025\231\002\353\277\332\365\243\341?\266\370\277\025\301\303\006\203D\335?\n\235x\'\235\366\321?\3275Z\r\200\324\364?\211\037\322\361\211K\303?\363\360Om\341o\336?QR\263\350pc\356\277\314o\241\213$Z\363\277\341\257Cn\371k\366?\027\3404\000\220a\326?;\264\020X\237<\010@f\223\233\210=\352\330\277\243\325\307\337\236\301\001@<\253\365\004X\214\322\277\266\325f\271\3009\340\2777<.\346S7\301?\203\204TT\022\300\352\277ha\3755u\352\360\277\346\255\223\224\356\004\332?;\264\020X\237<\010@\006_\2264\203\274\337?{\330\314\240\320(\361?\227\305<\364\336F\325\277*\360\231_\334\347\351\277\327\235Hb\325\236\263\277\271\001[\304\202\r\362\277\027\3404\000\220a\326?EaP\216`&\221?J\377}g\306e\335?_\032L)(\351\207\277\310\201\3271\263\272\316?\254\2261\345\342#\264\277\205$\205\206c\365\265?\235\360\306\342\215(\322\277\302nS\303\324\254\001@\241\374\337\327/\355\325\277\210\301\360\2114\205\345?\014\036v\354/\254\376?VP\251\3461\307d?\332\315\205\345]*\303\277\366\353\234\330\007\306\333\277\027\3404\000\220a\326?\230\326\010~Z\265\333?IZ\\\024M\351\364\277\001\341\223@\224\021\214\277\226\241\213\317\336\357\372?\364\303\361E\014\252\347?\335g\243\230\252 \247?u\004\026s0\260\250\277j\221\353\2562\203\374\277\272\341\177\256b\376\343\277\351\320lLi(\006@Ju\204\225\223N\300\277p\026\016\215ps\351\277H \237:\336\351\362?\260\r\376]ZX\362\277Q\302\246\2279\r\312?\214o(\027\201\203\333\277\207\317\271X\341\260\365\277\362\244\200L\377\214\356?\311\246\316\023\253\206\360\277i\244C\263\235\333\361\277g)=\023\204\315\003@&\344\200j:#\346\277\3076N\316\310L\346?V\220\225\333\212\235\340\277\314o\241\213$Z\363\277QR\263\350pc\356\277\221\257\211{#\356\241?\014\036v\354/\254\376?;\264\020X\237<\010@A\003\336\032\3343\346\277B\233|\\\240\371\345?\3130U|\367-\354\277s\216\321\270\024*\373?H\027\026\227$\370\363\277\014\013i}z\252\236\277\351m\335h\256\346\355?\006\331\345\332\026]\360\277t9\006\213\222\345\272\277"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_3"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content: "\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277\217W\243\027u\307\000@\255[N\177\202I\370\277g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\255[N\177\202I\370\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\n?\262\302L\220\006@o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\255[N\177\202I\370\277o\031aR\246o\351\277)\340(\331:\375\365?\217W\243\027u\307\000@)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277Q\025\266\352\230\355\001\300\217W\243\027u\307\000@\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277\314\374\304\225p\266\007\300o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\255[N\177\202I\370\277\255[N\177\202I\370\277\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277\314\374\304\225p\266\007\300\n?\262\302L\220\006@\217W\243\027u\307\000@o\031aR\246o\351\277g\"\026\006\027\327\344?\n?\262\302L\220\006@)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277Q\025\266\352\230\355\001\300\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277Q\025\266\352\230\355\001\300o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?\217W\243\027u\307\000@g\"\026\006\027\327\344?\217W\243\027u\307\000@\255[N\177\202I\370\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?\255[N\177\202I\370\277)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277\255[N\177\202I\370\277\255[N\177\202I\370\277\037\334+1=b\262\277\255[N\177\202I\370\277\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\n?\262\302L\220\006@\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277g\"\026\006\027\327\344?\n?\262\302L\220\006@)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?\217W\243\027u\307\000@o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?\255[N\177\202I\370\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\255[N\177\202I\370\277\255[N\177\202I\370\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?\n?\262\302L\220\006@\217W\243\027u\307\000@o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277\n?\262\302L\220\006@\217W\243\027u\307\000@)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\217W\243\027u\307\000@o\031aR\246o\351\277\217W\243\027u\307\000@\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\255[N\177\202I\370\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\255[N\177\202I\370\277)\340(\331:\375\365?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\217W\243\027u\307\000@)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?\037\334+1=b\262\277\217W\243\027u\307\000@g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?\217W\243\027u\307\000@g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?\217W\243\027u\307\000@\217W\243\027u\307\000@)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\n?\262\302L\220\006@g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277\217W\243\027u\307\000@\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277g\"\026\006\027\327\344?)\340(\331:\375\365?)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277Q\025\266\352\230\355\001\300\037\334+1=b\262\277\217W\243\027u\307\000@\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?Q\025\266\352\230\355\001\300o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?\255[N\177\202I\370\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?)\340(\331:\375\365?\217W\243\027u\307\000@\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\n?\262\302L\220\006@\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?\217W\243\027u\307\000@o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?)\340(\331:\375\365?\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277\255[N\177\202I\370\277\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?\255[N\177\202I\370\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?\255[N\177\202I\370\277g\"\026\006\027\327\344?\255[N\177\202I\370\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?\217W\243\027u\307\000@g\"\026\006\027\327\344?)\340(\331:\375\365?\255[N\177\202I\370\277\217W\243\027u\307\000@\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277\217W\243\027u\307\000@g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?\217W\243\027u\307\000@o\031aR\246o\351\277\n?\262\302L\220\006@o\031aR\246o\351\277\255[N\177\202I\370\277\255[N\177\202I\370\277\037\334+1=b\262\277F\344\323@H\177\r\300g\"\026\006\027\327\344?g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\217W\243\027u\307\000@\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?g\"\026\006\027\327\344?)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?\217W\243\027u\307\000@o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277\255[N\177\202I\370\277\217W\243\027u\307\000@o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277\255[N\177\202I\370\277\217W\243\027u\307\000@o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?)\340(\331:\375\365?\255[N\177\202I\370\277\255[N\177\202I\370\277\255[N\177\202I\370\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\217W\243\027u\307\000@g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?\037\334+1=b\262\277g\"\026\006\027\327\344?)\340(\331:\375\365?\255[N\177\202I\370\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277Q\025\266\352\230\355\001\300o\031aR\246o\351\277o\031aR\246o\351\277Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\n?\262\302L\220\006@o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277\n?\262\302L\220\006@o\031aR\246o\351\277)\340(\331:\375\365?\255[N\177\202I\370\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?\255[N\177\202I\370\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277\n?\262\302L\220\006@\037\334+1=b\262\277\n?\262\302L\220\006@g\"\026\006\027\327\344?Q\025\266\352\230\355\001\300o\031aR\246o\351\277g\"\026\006\027\327\344?\255[N\177\202I\370\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277\255[N\177\202I\370\277\255[N\177\202I\370\277g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?\217W\243\027u\307\000@\037\334+1=b\262\277o\031aR\246o\351\277\255[N\177\202I\370\277)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277\217W\243\027u\307\000@g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?Q\025\266\352\230\355\001\300\255[N\177\202I\370\277)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\255[N\177\202I\370\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277)\340(\331:\375\365?\n?\262\302L\220\006@o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?)\340(\331:\375\365?o\031aR\246o\351\277)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\314\374\304\225p\266\007\300\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277)\340(\331:\375\365?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277Q\025\266\352\230\355\001\300\255[N\177\202I\370\277\217W\243\027u\307\000@g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277F\344\323@H\177\r\300g\"\026\006\027\327\344?Q\025\266\352\230\355\001\300g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\n?\262\302L\220\006@\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?\255[N\177\202I\370\277\255[N\177\202I\370\277\037\334+1=b\262\277o\031aR\246o\351\277)\340(\331:\375\365?)\340(\331:\375\365?o\031aR\246o\351\277\217W\243\027u\307\000@o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277\n?\262\302L\220\006@)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?\037\334+1=b\262\277)\340(\331:\375\365?\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?\255[N\177\202I\370\277o\031aR\246o\351\277o\031aR\246o\351\277)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277)\340(\331:\375\365?\255[N\177\202I\370\277o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277)\340(\331:\375\365?o\031aR\246o\351\277o\031aR\246o\351\277o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?o\031aR\246o\351\277o\031aR\246o\351\277\037\334+1=b\262\277o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\217W\243\027u\307\000@o\031aR\246o\351\277g\"\026\006\027\327\344?)\340(\331:\375\365?g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277g\"\026\006\027\327\344?o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277\255[N\177\202I\370\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277\037\334+1=b\262\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277g\"\026\006\027\327\344?g\"\026\006\027\327\344?\037\334+1=b\262\277)\340(\331:\375\365?o\031aR\246o\351\277\037\334+1=b\262\277\037\334+1=b\262\277\255[N\177\202I\370\277o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?)\340(\331:\375\365?g\"\026\006\027\327\344?\037\334+1=b\262\277o\031aR\246o\351\277g\"\026\006\027\327\344?o\031aR\246o\351\277\037\334+1=b\262\277)\340(\331:\375\365?\037\334+1=b\262\277o\031aR\246o\351\277"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_4"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_5"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_6"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_7"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_8"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_9"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_10"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_11"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_12"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_13"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_14"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_15"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_16"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_17"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_18"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content: "\001\001\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\001\001\001\001\000\001\001\000\001\001\001\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\000\001\001\001\001\000\000\001\001\001\001\001\001\001\001\000\000\001\001\001\000\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\001\001\000\001\001\000\000\001\001\001\001\000\001\001\000\001\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\000\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\000\001\000\001\001\000\000\000\001\001\001\000\001\001\001\001\001\001\001\001\001\001\001\001\001\000\000\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\000\001\001\000\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\000\001\001\001\000\001\001\001\001\001\000\001\001\001\001\001\001\000\001\001\001\001\000\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\000\001\001\000\001\000\000\000\001\001\001\001\001\001\000\001\000\001\001\000\001\001\001\001\001\001\000\001\000\001\001\001\001\001\000\001\000\001\000\001\001\001\000\000\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\000\001\001\001\001\001\001\001\000\000\001\001\001\001\001\001\001\001\001\001\001\001\001\001\000\001\000\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\000\001\001\001\000\001\001\001\001\001\001\001\001\001\000\000\001\001\000\001\000\001\001\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\000\001\001\001\001\001\001\001\000\001\001\000\001\001\001\001\001\001\001\000\001\001\000\001\001\001\001\001\001\000\001\001\001\000\001\001\001\001\001\001\001\000\000\001\001\001\001\001\001\001\001\001\001\001\001\000\000\001\001\001\001\001\001\000\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\001\000\000\001\001\001\001\001\001\001\001\000\001\001\000\001\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\000\001\000\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\000\000\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\001\001\001\000\000\001\000\001\001\001\001\001\001\000\001\001\001\000\001\001\000\001\000\001\001\001\001\001\001\001\001\001\001\000\001\001\000\001\001\000\000\001\000\001\001\000\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\000\001\001\001\000\001\001\000\001\001\001\001\001\001\000\001\000\001\001\001\001\001\001\001\001\000\001\001\001\000\001\000\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\000\001\001\001\000\001\001\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\000\001\000\001\000\001\001\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\001\000\001\001\000\001\001\001\000\001\001\001\001\001\000\001\001\000\001\001\001\001\000\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\000\001\001\001\000\001\001\001\000\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\000\001\000\000\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\000\001\001\001\001\000\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\001\000\001\001\000\001\001\001\001\000\000\000\001\001\001\001\001\001\001\000\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\000\001\001"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_19"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content: "\262#!\022Q6\204?W\256+J\337&\357?\207\366\323\200d\235\274\277-\200{j\251\016\277\277\326\324D\262L\221\365?b\304\022L\3256\360\277\037\366u\315\000\233\343\277\340\021\207\032|\202\336\277b\304\022L\3256\360\277\262\270\007\nJ;\342\277B>\350B\002\230\335\277s\324\030W\305\"\335\277]\262\376 d\216\330\277O3;\312\001\243\361?F\220\344\352\002\372\323\277\207\366\323\200d\235\274\277u\021\312ZVf\340\277\2641\000\014\302d\273\277\342l,\227\037,\272\277TS\'\301yc\356?\252\274\244\037K)\310?*\007\203h1\345\345\2775\030\220\003b/\350\277\n\351\246;\017%\322\277\262$\204`\232\265\354?\205\375\n\205\315\000\326?D\265\017h~\303\345?s\324\030W\305\"\335\277\022\237\257M\332\253\323\277\342\210\256?\370\255\346?_\233\024\370\324\005\365\277Rg{dH\\\301\277\205=\363\001]\272\364?\312\276\376\243\224g\317\277I\2578\355\233\256\365?\023\237\016Z\234\305\310?\362:yH\204`\327?\263\326Z\217\036\273\337\277\251<u\031j\234\345?\253\373\r\324\351 \004\300\262\270\007\nJ;\342\277\316Ai\214\033P\320\277\232P4\357\362\001\320\2778\304v\213\025\326\002@a\323\214\210\336i\304\277\207\366\323\200d\235\274\277\2027\"\232\366\316\325\277,\353_\314\032}\316\2775\330\247\206\322u\371?k\036\020E\372\233\333\2777-\333\247\321M\333\277\331\026\306\240\177\213\363?\214\337Hd\227.\376\277\213\332xy\365w\363?\030^\300@\n\224\337\277\004Bwr\017\353\371?\232\237\365\264M\010\350\277\0053\3755\006\270\305?\305\307Hlu\225\257\277\253\373\r\324\351 \004\300\366\270\252\275\203i\364\277\333!g\363\207-\335?\2047\201\246\270\350\312?rv\335Ta\351\360?\267\005*K\205\327\371?Tg\332p\nv\326?\034\315wy\000j\350\277\t\224s\032\020M\360?C\004r!\027\260\310\277\3536Ge=\337\350\277\253\373\r\324\351 \004\300\312\276\376\243\224g\317\277\206\222&#\\\222\326\277\253\373\r\324\351 \004\300\354\271/\231\360T\010@~*G\342\014\006\342?%\346\364\000\267\t\352?\206\340O\364\327\214\343?\365\317\363\362\324\013\315?\2143\344\220\267\372\344\277\212\224\277\224\377\322\365\277\360C\"\035\'\250\314\277a\323\214\210\336i\304\277YK9\211\307\200\000\300\032\244y%\0009\355\277dh\0073/\025\332\277G\373\'Y6\202\270?TS\'\301yc\356?\030^\300@\n\224\337\2778s\224\214\307\362\350\277\244%\221\003W=\363?\2143\344\220\267\372\344\277\262\270\007\nJ;\342\277\r\357w\243u\020\361?$C\230\016<7\373?\007\016\322\270\212\356\343?\312\276\376\243\224g\317\277`*\276:\277\305\353\277rv\335Ta\351\360?\364\343G\226\243\004\340\277i\260Y\211\310\372\366?dh\0073/\025\332\277\334\254\335\375@J\006@\337\3633\225\247\002\341\277Kk\030zIJ\347?o\033\331\313\373%\360?\037\013be\256\237\261\27793\254\01789\372?\370\360\"N\215\315\303\277\267R/gz&\242\277\214\337Hd\227.\376\277\267R/gz&\242\277\267R/gz&\242\277;\177\327O\322\257\321\277;\177\327O\322\257\321\277\"QzVf^\344\277$f\305\372\325|\327\277\021\250\267.?\r\336\277\253\373\r\324\351 \004\3005W\034\250\352\216\022@\272\240\026QzT\351\277\030^\300@\n\224\337\277\031U\270_\2452\325\277\222\267\346m\035\357\340\277\360\364\277c\216\273\351?\245aA\212#L\322\277\312\276\376\243\224g\317\277\000\'[f9\341\347\277\355\204\317B{\363\272?\337\3633\225\247\002\341\277\217\216\350\031\035\276\345\2777\n\256\2737\010\377?>\343\343\271\234\324\334\277\025\027og5\343\346\277\375n\263\317N\360\365\277\344@V\326\342\236\370?2}\243\375l\262\370?\326\367q\236\346\326\321\277\365\325eNy\335\366?\204\360H\371\321\201\n@\nr\336\"U\023\357?\335\255z\260\261]\323\277Mc\250\215\303\364\347\277\253\202.\376_A\323?E\247\317`\316:f?s\324\030W\305\"\335\277\323\000\033s\211\036\267\277E\347\025\235\343U\353?*\007\203h1\345\345\277s\324\030W\305\"\335\277\251\013\007\331\343\025\353\277\270w\030\375y#\356\277\261\232\257\306\343\263\002@e\323J\241b\235\276?\360\330=\273\2659\275\277(\301\311\203;@\330\277\353\204p6\271\331\325?g\0215\215\020\323\347?\301\307u [\033\364\277s\324\030W\305\"\335\277\237z)D\224X\333?E\247\317`\316:f?\214\363\373\023(A\366?\305\377L\275&\231\330?\337\3633\225\247\002\341\277\367\007l\203\336o\374?\016\023=\204\356a\310\277\t\224s\032\020M\360?tR1\240\326\341\001@My\315\r\216\353\253\2778\253\363\360\342\014\000@\231Y<\320Wc\332\277\207\366\323\200d\235\274\277\327F3dA\335\351\277T\300E\210\314\370\367?\253\373\r\324\351 \004\300\034\315wy\000j\350\2771w1\242\310\340\316?\235\310\363\010N9\343\277\310\332!@\253\317\346\277\224i\034\251c\016\331?\362]\2464\036\246\363\277\035\260\274\350\n\366\325\277o\226\317^U\323\356\277\272\313\375\002\306\302\230?\205 8qgF\362\277\377\264l\264D\225\363?\026z\343\334 \374\346?\264M\202\264\232\346\347?\013\251\276\276\177k\363\277\021\274j\336\317\037\346\277s\014\035\250v&\246?8s\224\214\307\362\350\277\261\335\221\223\207\036\271?\004\263\315/%+\343?(\301\311\203;@\330\277u\232\001B\234T\335?\t\017j\255i\372\356\277\025\311E\226\271\350\311\277Q\276\254\026)\270\350\277\271\025\245\004S?\362?\3536Ge=\337\350\277\032\244y%\0009\355\277tTH]\246\257\357?\\\000(\362\337\210\345?\007]4r#\333\306\277n\025gpWT\306?\375|\364#;1\304?\241\006=\001\276\210\321\277s\324\030W\305\"\335\277\251\013\007\331\343\025\353\277\270w\030\375y#\356\277\232P4\357\362\001\320\277\3536Ge=\337\350\277\324N\243P\3072\351?\262x\037\215\272\201\363?\027\311\244\242{\002\337?\271(\266C\3416\313?\311.\007F\367n\221?\253\373\r\324\351 \004\300s\324\030W\305\"\335\277q\360;\363\333\212\344?e\35069\020\242\354?\345\262D\210\327\352\354\277?c\023\300}a\357?+\207\262n\022r\330?D\204\241\'\370<\353\277\355hM\232\242q\356\277\204}\333~\354s\343\277v/\035\340*\346\335\277\253\373\r\324\351 \004\300\221\300\356N\202P\353\277s\324\030W\305\"\335\277\252\274\244\037K)\310?\354\031\214\324Gk\326\277D\204\241\'\370<\353\277\362:yH\204`\327?\n\351\246;\017%\322\277fhf?\361.\317?\341\010\1779\027!\324\277Iy\372\301sq\360\277\246\260\002P~R\352\277\274I\345\236\231\370\301\277]2.\'E\033\353?$f\305\372\325|\327\277+\270 \257\230\370\302?\355\204\317B{\363\272?#\002\030\235\315q\301?\267R/gz&\242\277\325\024-/\334J\344\277\004\202_\357\236\244\350\277u\275..6\232\371\277\376\340\241\201C<\332\277`*\276:\277\305\353\277\245vW\210\375\335\202\277(\371\315\324\354C\241?\027@m\2735\024\342\277b\304\022L\3256\360\277F\255\237{\370m\346\277.\342\266\367w5\331?(\267$\360e\313\000@\362:yH\204`\327?]\262\376 d\216\330\277v\321\341\335\306\254\361?\320PB\325\346\234\371?]\262\376 d\216\330\277n\344\370/\321\315\333?\030^\300@\n\224\337\277\303\235\0210Xr\276\277u\275..6\232\371\277\310D\207\331+|\003@\\\000(\362\337\210\345?X\363L:\366\277\301?\215\326@\2032\315\363\277\253\373\r\324\351 \004\300\200\242\247\357\245#\300\277\025\311E\226\271\350\311\277]\250T\317\374\021\377?\201\216SL\327*\355?\350\276\207K\342\247\325\277\n\351\246;\017%\322\277b\304\022L\3256\360\277\217\216\350\031\035\276\345\277*\007\203h1\345\345\277\245W\2278\274\317\370?\027\347\001\244s\221\360?8$\323\306l\354\320\277\206\222&#\\\222\326\277E;\261\311\003\"\362?8s\224\214\307\362\350\277\025\027og5\343\346\277s\324\030W\305\"\335\277m\2257jv\307\343?\321\271(\246v\207\343\277\271n\020\034\025\302\343\277Q\276\254\026)\270\350\277\037\013be\256\237\261\277]\262\376 d\216\330\277|\320\332M\206N\354\277\271n\020\034\025\302\343\277\373\005\315\376\276\005\354?%:\220-\327\325\360?L1\242X^b\342\277\361\3175\332P\330\262\277wt>\320A\177\340?*\007\203h1\345\345\277k\200\354\305\006\251\320?\2641\000\014\302d\273\277R\227G4\314\307\374?\373\231P\250n\213\341\277\255f\013bI\331\353\277\271.(\237\205\010\365?*\007\203h1\345\345\277\020\023\234\220\260{\335?#\222\017\373jj\237\277\244~\374\032\031\300\344\277\247\'*u\372}\322?#\333S\256\256g\360\277\253\205\347+2*\000@\253\373\r\324\351 \004\300\r\357w\243u\020\361?\001\247\212l\032n\332?\337\3633\225\247\002\341\277s\324\030W\305\"\335\277\310\2329\303\033\026\370?{\317BY\247B\341?\021\250\267.?\r\336\277\031\243\3410!-\342?\200\311k\336\304-\361?s\324\030W\305\"\335\277\223\005oK[\003\263?:\326\010\002\263\013\351?\262\270\007\nJ;\342\277x\246D\005\247\021\346?\372\242X\211\323\354\353\277\272\313\375\002\306\302\230?k;\313\325\357\017\356\277\317\220*RvV\350\277 \231\322\277{m\362\277\313o\234\352\373z\354?\250\331\000\244~\203\345\277s\324\030W\305\"\335\277\342W@\377q\'\354\277\357\302\271.))\344?h\303\013\274\224\330\332\277\323\000\033s\211\036\267\277\302\0267\346\265!\374?\177\253\257\320\n\205\312\277\022\363\2509\200\331`\277VK\267\324\363\r\357\277n\344\370/\321\315\333?\226\r\026NO\364\004@\352\304X\263H\223\364?\232\320c\365\323\216\342?\375\213n`Dd\370?\216\027\301\364\240\222\315\277\254\027J\234\356\322\323\277\2143\344\220\267\372\344\277L1\242X^b\342\277Ev\304\235_\035\004@\030^\300@\n\224\337\277\374<\255\232\351]\360\277b\204*\317E}\341?w\365\246\276?\376\310\277\271(\266C\3416\313?\023\037\337S\2738\346?\267R/gz&\242\277\357\002\242\253\270\342\362\277p?\236\254tw\307\277\003\274\325\020\212\214\355?*\007\203h1\345\345\277\225\315\311\006l\031\317\277u\275..6\232\371\277\215e\352\305\034\215\352\277\351>\267Q\3034\350?\240#\370\221\263\374\343\277\312\276\376\243\224g\317\277\2316\017\344\275\035\376?\212\224\277\224\377\322\365\277T\247\302\355\231/\365?\300@\233\326\270\312\261?\252\2136\337\304\242\335?\352\004A0\330L\343\277^\262]-&\250\315?\267(W7\037\035\326\277s\350\313\006V5\345\277\216\016\271\023<1\303\277~\345%\362\365l\337\277\316\036<\240\201\n\364?\2027\"\232\366\316\325\277\247\305M\364\355p\335\277\253\373\r\324\351 \004\300\220\344?\360\242A\254?H\237\2753\316F\375?*\007\203h1\345\345\277\007\027\332\231\357O\356?dh\0073/\025\332\277\267(W7\037\035\326\277 v\245\323\341\'\326?\242U\376\306\030\217\351\2778s\224\214\307\362\350\2771d c:\351\365?\241\006=\001\276\210\321\277\013T\352\251B\255\266?X\363L:\366\277\301?s\324\030W\305\"\335\277%,O\331\352\224\302\277\245>\024\236\211\006\366?\020J|,\333\323\361?m\2257jv\307\343?\227D\361+\350D\347\277[\t0\323D\352\357?\010\200\300j\177:\370\277\332H\314\325\344\035\371?\334\373\243\201-X\340?\333\223Zc\016\201\003@s\324\030W\305\"\335\277\373\360\340f\021\001\276?pM\337\000a\270\365?\267R/gz&\242\277dh\0073/\025\332\277\330\375B\006M\302\360?m\2257jv\307\343?\017\223l\212\317\356\352\277\373\360\340f\021\001\276?\2143\344\220\267\372\344\277\261\362}+5#\347?u\275..6\232\371\277\311ZQF\214\\\331?\2027\"\232\366\316\325\277s\324\030W\305\"\335\277\207\366\323\200d\235\274\277V|%\025z\224\351?E\247\317`\316:f?7\217\267(\336Z\320?\231m\357\177\350u\342\277|\320\332M\206N\354\277z\357\266\027o\237\000@i:3\341\020\004\343?\344\n\030\253\272a\363\277\310\332!@\253\317\346\277\345ra\311\3318\000@\321\271(\246v\207\343\277\020\023\234\220\260{\335?\317\320\232\2348\2055?\000\2614\276\201\352\363\277`*\276:\277\305\353\277\303\377\355\260d\177\303\277\203\242e\010*W\272?\022\363\2509\200\331`\277\335\255z\260\261]\323\277\037\013be\256\237\261\277H\326\235\317\370\236\341\277\373\360\340f\021\001\276?\304\224\tO\363\020\264\277^)&F\340\271\340?2n)\301c\177\304?iC;\302ue\355?n\025gpWT\306?^\370\267\005Z3\346\277\207\366\323\200d\235\274\277\005%\274\341\031w\367\277\035\215\217\374p\260\371?\003\020q=\252X\364?\360\364\277c\216\273\351?\346\034\252!X\227\t@\033\233qD\233\327\342\277\023\037\337S\2738\346?\371\241\300\224\364\340\340?\367\007l\203\336o\374?\262\270\007\nJ;\342\277\253\373\r\324\351 \004\300F\220\344\352\002\372\323\277\337\3633\225\247\002\341\277\250\274E\023\211\017\323\277\366\2306\377\273\014\005@\212\027\003\334\034_\243\277\242U\376\306\030\217\351\277B>\350B\002\230\335\277;\234\222\340\307#\344\277s\324\030W\305\"\335\277P\214\246\341\303%\343\277\n\351\246;\017%\322\277\311\213\277\206\022\343\303?;\\\252c8j\365?s\014\035\250v&\246?\t@\330\355\357\200\351?B>\350B\002\230\335\277\357\002\242\253\270\342\362\277?c\023\300}a\357?\021c\377\306\r\235\364?\201\216SL\327*\355?W\002\307v\377\362\365?\367\007l\203\336o\374?\301\307u [\033\364\277(\325|3\314R\340\277\367\371*/\362.\316\277~j/_\234\277\360\277\244*a\356\370\363\375\277\345\343\262\310]q\347?U\203\0269\017(\006@\021\250\267.?\r\336\277\222\267\346m\035\357\340\277\016D\253\304t\350\322\277,\234\375\022\202\220\353?:\326\010\002\263\013\351?\024\245\200\265@\227\362?\274\322\034\206\337\346\356\277\226\322\002z\363\370\362?\254\027J\234\356\322\323\277\222#c\304mi\353?x\212\302\\\316\217\271\277\275\211,(\353\313\365?@\3201\207\320\366\370?\364\036V\254m\370\357\277D\204\241\'\370<\353\277)A\371\211\034\315\352?\021\250\267.?\r\336\277c\251\023eEz\255?\201\3053\350\001\203\361\277\035\215\217\374p\260\371?^\370\267\005Z3\346\277\207\341\347\350\266\230\356\277*\007\203h1\345\345\277\240#\370\221\263\374\343\277\235\310\363\010N9\343\277\266\266h\205*\321\361\277\377\246+`XT\305\277\261\362}+5#\347?\030^\300@\n\224\337\277*#\005\021\ng\262?\205\000\304\262\237\351\002@\216\016\271\023<1\303\277A \225\275-\030\340\277`[,{EL\346?\2027\"\232\366\316\325\277s\324\030W\305\"\335\277\2027\"\232\366\316\325\2776n\347\331\347\262\256?\345\343\262\310]q\347?\253\373\r\324\351 \004\300\2641\000\014\302d\273\277\242\206l\007\237\025\344?-\200{j\251\016\277\277\335\212M\304\027\030\367?\227\004\t\257X\213\370?\2027\"\232\366\316\325\277\335\255z\260\261]\323\277\272\240\026QzT\351\277\267R/gz&\242\277\231\340\\\372\315\203\t@\222\016w,\300d\275?\250\357%$Iz\251\277\242U\376\306\030\217\351\277\013T\352\251B\255\266?\037\240r\303\3231r\277\253\373\r\324\351 \004\300~\371\330\241\206\177\347\277m\325\037\347\005\201\362\277_\270\317\210\312y\367?\347L\231\231\355[\361\277\346P\321\217\260\006\361?C\022\263u\003\361\366?\310\332!@\253\317\346\277>1\r\213\030\317\351?8s\224\214\307\362\350\277\023\237\016Z\234\305\310?\271n\020\034\025\302\343\277!\337\213\244q\022\360?s\324\030W\305\"\335\277\024BV\031\201Q\226?\253\373\r\324\351 \004\300[]\313\377d\266\366?\362]\2464\036\246\363\277\220\016\030 \376J\330? (|\002f-\351\277\367*\231ox\265\330\277BR\233\362\222\252\345\277\373@\345\220\254\010\360?\003\020q=\252X\364?:\245\232\301,\205\356\277\225\271\177\337\300/\360?\213\374\010\263\036\252\002@\325\000z\177K8\334\2778s\224\214\307\362\350\277\220\344?\360\242A\254?\351>\267Q\3034\350?i\211\225\232\251\360\305\277>\343\343\271\234\324\334\277\266\223;\231\220\213\325?\253\373\r\324\351 \004\300\253\373\r\324\351 \004\300WB\257\363\216\254\344\277WB\257\363\216\254\344\277|\320\332M\206N\354\277\212\224\277\224\377\322\365\277\267(W7\037\035\326\277\252\002\377\367~\264\340\277\277\262*|\353\374\360?b\204*\317E}\341?\017l\014f\004\006\001@IV\315\325\331+\324?\360\211\246[\207\300\207\277iC;\302ue\355?\\\035\343\202\325\374\327? \231\322\277{m\362\277PFL\t\220\232\312?\315Jqm\200\261\332\277\246\341p\220\004\331\344?\264\306\020j\347\366{\277\227u_ln\313\341?\316Ai\214\033P\320\2778s\224\214\307\362\350\277\005%\274\341\031w\367\277\343\016P\241}\014\363?\312\276\376\243\224g\317\277\262\270\007\nJ;\342\277\303M\027\202\340y\340\277\234\026\035\332\3113\320?=N\310\033\016C\334?\260rN%T\226\324\277\253\373\r\324\351 \004\300\007]4r#\333\306\277\260rN%T\226\324\277\310\2329\303\033\026\370?\254\346\333[hL\311\277\343\316g$\356R\324?\317\320\232\2348\2055?\031\374LH\343\257\363\277\372\275\241I\217|\242?\267R/gz&\242\277\177\271\360$\367\305\370?\347)l\255S\026\325?\027\347\001\244s\221\360?!\213\360wQF\351?\\\035\343\202\325\374\327?\300\313\255\026\036\306\363?\004\202_\357\236\244\350\277q\360;\363\333\212\344?s\324\030W\305\"\335\277\262x\037\215\272\201\363?-\263i\360\344\213\000@MO\365\3352\342\337\277C\022\263u\003\361\366?r\361\323\347\272\226\357\2773\257\2512\322D\376?\343\272\264t]@\354?\312\276\376\243\224g\317\277\370\360\"N\215\315\303\277\326\367q\236\346\326\321\277E\247\317`\316:f?\323\253F^L`\372?\337\3633\225\247\002\341\277\366\270\252\275\203i\364\277,0\201\2741\026\341\277\273`.\324\352\232\372?\230\247e\241\323]\347?5W\034\250\352\216\022@WB\257\363\216\254\344\277\267R/gz&\242\277\245vW\210\375\335\202\277\032\244y%\0009\355\277\253\373\r\324\351 \004\300\347L\231\231\355[\361\277\321\363\236\307ao\350?i\227\326\356\2251\364?\356_E\271=\020\344\277\027\311\244\242{\002\337?7-\333\247\321M\333\277\232Y\233\334\031}\317?7-\333\247\321M\333\277-ws\211D\255\264\277j\211\364\246k\n\333?s\324\030W\305\"\335\277h\327\276k%\353\342\277\223\005oK[\003\263?\371\241\300\224\364\340\340?\225\315\311\006l\031\317\277l\362\332w\373\364\364?\253\373\r\324\351 \004\300\307+\004?\371\262\000@%,O\331\352\224\302\277u\021\312ZVf\340\277^\370\267\005Z3\346\277\242U\376\306\030\217\351\277n\025gpWT\306?\262\270\007\nJ;\342\277\211X\017\0163\304\326?f\312B\300\375;\264?\344c\203\302|\344\324\277\2316\017\344\275\035\376?s\217`\357\223\262\363?\345\343\262\310]q\347?\014\021\010\335\236B\000@\253\202.\376_A\323?(\301\311\203;@\330\277\347L\231\231\355[\361\277\037\240r\303\3231r\277J\272z3\3426\312\277M\n=v\001r\366?\360j\346\013F\262\375?\213<\354q\034\\\357\277u\021\312ZVf\340\277B\345|+@\025\374\277O3;\312\001\243\361?\001\247\212l\032n\332?\322\234m\025\201\023\321\277$5W\272O\366\314\277\227\004\t\257X\213\370?E\247\317`\316:f?\2027\"\232\366\316\325\277\253\373\r\324\351 \004\300b\304\022L\3256\360\277\013\251\276\276\177k\363\277\250\231\030\'\357\311\366?\271(\266C\3416\313?6\361*!\005?\374?\355\006\332\241{\215\362?\030\226\304\221\273\227\250?\300$\031.\340H\345\277\331\333\255\016\222\210\357?\212\224\277\224\377\322\365\277\032\244y%\0009\355\277\242U\376\306\030\217\351\277\016\313\313\356\352\010\002@\320A\310\230\335i\305?\253\373\r\324\351 \004\300H}2\2706\034\360?\2354p_\236\263\355?\004\263\315/%+\343?\262\270\007\nJ;\342\277\364\343G\226\243\004\340\277H\326\235\317\370\236\341\277\266\266h\205*\321\361\277\277^\217O\3130\352?Y&\214WxD\315\277\2143\344\220\267\372\344\2774R\006%M\027\355?<\316\230\025-\266\351\2777-\333\247\321M\333\277\262\270\007\nJ;\342\2778\217\0265\240t\265?\003\274\325\020\212\214\355?\032\244y%\0009\355\277u\275..6\232\371\277+\270 \257\230\370\302?>\236+Rkd\363?\200\\M\027r\230\347?\242U\376\306\030\217\351\277G\373\'Y6\202\270?\243\270r<\004\250\351?\317\301\230\222\374\334\342?VK\267\324\363\r\357\277\327\006K\347\261#\373?n\344\370/\321\315\333?\267R/gz&\242\277\220\344?\360\242A\254?\265\023\014\223\257\376\342\277\332\322\245--\'\345?\216\016\271\023<1\303\277\312\003 \224\253\000\342\277\267R/gz&\242\277\305\307Hlu\225\257\277l\025\010d\225:\321\277\227D\361+\350D\347\277h\322\351\302\361,\006@O\306\034\003\257\r\350?\201\253\016\335\314\236\337?d|\272\342\277\'\342\277\375\213n`Dd\370?s\324\030W\305\"\335\277\025\311E\226\271\350\311\277$\203\200\213\313\360\351\277\262[d\374\304\r\361\277\323\222\303\303\031\227\367?|\320\332M\206N\354\2778s\224\214\307\362\350\277*\007\203h1\345\345\277\303\377\355\260d\177\303\277\t\017j\255i\372\356\2778s\224\214\307\362\350\277\016\023=\204\356a\310\277\030^\300@\n\224\337\277.\"\237t\007\357\367?dh\0073/\025\332\2779$2\323.\006\306?\247\342\010\205\343\344\357\2775W\034\250\352\216\022@\361\3175\332P\330\262\277\337\3633\225\247\002\341\277\007\216\242\262\251a\321\277\377\264l\264D\225\363?\035\215\217\374p\260\371?>\343\343\271\234\324\334\277CX\"\201\315\302\220\277s\324\030W\305\"\335\277|\320\332M\206N\354\277\t\362\256\034t\206\334\277\365\274\342\263F\024\364?\264\306\020j\347\366{\277\226\265G\351\375\204\360\277\007]4r#\333\306\277\374\374\304\035Z\244\341?\2027\"\232\366\316\325\277\327\351\217V\274\257\370\277iC;\302ue\355?\346c\342\316>\376\311?8\230\036\026\005\326\277?\037\366u\315\000\233\343\277\303\271\223\3300\364\352?\034\315wy\000j\350\277PFL\t\220\232\312?\032\300\373\315\330\272\271?k\200\354\305\006\251\320?\201\3053\350\001\203\361\277\373\005\315\376\276\005\354?]\262\376 d\216\330\277\356{\307a\026\222\260?\206a\270\342\325\013\314\277\032\244y%\0009\355\277f\256\300\027%\272\347\277\204}\333~\354s\343\277\033\233qD\233\327\342\277\267(W7\037\035\326\277}P\nTg\333\336?\t\362\256\034t\206\334\277G\020\024\361\343\206\346?\347L\231\231\355[\361\277q\277\315\262U\004\352\2775W\034\250\352\216\022@?\201p\301u\360\360\277\307+\004?\371\262\000@\357\337t\277\036\235\326?\253\373\r\324\351 \004\300\2027\"\232\366\316\325\277\310\332!@\253\317\346\277s\324\030W\305\"\335\277\277\336_I\352\243\327\277\005%\274\341\031w\367\2776n\347\331\347\262\256?\342W@\377q\'\354\277\2143\344\220\267\372\344\277\360\211\246[\207\300\207\277\032\244y%\0009\355\277u\275..6\232\371\277Z\035\204v\023\343\302\277\351>\267Q\3034\350?B\203\t3\0311\340?\370\360\"N\215\315\303\277&\254~\337\313!\345\277o\270\256/<\340\223?\365F\274\013\217\035\340?\372\360\201ZO\347\330?t\313\020v`\301\322\277\340\021\207\032|\202\336\277<Xrmu\277\365\277o\033\331\313\373%\360?R\360\262K\216J\356\277E\231\354\313g[\336\277\373\205\235\370\335x\331\277x\212\302\\\316\217\271\277u\275..6\232\371\277\025\311E\226\271\350\311\277\342l,\227\037,\272\277\334\266\202\221\026\277\335\2773\346\211\316\374\234\342\277\000<G\376\346\345\265\277\217\277VZ\243D\340?\000\'[f9\341\347\277\024BV\031\201Q\226?\231m\357\177\350u\342\277\366\270\252\275\203i\364\277*\221\\\300y\356\361\277\2755\221\373\312\377\356?\017\223l\212\317\356\352\277$5W\272O\366\314\277\253\373\r\324\351 \004\300\253\373\r\324\351 \004\300\240#\370\221\263\374\343\277z\354\375\351\234\266\323??c\023\300}a\357?\342W@\377q\'\354\2776n\347\331\347\262\256?\300\313\255\026\036\306\363?i:3\341\020\004\343?\004Bwr\017\353\371?\216\016\271\023<1\303\277\006\371\206\024\033\320\320?]\262\376 d\216\330\277\301\375\263K\203X\371?\375K\206\343\264\252\331?\337|k|\355\360\335?\2027\"\232\366\316\325\277\347L\231\231\355[\361\277\007\216\242\262\251a\321\277\271n\020\034\025\302\343\277\242U\376\306\030\217\351\277\214\235I*8\247\001@\362:yH\204`\327?\037\266\215Pq\341\364?\300\336\276U\254\275\314?V\320\300A\232`\360?\372\242X\211\323\354\353\277\025\311E\226\271\350\311\277X\305\227\'B\"\004@X\345\013\346\t\177\363\277\271n\020\034\025\302\343\277\310\2329\303\033\026\370?\033[\211\307\013\036\364?\315Jqm\200\261\332\277\345\343\262\310]q\347?S\347\252j)\351\343\277\322y@)\347\315\364?\274\322\034\206\337\346\356\277*\007\203h1\345\345\277\265\023\014\223\257\376\342\277\223\005oK[\003\263?\032\244y%\0009\355\277u\021\312ZVf\340\277\205 8qgF\362\277\300$\031.\340H\345\2779$2\323.\006\306?\334\266\202\221\026\277\335\277\223\243\222\312N\366\315?\372\242X\211\323\354\353\277\355\006\332\241{\215\362?o\270\256/<\340\223?\032\244y%\0009\355\277\276\373\032\332\337\027\352\277TS\'\301yc\356?8\230\036\026\005\326\277?G\020\024\361\343\206\346?\',\256\345\254\256\327?\240#\370\221\263\374\343\2778\372\005\327z\342t?%:\220-\327\325\360?;\\\252c8j\365?\343\316g$\356R\324?}ngU_j\360?\305\377L\275&\231\330?\275\211,(\353\313\365?\032\244y%\0009\355\277\3756p\345\332\030\211?P\214\246\341\303%\343\277\240\317\\e\2230\375\277~\371\330\241\206\177\347\277\221\2433\276\214\334\330\277\316\265\264\333\2639\277?\213mZ\262\242\342\351?$5W\272O\366\314\277\030^\300@\n\224\337\277\353g\265\245\303e\343?WB\257\363\216\254\344\277\316Ai\214\033P\320\277\247\'*u\372}\322?p?\236\254tw\307\277\035\215\217\374p\260\371?\261\301\017\353\256\234\354\277\264\215j1*\240\366\277\030\343\311\255\260\346\360\277\212\224\277\224\377\322\365\277\263\315R\256\271Y\325\277\271(\266C\3416\313?My\315\r\216\353\253\277*\301(\220\375Y\315?\215\344\201\327\036\016\302?\341\345QM}\333\367?\032\244y%\0009\355\277U\031\261\237\216{\351\277E\321\360\034\031_\247?s\324\030W\305\"\335\277\023\256\210\226\245\370\374?t\213(\371\320\007\364\277\2027\"\232\366\316\325\277^\262]-&\250\315?7-\333\247\321M\333\277\301\214bL\377\037\002\300\253\373\r\324\351 \004\300u\021\312ZVf\340\277,+\254\023\376W\004@\263\326Z\217\036\273\337\277w&\025\377\305\204\323\277\217\277VZ\243D\340?$5W\272O\366\314\277\032\300\373\315\330\272\271?\315Jqm\200\261\332\277E\231\354\313g[\336\277\360\364\277c\216\273\351?\2143\344\220\267\372\344\277#\021\222\331\326\244\365?\327\306bj\"j\334?*\007\203h1\345\345\277\000X\311\246\277g\342?\024Q\345\210 \313\353? v\245\323\341\'\326? (|\002f-\351\277z\354\375\351\234\266\323?Iy\372\301sq\360\277\253\373\r\324\351 \004\300\"QzVf^\344\277\340\021\207\032|\202\336\277s\324\030W\305\"\335\277s\324\030W\305\"\335\277i\227\326\356\2251\364?E\247\317`\316:f?\311\014(u\020b\354\277tTH]\246\257\357?u\021\312ZVf\340\277\006\227\252\223\016\303\333\277\2143\344\220\267\372\344\277\032\244y%\0009\355\277\357\342-\355\360\205\003@\340\021\207\032|\202\336\277\343\327o\005S\264\336?\244~\374\032\031\300\344\277LF\216\360\013g\260\277O\306\034\003\257\r\350?\2143\344\220\267\372\344\277\266\266h\205*\321\361\277\304\260\213\367\313\222\340?\330\375B\006M\302\360?\357\002\242\253\270\342\362\277\370\360\"N\215\315\303\277\206\222&#\\\222\326\277\222\267\346m\035\357\340\277\336\030\276\036\345\345\267?\362\002u\367\322\\\256\277s\324\030W\305\"\335\277\r\257\217&\346V\322?]\262\376 d\216\330\277\r\010\373=\250\331\363?\030^\300@\n\224\337\277\377\364T1\324N\342\277{\236\324\030!\274\346\277\345\343\262\310]q\347?\021\355\330\036V\246\340?\360\364\277c\216\273\351?\2143\344\220\267\372\344\277\017\223l\212\317\356\352\277l\362\332w\373\364\364?\231\024\204h&\363\360?\216\016\271\023<1\303\277b\304\022L\3256\360\277\202\245\277):&\002@\201\"\327\365\206\260\342\277\002\031y\036\017\272\376?%,O\331\352\224\302\277\356\031\353\340\t\205\313?=N\310\033\016C\334?\24602V_\337\334?\177\322s\277)\217\373?\232Y\233\334\031}\317?\300\313\255\026\036\306\363?\263\234\344m3\323\312\277$f\305\372\325|\327\277?a\374\002\256\223\001@\342W@\377q\'\354\277\217\277VZ\243D\340?#\333S\256\256g\360\277\253\373\r\324\351 \004\300@)\235\236\222y\352\277\220\016\030 \376J\330?fn\330\232\225\000\371?~j/_\234\277\360\277\360\211\246[\207\300\207\277\037\266\215Pq\341\364?\370\360\"N\215\315\303\277\220\344?\360\242A\254?\337\3633\225\247\002\341\277\271(\266C\3416\313?\024\221\315\005\260\204\372\277\266\266h\205*\321\361\277V\320\300A\232`\360?\203\267Q\240\327[\350?\266\223;\231\220\213\325?s\324\030W\305\"\335\277E\247\317`\316:f?\006\371\206\024\033\320\320?\356\031\353\340\t\205\313?\013T\352\251B\255\266?\214\337Hd\227.\376\277\360\364\277c\216\273\351?8s\224\214\307\362\350\277\037\240r\303\3231r\277iC;\302ue\355?o\270\256/<\340\223?\232\237\365\264M\010\350\2775\242i[\2528\364\277\347L\231\231\355[\361\277\263\326Z\217\036\273\337\277\214\363\373\023(A\366?\232\331k\3268\360\354?pM\337\000a\270\365?\031U\270_\2452\325\277\024BV\031\201Q\226?\2027\"\232\366\316\325\277\356\031\353\340\t\205\313?\341\345QM}\333\367?8s\224\214\307\362\350\277\022\237\257M\332\253\323\277\030\343\311\255\260\346\360\277\021\274j\336\317\037\346\277\027\311\244\242{\002\337?\347iT*\343\317\363?\261\335\221\223\207\036\271?\212\224\277\224\377\322\365\277\331!\010\347\305\023\310\277tTH]\246\257\357?\025\241H\277}\354\362\277N\315\r\'D\241\004@(\301\311\203;@\330\277E\'\376\031s\017\372\277S\347\252j)\351\343\277\312\276\376\243\224g\317\277\315Jqm\200\261\332\277)\225\224\266<\231\361?\004Bwr\017\353\371?\360H[\220\256\207\360?^\370\267\005Z3\346\277\310\332!@\253\317\346\277\013T\352\251B\255\266?\264M\202\264\232\346\347?\252\2136\337\304\242\335?\305\307Hlu\225\257\277\034\033\241J|d\325?+\270 \257\230\370\302?\244~\374\032\031\300\344\277\241\217t\350\003w\356?\223\032[\343\010\010\341?u\021\312ZVf\340\277\335\255z\260\261]\323\277s\324\030W\305\"\335\277f\256\300\027%\272\347\277\036\377}\256e\374\355\277\277\324\265\367\202\'\376?E;\261\311\003\"\362?\000\'[f9\341\347\277b\304\022L\3256\360\277 v\245\323\341\'\326?@Z\013\337\030\000\345?9$2\323.\006\306?\366\306\353\021p\252\302?\030\300\234\301\026\241\324?\322\234m\025\201\023\321\277\331!\010\347\305\023\310\277\253\373\r\324\351 \004\300\032\244y%\0009\355\277\337\3633\225\247\002\341\2778$\323\306l\354\320\277\216\027\301\364\240\222\315\277\024\003\274\267\244\320\336\277\263\315R\256\271Y\325\277\343N8\036\r\306\341\277y\365\005\313\001\030\336?\253\373\r\324\351 \004\300\267R/gz&\242\277\310\332!@\253\317\346\277LF\216\360\013g\260\2775W\034\250\352\216\022@E\231\354\313g[\336\277\267R/gz&\242\277E\247\317`\316:f?\265\234Cz\365\354\337?\364\343G\226\243\004\340\277o\033\331\313\373%\360?[\235\263|\364o\345\277-\200{j\251\016\277\277\201\"\327\365\206\260\342\277"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_20"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 1168
              }
            }
            tensor_content: "\000\000\000\000\000Pc@\000\000\000\000\000Pt@\000\000\000\000\000\300\\@\000\000\000\000\000\340c@\000\000\000\000\000\270s@\000\000\000\000\000\340R@\000\000\000\000\000xs@\000\000\000\000\000@b@\000\000\000\000\000 U@\000\000\000\000\000\360`@\000\000\000\000\000 b@\000\000\000\000\000@`@\000\000\000\000\000@T@\000\000\000\000\000\300j@\000\000\000\000\000\240f@\000\000\000\000\000\320`@\000\000\000\000\000\360f@\000\000\000\000\000\340`@\232\231\231\231\231\231]@\000\000\000\000\000@l@\000\000\000\000\000`c@\000\000\000\000\000@j@\000\000\000\000\000\260e@\000\000\000\000\000 `@\000\000\000\000\000\000h@\315\314\314\314\314<c@?5^\272I\244f@\000\000\000\000\000\240a@\000\000\000\000\000\240f@\315\314\314\314\314\034j@\000\000\000\000\000\300_@\000\000\000\000\000\300q@\000\000\000\000\000\020i@\000\000\000\000\000\370`@\000\000\000\000\000\340o@\000\000\000\000\000\200a@\000\000\000\000\000@a@\000\000\000\000\000pk@\000\000\000\000\000`s@\000\000\000\000\000@X@\000\000\000\000\000\240\\@\000\000\000\000\000\240i@\000\000\000\000\000\340]@L7\211A`\251o@\000\000\000\000\000\020`@\000\000\000\000\000`]@\000\000\000\000\000\300\\@\000\000\000\000\000\300_@33333?|@\000\000\000\000\000\000b@\000\000\000\000\000\300]@\000\000\000\000\000\200h@\000\000\000\000\000\300\\@\000\000\000\000\000\360q@\000\000\000\000\000\020b@\000\000\000\000\000@p@\000\000\000\000\000\240j@\000\000\000\000\000\340e@\000\000\000\000\000\300Z@\000\000\000\000\000\340Z@\000\000\000\000\000 Q@\000\000\000\000\000@c@\000\000\000\000\000\320s@\'1\010\254\034\202p@\305 \260rh\267q@\000\000\000\000\000`n@\000\000\000\000\000@[@\000\000\000\000\000\020s@\000\000\000\000\000`W@\000\000\000\000\000\000f@\364\375\324x\351\266]@\000\000\000\000\000\300`@\215\227n\022\203@[@\000\000\000\000\000`W@\307K7\211A\035\203@\000\000\000\000\000\240e@\000\000\000\000\000\300u@\000\000\000\000\000Pu@\000\000\000\000\000\240a@\232\231\231\231\2319_@\000\000\000\000\000\200]@\000\000\000\000\000\300P@\000\000\000\000\000@\\@33333\323V@\000\000\000\000\000\260b@\000\000\000\000\000\240`@\000\000\000\000\000\240p@\000\000\000\000\000\300g@\315\314\314\314\314|c@\037\205\353Q\270zc@\000\000\000\000\0000c@\000\000\000\000\000\000c@\000\000\000\000\000 _@\000\000\000\000\000\320r@\000\000\000\000\000\020a@H\341z\024\256?e@\000\000\000\000\000\240i@\315\314\314\314\314\374f@\315\314\314\314\314\234i@\000\000\000\000\000@p@\000\000\000\000\000pd@\315\314\314\314\314\034l@\000\000\000\000\000\200n@\000\000\000\000\000\200`@\000\000\000\000\000@h@\000\000\000\000\000\220c@\000\000\000\000\000\200c@\000\000\000\000\0000q@\000\000\000\000\000 b@\000\000\000\000\000\340`@\000\000\000\000\000\000N@\000\000\000\000\000\000_@\000\000\000\000\000\300_@\000\000\000\000\0000a@\000\000\000\000\000\260j@\000\000\000\000\000\300]@\232\231\231\231\231\371Z@\000\000\000\000\000\300^@\000\000\000\000\000\000\\@\000\000\000\000\000\300q@\000\000\000\000\000\240`@\000\000\000\000\000\240b@\000\000\000\000\000 e@\000\000\000\000\000\340i@\000\000\000\000\000\340e@\000\000\000\000\000 a@\000\000\000\000\000\200m@\000\000\000\000\000\340S@\000\000\000\000\000\000b@\315\314\314\314\314\\d@\315\314\314\314\314<g@fffff\036w@\315\314\314\314\314\274h@\000\000\000\000\000\000Z@+\207\026\331\316\247A@\000\000\000\000\000\030u@b\020X9\264\364v@\000\000\000\000\000H`@\000\000\000\000\000\300l@\000\000\000\000\000\230\207@\000\000\000\000\0000y@\000\000\000\000\000\200`@\000\000\000\000\000@f@\000\000\000\000\000\020a@\000\000\000\000\000 b@\000\000\000\000\000\300^@\000\000\000\000\000@o@33333cg@\315\314\314\314\314\274`@\000\000\000\000\000\300P@\000\000\000\000\0000a@\000\000\000\000\000`c@\207\026\331\316\367\023i@\232\231\231\231\231Ic@\000\000\000\000\000\300V@\000\000\000\000\000\000a@L7\211A`=[@\000\000\000\000\000\200a@\000\000\000\000\000\200U@\315\314\314\314\314l`@\315\314\314\314\314|f@\000\000\000\000\000\000b@\254\034Zd;Qr@\000\000\000\000\000\020b@\000\000\000\000\000\240]@\000\000\000\000\000\240a@\000\000\000\000\000\340m@\000\000\000\000\000@q@\317\367S\343\245d\201@\315\314\314\314\314\214n@\000\000\000\000\000\200v@\315\314\314\314\314\314Y@\000\000\000\000\000\200Y@\000\000\000\000\000\340b@\000\000\000\000\000\320q@\347\373\251\361\322\315`@\000\000\000\000\000@\\@\000\000\000\000\000pg@\000\000\000\000\000`_@\000\000\000\000\0000f@\315\314\314\314\314|f@\311v\276\237\032\377K@\000\000\000\000\000\220`@\000\000\000\000\000\340`@\000\000\000\000\000\340o@\000\000\000\000\000\200a@\000\000\000\000\000\360p@\321\"\333\371~\322n@\000\000\000\000\000Pi@\000\000\000\000\000\300R@\000\000\000\000\000\240^@\037\205\353Q\270\036[@\000\000\000\000\000\000d@\000\000\000\000\000`e@\000\000\000\000\000\200h@\000\000\000\000\000 l@\000\000\000\000\000\240h@\000\000\000\000\000\000D@\000\000\000\000\000\220e@\315\314\314\314\314\\c@\000\000\000\000\000\200q@\000\000\000\000\000\340e@\000\000\000\000\000`b@\000\000\000\000\000\260s@\000\000\000\000\000 g@\000\000\000\000\000\360`@\000\000\000\000\000\360m@\000\000\000\000\000`a@\000\000\000\000\000\200a@\000\000\000\000\000\200[@\000\000\000\000\000 l@\000\000\000\000\000\360a@fffff\036`@\000\000\000\000\000\220e@\000\000\000\000\0000n@\000\000\000\000\000hp@\337O\215\227nFh@\000\000\000\000\000\340a@\000\000\000\000\000@`@\000\000\000\000\000\200_@\000\000\000\000\000\320a@\000\000\000\000\000\300o@\000\000\000\000\0000k@\000\000\000\000\000\240P@\000\000\000\000\000 i@\000\000\000\000\000`c@\232\231\231\231\231\031Q@\000\000\000\000\000 P@\000\000\000\000\000\240e@\213l\347\373\251\261Y@\232\231\231\231\2319U@33333\263d@\000\000\000\000\000\000^@\000\000\000\000\000\340`@\000\000\000\000\000\200k@fffff2c@\315\314\314\314\314lh@\000\000\000\000\000`b@\000\000\000\000\000Pq@\000\000\000\000\000\340a@\232\231\231\231\231yZ@\000\000\000\000\000@n@\000\000\000\000\000Ph@\024\256G\341zl{@\000\000\000\000\000 g@\000\000\000\000\000\340Z@\000\000\000\000\000\240d@\000\000\000\000\000\000f@\315\314\314\314\314<`@\000\000\000\000\000\300\\@\024\256G\341z\004h@\000\000\000\000\000\000d@\000\000\000\000\000 b@\000\000\000\000\000\200U@\000\000\000\000\000\300c@\000\000\000\000\000\340_@\000\000\000\000\000\300\\@\000\000\000\000\000\340]@\315\314\314\314\314\374e@\000\000\000\000\000\000n@\000\000\000\000\000\260x@\000\000\000\000\000\240d@fffff\006`@\000\000\000\000\0000q@\313\241E\266\363}s@\000\000\000\000\000\300j@\000\000\000\000\0000c@\000\000\000\000\000\000b@\000\000\000\000\000\300\\@\000\000\000\000\000\200f@\000\000\000\000\000\020}@\000\000\000\000\000\200f@\000\000\000\000\000\240o@\000\000\000\000\000@U@33333sY@\000\000\000\000\000\220b@\000\000\000\000\0000a@\345\320\"\333\371\340s@\000\000\000\000\000\340a@\000\000\000\000\000\200a@\000\000\000\000\000\020h@\000\000\000\000\000\000W@\000\000\000\000\000\240h@\000\000\000\000\000`[@\000\000\000\000\000\220r@\000\000\000\000\0008g@\000\000\000\000\000\300l@\240\032/\335$^V@\000\000\000\000\000@p@\000\000\000\000\000\240g@\000\000\000\000\000\000[@\000\000\000\000\000 _@\000\000\000\000\000 b@\000\000\000\000\000@f@\000\000\000\000\000@U@\000\000\000\000\000\340e@\000\000\000\000\000\300_@\315\314\314\314\314\274b@\000\000\000\000\000\300e@\000\000\000\000\000`_@\000\000\000\000\000\360e@\000\000\000\000\000 l@\000\000\000\000\000 `@fffff\376c@\000\000\000\000\000\240c@\000\000\000\000\000\240i@\000\000\000\000\000\200a@\000\000\000\000\000\000i@\000\000\000\000\000 k@\000\000\000\000\000@_@\000\000\000\000\000\360c@\000\000\000\000\000\000g@\000\000\000\000\000 X@\000\000\000\000\000\000i@\000\000\000\000\000\240b@\315\314\314\314\314\\f@\315\314\314\314\314\034g@fffff\226d@\000\000\000\000\000\360t@\000\000\000\000\000\340U@=\n\327\243p%m@33333\253b@\000\000\000\000\000\240`@\000\000\000\000\000\200X@\000\000\000\000\000\360i@\000\000\000\000\000\300b@\315\314\314\314\314\334`@\000\000\000\000\000xg@\000\000\000\000\000\260b@33333\003]@\020X9\264\310*c@\000\000\000\000\000\240d@\000\000\000\000\000P`@\232\231\231\231\231\311i@\000\000\000\000\000@b@\000\000\000\000\000\240_@\000\000\000\000\000`a@\000\000\000\000\000@\\@\000\000\000\000\000\300S@\000\000\000\000\000\300f@\000\000\000\000\000\200g@\000\000\000\000\000 `@\000\000\000\000\000\000d@\000\000\000\000\000\300e@\037\205\353Q\270fk@\000\000\000\000\000`s@\000\000\000\000\000`w@\000\000\000\000\000\000Y@\000\000\000\000\000@o@\000\000\000\000\000 b@\000\000\000\000\000Pt@\000\000\000\000\000\300w@\000\000\000\000\0000q@\000\000\000\000\000\200f@33333\253n@\000\000\000\000\000\360b@\000\000\000\000\000\320`@\000\000\000\000\000\200W@\000\000\000\000\000\000k@\000\000\000\000\000\340u@\000\000\000\000\000`h@\000\000\000\000\000\000^@\000\000\000\000\000\220l@\000\000\000\000\000\000o@\000\000\000\000\000\000_@\000\000\000\000\000\340g@\000\000\000\000\000\240f@\000\000\000\000\000@Z@\315\314\314\314\314|a@\315\314\314\314\314\274c@\000\000\000\000\000P`@\315\314\314\314\314\214e@\000\000\000\000\000@`@\000\000\000\000\000@f@\000\000\000\000\0000d@\232\231\231\231\231\371]@\000\000\000\000\000\340m@\000\000\000\000\000\300g@\232\231\231\231\231YU@\000\000\000\000\000\240i@\000\000\000\000\000\300`@\000\000\000\000\000\000e@\000\000\000\000\000 g@\000\000\000\000\000\220f@\000\000\000\000\000\000c@\000\000\000\000\000\340j@\000\000\000\000\000 c@\000\000\000\000\000\200Z@\000\000\000\000\000@u@\000\000\000\000\000\340c@\000\000\000\000\000\000^@\000\000\000\000\000\300\\@\000\000\000\000\000\000`@^\272I\014\002\255s@\000\000\000\000\000``@\031\004V\016-\344{@\000\000\000\000\000\340_@\000\000\000\000\000`c@\000\000\000\000\0000f@\000\000\000\000\000\020`@\000\000\000\000\000\000f@\000\000\000\000\000 y@\000\000\000\000\000@`@\000\000\000\000\000 b@\000\000\000\000\000`b@\000\000\000\000\000\300\\@\000\000\000\000\000\240g@\000\000\000\000\000\340a@\000\000\000\000\000\000n@\000\000\000\000\000\300l@\000\000\000\000\000\300g@\000\000\000\000\000\240j@\000\000\000\000\000\240T@fffff.q@\000\000\000\000\000`c@\000\000\000\000\000pz@\000\000\000\000\000\020`@\000\000\000\000\000\360t@\000\000\000\000\000`p@\000\000\000\000\0000`@\000\000\000\000\000\320k@\000\000\000\000\000\340p@\000\000\000\000\000\360i@\000\000\000\000\000\340e@\000\000\000\000\000\300m@\315\314\314\314\314\374`@\000\000\000\000\000\000l@\000\000\000\000\000@e@\000\000\000\000\000 g@\000\000\000\000\000pp@\033/\335$\0061O@\000\000\000\000\000\300b@\000\000\000\000\000`e@\000\000\000\000\000`a@33333\213_@fffff\276i@\000\000\000\000\000\200[@\000\000\000\000\000P~@\000\000\000\000\000\300e@\000\000\000\000\000 b@fffff\346j@\000\000\000\000\000\000t@\000\000\000\000\000\200j@\000\000\000\000\000\020e@\000\000\000\000\000\240g@\000\000\000\000\000\200a@\000\000\000\000\000pg@\315\314\314\314\314\334o@\000\000\000\000\000\340`@\000\000\000\000\000\340b@\000\000\000\000\000 \\@\000\000\000\000\000\000g@\000\000\000\000\000\240h@\000\000\000\000\0000d@\000\000\000\000\000@U@\000\000\000\000\000`i@\000\000\000\000\000Pt@\000\000\000\000\000\220s@\000\000\000\000\000\240m@\000\000\000\000\000\220f@\000\000\000\000\000 a@fffff\226V@\315\314\314\314\314\334b@\000\000\000\000\000\300j@\000\000\000\000\000`^@\000\000\000\000\000H\207@\000\000\000\000\000\300g@\000\000\000\000\000\240f@\000\000\000\000\000\000N@\000\000\000\000\000\340m@\000\000\000\000\000\240]@\000\000\000\000\000`[@\000\000\000\000\000\200[@\000\000\000\000\000`Z@\315\314\314\314\314\374h@fffff\376p@\000\000\000\000\000p`@\000\000\000\000\000\340`@\000\000\000\000\000\300]@\000\000\000\000\000\340j@\000\000\000\000\000\260`@\000\000\000\000\000 e@\000\000\000\000\0000a@\000\000\000\000\000`b@\000\000\000\000\000\000m@\000\000\000\000\000\200c@\000\000\000\000\000@e@\000\000\000\000\000\240T@\000\000\000\000\000`c@R\270\036\205\353\215z@\000\000\000\000\000\220m@\000\000\000\000\000@k@\000\000\000\000\000\240j@\000\000\000\000\000\210s@\000\000\000\000\000`g@\000\000\000\000\000\240f@\000\000\000\000\000 m@\000\000\000\000\000\300W@\000\000\000\000\000\000J@\000\000\000\000\000\240f@\010\254\034Zd]\177@\000\000\000\000\000\000V@\000\000\000\000\000\000\\@\000\000\000\000\000\200a@\000\000\000\000\000\340d@\000\000\000\000\000(b@\000\000\000\000\000@j@\000\000\000\000\000\260c@\315\314\314\314\314\234j@\000\000\000\000\000`]@\000\000\000\000\0000g@\000\000\000\000\000@U@\000\000\000\000\000 b@\000\000\000\000\000\360o@\000\000\000\000\000\000_@\315\314\314\314\314\334`@\000\000\000\000\000\320l@\000\000\000\000\000\200[@\217\302\365(\\\'m@\000\000\000\000\000\240c@33333\323a@\000\000\000\000\000@c@\341z\024\256Guf@\000\000\000\000\000\300V@\315\314\314\314\314\274h@\000\000\000\000\000\240i@\000\000\000\000\000 d@\315\314\314\314\314\274b@\000\000\000\000\000\340i@\000\000\000\000\000\340a@\000\000\000\000\000\220q@\000\000\000\000\000Hw@\000\000\000\000\000`m@\000\000\000\000\000\320j@\000\000\000\000\000@p@fffff\266b@\000\000\000\000\000``@\000\000\000\000\000\000b@\000\000\000\000\000\340j@\000\000\000\000\000\000f@\000\000\000\000\000\000b@\000\000\000\000\000`c@\000\000\000\000\000 r@\000\000\000\000\000\300l@\000\000\000\000\000 r@fffff\216t@\000\000\000\000\000\300a@\000\000\000\000\000\360l@\000\000\000\000\000@d@\000\000\000\000\000\240`@\000\000\000\000\000$x@\000\000\000\000\000\240[@\000\000\000\000\000<u@\000\000\000\000\000\300U@\000\000\000\000\000\320c@\000\000\000\000\000@e@\000\000\000\000\000\200K@\252\361\322Mb\\a@\000\000\000\000\000@e@\000\000\000\000\000\000n@\315\314\314\314\314lb@\000\000\000\000\000\020r@\000\000\000\000\000\340`@\000\000\000\000\000\200a@\246\233\304 \260\322t@\000\000\000\000\000Pb@\000\000\000\000\000 v@\000\000\000\000\000\340a@fffff\236p@\000\000\000\000\000@b@\000\000\000\000\000\240d@\000\000\000\000\000\200T@\000\000\000\000\000\250j@\000\000\000\000\000\300S@\000\000\000\000\000\340a@\000\000\000\000\000P`@\315\314\314\314\314\374m@\000\000\000\000\0000f@\024\256G\341zdp@\000\000\000\000\000`l@\000\000\000\000\000\360c@\000\000\000\000\000 k@\000\000\000\000\000\240y@\000\000\000\000\000\200b@\000\000\000\000\000@f@\315\314\314\314\314\\d@\000\000\000\000\000pg@\000\000\000\000\000\000d@\000\000\000\000\000\200j@\000\000\000\000\000`a@\000\000\000\000\000\000[@\000\000\000\000\000\000U@\000\000\000\000\000\200e@\232\231\231\231\2319Z@\307K7\211A\240\\@\000\000\000\000\000\200Z@\315\314\314\314\314|f@\000\000\000\000\000\200Y@\000\000\000\000\000\300g@\000\000\000\000\000@u@\000\000\000\000\000\200f@\000\000\000\000\000\300i@\000\000\000\000\000p`@\000\000\000\000\000\300b@\000\000\000\000\000@g@\232\231\231\231\2319]@\315\314\314\314\314\274r@\000\000\000\000\000\200g@\000\000\000\000\000\340a@\000\000\000\000\000Pa@\000\000\000\000\000@p@\000\000\000\000\000\300]@\000\000\000\000\000\360d@\000\000\000\000\000`U@\000\000\000\000\0000j@\315\314\314\314\314\334i@\000\000\000\000\000\000\\@\000\000\000\000\000 h@\000\000\000\000\000\260h@\000\000\000\000\000`a@\000\000\000\000\000\360]@\000\000\000\000\000\320h@\000\000\000\000\000\340`@\000\000\000\000\000\360k@\000\000\000\000\0000s@\000\000\000\000\000\200`@\000\000\000\000\000\000e@\000\000\000\000\000\360q@\000\000\000\000\000\240h@fffff\316`@fffff\266`@\000\000\000\000\000 s@\000\000\000\000\000\200f@33333\023m@\315\314\314\314\314\374e@\000\000\000\000\000@f@\000\000\000\000\000`l@\315\314\314\314\314\244d@\000\000\000\000\000\360k@\000\000\000\000\000\360i@\315\314\314\314\314\004p@\211A`\345\320\226w@\000\000\000\000\000\020l@fffff6o@\000\000\000\000\000\000Y@X9\264\310vR{@\000\000\000\000\000\220f@\000\000\000\000\000@^@\000\000\000\000\000\200c@\000\000\000\000\000\200f@\000\000\000\000\000\300Z@\000\000\000\000\000\230w@\000\000\000\000\000 g@\000\000\000\000\000\340e@\000\000\000\000\000`h@fffff\376s@\000\000\000\000\000\300g@\000\000\000\000\000\030g@\000\000\000\000\000`[@\000\000\000\000\000 `@\000\000\000\000\000\200b@\315\314\314\314\314\334c@fffff\246C@\000\000\000\000\000\340b@H\341z\024\256Wf@\000\000\000\000\000\000_@\000\000\000\000\000\300l@\000\000\000\000\000 b@\000\000\000\000\000`_@\000\000\000\000\000\300c@\000\000\000\000\000pd@\000\000\000\000\000 `@\000\000\000\000\000Ph@\000\000\000\000\000\300_@\000\000\000\000\000\220l@\000\000\000\000\000\200q@\000\000\000\000\000@m@\000\000\000\000\000\340e@\000\000\000\000\000 h@\000\000\000\000\000\000^@P\215\227n\022\263x@\315\314\314\314\314\034a@\000\000\000\000\000\000b@\000\000\000\000\000\360e@\000\000\000\000\000\200[@\315\314\314\314\314\374o@\000\000\000\000\000\200[@\000\000\000\000\000\240l@\232\231\231\231\2319_@\000\000\000\000\000\200d@\000\000\000\000\000\020p@\000\000\000\000\000\340m@\000\000\000\000\000\000i@\000\000\000\000\000`e@\000\000\000\000\000\320q@\000\000\000\000\0000h@\276\237\032/\335\004b@\000\000\000\000\000@o@\000\000\000\000\000\000o@\000\000\000\000\000\340r@\000\000\000\000\000`t@\000\000\000\000\000\340_@\000\000\000\000\000\200f@\000\000\000\000\000`V@\000\000\000\000\000\300g@\000\000\000\000\000\240g@\000\000\000\000\000\000h@\000\000\000\000\000\260W@\000\000\000\000\000\000t@\000\000\000\000\000\000`@\000\000\000\000\000\340`@\004V\016-\262\275]@\000\000\000\000\000@T@\000\000\000\000\000\000V@\000\000\000\000\000Pt@fffff~a@\000\000\000\000\000`b@\000\000\000\000\000\240i@\000\000\000\000\000\300_@\000\000\000\000\000\300e@\000\000\000\000\000\340g@\000\000\000\000\000`V@\000\000\000\000\000@\\@\000\000\000\000\000pf@fffff\036s@\000\000\000\000\000`c@\000\000\000\000\000@W@\000\000\000\000\000\030p@\000\000\000\000\000Pq@\000\000\000\000\000\200t@\000\000\000\000\000\240d@\000\000\000\000\0000`@\000\000\000\000\000\230i@\000\000\000\000\000\340g@\000\000\000\000\000\260d@\000\000\000\000\000\240e@\000\000\000\000\000\340]@\000\000\000\000\000\340_@\000\000\000\000\000\360c@\315\314\314\314\314<c@\315\314\314\314\314<`@\000\000\000\000\000\000c@\000\000\000\000\000 g@\000\000\000\000\000\300_@\000\000\000\000\000\020e@q=\n\327\243\334p@\000\000\000\000\000\240n@\000\000\000\000\000\000p@\000\000\000\000\000\340`@\000\000\000\000\000\300U@!\260rh\221\371m@\354Q\270\036\205\017f@\000\000\000\000\000\000]@5^\272I\014.w@\000\000\000\000\000\000f@\000\000\000\000\000\000c@\315\314\314\314\314\274b@\000\000\000\000\000\000e@\000\000\000\000\000@p@\000\000\000\000\000\300j@\000\000\000\000\0000a@\000\000\000\000\0000e@\000\000\000\000\000\240]@\315\314\314\314\314\354b@\315\314\314\314\314\274e@\000\000\000\000\000\300p@\000\000\000\000\000Pi@\000\000\000\000\000 g@\315\314\314\314\314\334j@\000\000\000\000\000\340s@\000\000\000\000\000@X@\000\000\000\000\000@`@\232\231\231\231\2319Z@\000\000\000\000\000\300^@\000\000\000\000\000\000t@\000\000\000\000\000\300_@\000\000\000\000\000 S@\000\000\000\000\000\240`@\000\000\000\000\000\200]@\000\000\000\000\000\000^@\341z\024\256Gqf@\000\000\000\000\000\300l@\000\000\000\000\000\200a@\000\000\000\000\000\240z@\000\000\000\000\000@]@\000\000\000\000\000`m@\000\000\000\000\000\000[@\000\000\000\000\000\000d@\000\000\000\000\000\000b@)\\\217\302\365vp@\000\000\000\000\000\340`@\000\000\000\000\000hp@\000\000\000\000\000@_@fffffVl@\000\000\000\000\000\340`@\000\000\000\000\000\300g@\000\000\000\000\000\200^@\000\000\000\000\000pg@\000\000\000\000\000\000q@\000\000\000\000\000\220e@\000\000\000\000\000`_@\000\000\000\000\000\340^@\343\245\233\304 <h@\000\000\000\000\000\300U@33333\003g@\315\314\314\314\314\334f@\000\000\000\000\000 U@\000\000\000\000\000\000i@\000\000\000\000\000\340f@\000\000\000\000\0000h@\000\000\000\000\000``@\000\000\000\000\000\300`@\000\000\000\000\000\260d@\000\000\000\000\000@_@\000\000\000\000\000\200S@33333sf@\000\000\000\000\000@`@\000\000\000\000\000\200o@\000\000\000\000\000\360l@\000\000\000\000\000\000T@\000\000\000\000\000@_@\000\000\000\000\000pk@\000\000\000\000\000@f@\000\000\000\000\000\300d@\000\000\000\000\000\000f@\232\231\231\231\231+q@\315\314\314\314\314\374d@\000\000\000\000\000\000d@\000\000\000\000\000\000a@\000\000\000\000\000X\201@\000\000\000\000\000\000`@\000\000\000\000\000\210\203@\000\000\000\000\000 r@\000\000\000\000\000\200T@\000\000\000\000\000@_@\000\000\000\000\000Pg@\000\000\000\000\000\300[@\004V\016-\262\225o@\000\000\000\000\000\200[@\000\000\000\000\000\240a@\000\000\000\000\000\000]@\315\314\314\314\314\374d@\000\000\000\000\000\200m@fffff\346Y@\315\314\314\314\314|d@\000\000\000\000\000@\\@\303\365(\\\217Ro@\000\000\000\000\000\200k@\000\000\000\000\000\200_@\000\000\000\000\000pa@\000\000\000\000\000\200q@q=\n\327\243\374c@\232\231\231\231\231\tj@\000\000\000\000\000\000_@\000\000\000\000\000`b@\000\000\000\000\000@]@\000\000\000\000\000\260c@\000\000\000\000\000@T@\000\000\000\000\000\020j@\000\000\000\000\000\200c@\000\000\000\000\000 g@\000\000\000\000\000\360d@\000\000\000\000\000\220`@\315\314\314\314\314<e@\000\000\000\000\000\220h@\000\000\000\000\000@W@\000\000\000\000\000 f@\000\000\000\000\000\360d@\000\000\000\000\000\300e@\000\000\000\000\000\340m@\000\000\000\000\000\200[@\000\000\000\000\000 U@\000\000\000\000\000@n@\000\000\000\000\000\340e@\000\000\000\000\000\300e@\000\000\000\000\000 `@\232\231\231\231\231y[@\000\000\000\000\000\200V@33333\003i@\022\203\300\312\241\367r@\315\314\314\314\314\274b@\000\000\000\000\000`a@\000\000\000\000\000\200l@\000\000\000\000\000`m@\000\000\000\000\000 l@X9\264\310v7\202@\000\000\000\000\000\200n@\000\000\000\000\000\240c@\000\000\000\000\000\200[@\000\000\000\000\000@t@\000\000\000\000\000\360p@\000\000\000\000\000\000d@\000\000\000\000\000\000^@33333\363B@\000\000\000\000\000\240m@\000\000\000\000\000\300g@33333sA@\000\000\000\000\000\260s@\000\000\000\000\000Pi@\000\000\000\000\000\340j@\000\000\000\000\000\000c@\000\000\000\000\000\360i@\000\000\000\000\000\300c@\000\000\000\000\000@`@\000\000\000\000\000\200n@\000\000\000\000\000\300S@\000\000\000\000\000\200K@\000\000\000\000\000\200l@D\213l\347\373Yt@\000\000\000\000\000\340g@\000\000\000\000\000`d@\000\000\000\000\000`j@\000\000\000\000\000\210x@\000\000\000\000\000\340a@\000\000\000\000\000\000V@\000\000\000\000\000\240`@\315\314\314\314\314\034b@\000\000\000\000\000\340V@\000\000\000\000\000 a@\000\000\000\000\000 X@\000\000\000\000\000\240b@\315\314\314\314\314\334e@\000\000\000\000\000\020k@\000\000\000\000\000\320k@\000\000\000\000\0008d@\000\000\000\000\000\200k@\000\000\000\000\000\330b@\000\000\000\000\000\000`@\315\314\314\314\314|f@\000\000\000\000\000\340r@\000\000\000\000\000\260}@\000\000\000\000\000@e@\000\000\000\000\000\360t@\000\000\000\000\000\300\\@\000\000\000\000\000@[@\232\231\231\231\231\311s@\000\000\000\000\000\340p@\000\000\000\000\000\300a@\230n\022\203\300\256q@\000\000\000\000\000\200d@\000\000\000\000\000@o@\232\231\231\231\231\271^@\000\000\000\000\000@c@\000\000\000\000\000`c@\000\000\000\000\000\000N@\000\000\000\000\000\000T@\000\000\000\000\000\000Y@\000\000\000\000\000\220`@\000\000\000\000\000\340c@\000\000\000\000\000 _@\000\000\000\000\000p`@\000\000\000\000\000\200f@\000\000\000\000\000\000S@\000\000\000\000\000\000[@\000\000\000\000\000\240c@\000\000\000\000\000 l@\000\000\000\000\000\200g@\000\000\000\000\000@R@\000\000\000\000\000\300V@\372~j\274t\267e@\000\000\000\000\000\240W@\000\000\000\000\000@j@\000\000\000\000\000 `@\000\000\000\000\000\200b@\000\000\000\000\000`j@\000\000\000\000\000\340c@\315\314\314\314\314\274h@\000\000\000\000\000\200]@\000\000\000\000\000\200T@\000\000\000\000\000@e@\000\000\000\000\000\020a@\000\000\000\000\000\360s@\000\000\000\000\000@Y@\000\000\000\000\000`b@\000\000\000\000\000 r@\000\000\000\000\000\340]@\000\000\000\000\000\000]@\232\231\231\231\2319W@\000\000\000\000\000@Z@T\343\245\233\304\364y@\000\000\000\000\000\340j@\000\000\000\000\000\260a@\000\000\000\000\000\200`@\000\000\000\000\000 [@\000\000\000\000\000 b@\000\000\000\000\000`d@\000\000\000\000\000\200a@\000\000\000\000\000\200[@\000\000\000\000\000\220`@\331\316\367S\343wr@\315\314\314\314\314\374h@\000\000\000\000\0000`@\000\000\000\000\000\000l@\000\000\000\000\000\200x@\000\000\000\000\000`f@\000\000\000\000\000\000g@\000\000\000\000\000\020f@\000\000\000\000\000\200X@\000\000\000\000\000 e@\000\000\000\000\000\000Y@\000\000\000\000\000\220b@\000\000\000\000\000\340_@\000\000\000\000\000 ^@\000\000\000\000\000\200[@\000\000\000\000\000\300a@\000\000\000\000\000\200N@\000\000\000\000\000\300k@\232\231\231\231\231\331Z@\000\000\000\000\000 h@\000\000\000\000\000\260h@\000\000\000\000\000@\\@\000\000\000\000\000\020x@\000\000\000\000\000\220b@\000\000\000\000\000pb@fffff\346f@\000\000\000\000\0008p@\000\000\000\000\000\340m@\000\000\000\000\000\240a@\000\000\000\000\000\200a@\315\314\314\314\314<b@\000\000\000\000\000\240k@\000\000\000\000\000\000\\@fffff\346^@\000\000\000\000\000\000n@\000\000\000\000\000@]@\305 \260rh\223q@\000\000\000\000\0008q@\000\000\000\000\000@`@\000\000\000\000\000\220u@\000\000\000\000\000\300^@fffffff@\000\000\000\000\000\240a@\000\000\000\000\000\000b@\000\000\000\000\000\300_@fffffVh@\000\000\000\000\000\340j@\000\000\000\000\000\000t@\000\000\000\000\000\200a@\000\000\000\000\000@_@\000\000\000\000\000\200k@fffff\236l@\000\000\000\000\000\260d@\000\000\000\000\000\000T@\262\235\357\247\306-y@\000\000\000\000\000`l@\020X9\264\310\032k@\000\000\000\000\000\340Z@\000\000\000\000\000\000Y@\000\000\000\000\000@h@\000\000\000\000\000\300b@\000\000\000\000\000\300l@\000\000\000\000\000\240e@=\n\327\243p\361q@\315\314\314\314\314\\i@\232\231\231\231\231\371S@\000\000\000\000\000\200{@\000\000\000\000\000\300Z@\000\000\000\000\000\360a@\315\314\314\314\314|e@\000\000\000\000\000\000Y@\315\314\314\314\314|f@\315\314\314\314\314\274`@\000\000\000\000\000\000n@\000\000\000\000\000@V@\000\000\000\000\000\020a@\000\000\000\000\000`m@\000\000\000\000\000@a@\000\000\000\000\000\304a@\000\000\000\000\000pg@\315\314\314\314\314\274f@\000\000\000\000\000\200a@\000\000\000\000\000 b@\000\000\000\000\000\340e@\000\000\000\000\000@m@\232\231\231\231\231y[@\315\314\314\314\314<`@\315\314\314\314\314la@\000\000\000\000\000 r@fffff\006d@\000\000\000\000\000`a@\000\000\000\000\000\200`@\000\000\000\000\000\300d@H\341z\024\256\177d@\000\000\000\000\0000b@\000\000\000\000\000\000i@\000\000\000\000\000@d@\000\000\000\000\000 ^@\000\000\000\000\000\000V@\232\231\231\231\231\371S@\000\000\000\000\000 l@\315\314\314\314\314\034o@\313\241E\266\363\365m@\000\000\000\000\000\300g@\000\000\000\000\000\000e@\000\000\000\000\000\210`@\000\000\000\000\000\240\\@\000\000\000\000\000@o@)\\\217\302\365\034a@\000\000\000\000\000\320w@\000\000\000\000\000@`@\000\000\000\000\000\240g@\000\000\000\000\000@_@\000\000\000\000\000\220e@\000\000\000\000\000\000m@\232\231\231\231\231Ya@\000\000\000\000\000\000Y@\000\000\000\000\000@`@\000\000\000\000\000pr@\000\000\000\000\000\200d@\000\000\000\000\000pw@\000\000\000\000\000\300\\@\000\000\000\000\000`a@\000\000\000\000\000 f@\000\000\000\000\000`a@\000\000\000\000\000\300k@\000\000\000\000\000\340d@\000\000\000\000\000\340s@\000\000\000\000\000\200j@\000\000\000\000\000\240e@\000\000\000\000\000\340`@\000\000\000\000\000 n@\341z\024\256GUi@?5^\272Iju@\000\000\000\000\000`a@\000\000\000\000\000\240k@\000\000\000\000\000Ps@\000\000\000\000\000\200f@\000\000\000\000\000\240g@fffffff@\000\000\000\000\000 f@\000\000\000\000\000 i@\000\000\000\000\000\320[@\315\314\314\314\314lf@\000\000\000\000\000\200V@\000\000\000\000\0000n@\000\000\000\000\0000p@\000\000\000\000\000\000`@\000\000\000\000\000\200U@\000\000\000\000\000@_@\000\000\000\000\000\000q@\000\000\000\000\000\300c@\000\000\000\000\000\000d@\000\000\000\000\000\360i@\037\205\353Q\270\376`@fffff.a@\000\000\000\000\000\200V@\000\000\000\000\000\300U@\000\000\000\000\000\000f@\315\314\314\314\314Lf@\000\000\000\000\000\370a@\000\000\000\000\000\260s@\000\000\000\000\000\000b@\000\000\000\000\000`g@\000\000\000\000\000\300a@\000\000\000\000\000 T@\000\000\000\000\000\000c@\000\000\000\000\000 f@\000\000\000\000\000\260p@\000\000\000\000\000\340z@\000\000\000\000\000\300g@\000\000\000\000\000\340a@\000\000\000\000\0000c@\000\000\000\000\000\220p@\000\000\000\000\000\340`@\315\314\314\314\314\034j@\000\000\000\000\000\330p@\000\000\000\000\000\240b@\000\000\000\000\000\340V@"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "TensorSliceDataset/tensors/component_0:output:0"
      input: "TensorSliceDataset/tensors/component_1:output:0"
      input: "TensorSliceDataset/tensors/component_2:output:0"
      input: "TensorSliceDataset/tensors/component_3:output:0"
      input: "TensorSliceDataset/tensors/component_4:output:0"
      input: "TensorSliceDataset/tensors/component_5:output:0"
      input: "TensorSliceDataset/tensors/component_6:output:0"
      input: "TensorSliceDataset/tensors/component_7:output:0"
      input: "TensorSliceDataset/tensors/component_8:output:0"
      input: "TensorSliceDataset/tensors/component_9:output:0"
      input: "TensorSliceDataset/tensors/component_10:output:0"
      input: "TensorSliceDataset/tensors/component_11:output:0"
      input: "TensorSliceDataset/tensors/component_12:output:0"
      input: "TensorSliceDataset/tensors/component_13:output:0"
      input: "TensorSliceDataset/tensors/component_14:output:0"
      input: "TensorSliceDataset/tensors/component_15:output:0"
      input: "TensorSliceDataset/tensors/component_16:output:0"
      input: "TensorSliceDataset/tensors/component_17:output:0"
      input: "TensorSliceDataset/tensors/component_18:output:0"
      input: "TensorSliceDataset/tensors/component_19:output:0"
      input: "TensorSliceDataset/tensors/component_20:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "BatchDatasetV2/batch_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 15
          }
        }
      }
    }
    node_def {
      name: "BatchDatasetV2/drop_remainder"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
    }
    node_def {
      name: "BatchDatasetV2"
      op: "BatchDatasetV2"
      input: "TensorSliceDataset:handle:0"
      input: "BatchDatasetV2/batch_size:output:0"
      input: "BatchDatasetV2/drop_remainder:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset/count"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset"
      op: "RepeatDataset"
      input: "BatchDatasetV2:handle:0"
      input: "RepeatDataset/count:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/buffer_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 10000
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset"
      op: "ShuffleDataset"
      input: "RepeatDataset:handle:0"
      input: "ShuffleDataset/buffer_size:output:0"
      input: "ShuffleDataset/seed:output:0"
      input: "ShuffleDataset/seed2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "reshuffle_each_iteration"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptimizeDataset"
      op: "OptimizeDataset"
      input: "ShuffleDataset:handle:0"
      input: "optimizations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
    }
    node_def {
      name: "ModelDataset"
      op: "ModelDataset"
      input: "OptimizeDataset:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
    }
    ret {
      key: "modeldataset"
      value: "ModelDataset:handle:0"
    }
  }
}
versions {
  producer: 27
  min_consumer: 12
}
