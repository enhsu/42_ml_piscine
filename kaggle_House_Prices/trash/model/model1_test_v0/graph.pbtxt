node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tensors/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1167
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1167
          }
        }
        tensor_content: "\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\2770*\200j\263\326\004@\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\317m\375\0323\270\006\300\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\317m\375\0323\270\006\300\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\2770*\200j\263\326\004@\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\2770*\200j\263\326\004@\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?0*\200j\263\326\004@\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\2770*\200j\263\326\004@\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\317m\375\0323\270\006\300\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\317m\375\0323\270\006\300\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?0*\200j\263\326\004@\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?0*\200j\263\326\004@\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\2770*\200j\263\326\004@\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?0*\200j\263\326\004@\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\317m\375\0323\270\006\300\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\2770*\200j\263\326\004@\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\317m\375\0323\270\006\300\237\313Q2wf\360\2770*\200j\263\326\004@\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?0*\200j\263\326\004@\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\2770*\200j\263\326\004@0*\200j\263\326\004@\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\317m\375\0323\270\006\300\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\2770*\200j\263\326\004@\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\2770*\200j\263\326\004@\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?0*\200j\263\326\004@\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?0*\200j\263\326\004@\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\2770*\200j\263\326\004@\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\2770*\200j\263\326\004@\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?0*\200j\263\326\004@\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?0*\200j\263\326\004@\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\317m\375\0323\270\006\300\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\2770*\200j\263\326\004@\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\2770*\200j\263\326\004@\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?0*\200j\263\326\004@0*\200j\263\326\004@\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?0*\200j\263\326\004@\237\313Q2wf\360\277\302\210\256\242\357F\351?0*\200j\263\326\004@\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?0*\200j\263\326\004@\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277"
      }
    }
  }
}
node {
  name: "tensors/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1167
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1167
          }
        }
        tensor_content: "o\376<t\0307\370\277\245\335\300D\214)\265?\246/FH+\256\355\277l\240\260\025!\023\322?wq\301\251\020i\364\277\246\202X\276e\364\372\277\360N4\332\020\261\352?\261\266l~\027\327\007@{\006-\351j\252\353?\257\355\204o=\353\327?\245\207\024!\340\305\262\277\234+\007\036E\353\312\277*\3207\321y\361\345?=\2060\"\247\362\242?\207\317\345\3709\305\356?\345\006\002\350,\304\317?:\245}~\227\344\330?6W\241(\3416\361\277\376\245\013\275\'\363\354\277\032\320\033\022\206\314\261\277~\204\233\263q[\314?I\375g\026@!\302?\374_\013\272Sm\344\277*B\\\037\255\346\007@\223\202\266\274{\226\304\277\007\006D\3108E\343\277\031i\250H\236_\325\277|\304\3350\003\325\363\277\260\177\316J\373\211\305?7\'\017\264\2203\350\277\n&\254v>\013\340\277(7%Xk%\360?\246D4\016t\226\321?\276\313\261\207K\'\361\277&\036\206G\266\214\353\277:g\333[\201~\226\277h\352\323\203\3476\311\277\256$\340\201\336\033\351?]\021kk\327\245\347?>\335q\210\300H\363\277\337\215\311=\252\253\344\277?\246\026v\037\030\362?\364g\026\014Af\000\3007 F\026@\006\360?(7%Xk%\360?q\223$\345\260\213\317\277zt\343\r\255\013\356\277\211zJ\026\353\017\361\277\030Q\034\355z\301\367?|\n\\\331I\272\256\277\205F\001\373\220w\220?l\213\302O\330*\356\277\013\243\007\214\263\301\331\277\301\362\342\323\241\032\326\277T0\254B\333%\331\277m\346\260\030\365\230\332?O\361\356\232a\224\326?*\231\334\276\330\300\324? \225\235\224\362\375\341\277\265X-RS\365\364\277\224y\317Q\213M\376\277\356\320\305\017\n\000\332\277Q\010\354\017\265$\375?\r\337\244C\305\374\244\277\027.\234\353\220~\363?\217\271\213\214&\216\363?\322\352\250\202\251P\355\277\024\0164=\213\270\366?\006\022\307T\317\367\360?OWO\257\267\006\274\277eD)U|q\374?\335\377\252jb\204\345?\331\215\277,\362\205\362\277\033xM9\321\264\354\277y\210\276\036d\371\332\277y\017\3212\340\326\000@\350Y\232\240]C\357\277$+\230\272\034M\360\277!\270\035\226\334@\346\277J\246*\230\217c\366\277\375\302Q\007\221\026\360\277\214}lz\207\262\352\277A\375\3316\306\016\360\277M\306\222F\225)\363\277\n\021\276\260\365\"\314\277s\342\215\255\002\373\273?\336\"+lL\307\351?+\"\275\324\030v\276\277|\304\3350\003\325\363\277O\255\373\322cj\276?4S\360\335t\206\340?\214\037f^\206\307\306\277\315\327RG\nK\365\2773\305\024,\250{\002@}\362Q\330\263\274\336?\201R\202FA5\265\277N\330\321\3449\234\257?\303 \331\325\337\242\256?\340\000\302\007]\027\241\277\007X\307W\243}\371?vNA\250&&\360\277|\n\\\331I\272\256\277b\356\364z\245\210\365?\330}\213U\357\"\364\277k\302\035by[\337\277,\261h\032\374^\362\277/\330\231fRR\327\277\323|\362]g\357\352?\240\371o\013\242e\361\277\246D4\016t\226\321?\202\261\233\027\324\032\340\277\376\245\013\275\'\363\354\277\304t\200\216\207\333\251\277p\337m\275\232\244\324\277\353\305K\'M\"\341?\241\034\360\014\214\250\365\277Q\246\270w\tv\310?|\304\3350\003\325\363\277B Z8\260Q\364\277\326\372`(n\240\313?\332\260?.\334\310\366\277B Z8\260Q\364\277\016D\366W\244\265\356?\366\216\0047\034=\344?h\352\323\203\3476\311\277\315\327RG\nK\365\277/z\222\0207A\002@?\355\245_\303\253\361\277\000\001\372\205Da\331?j\230\324\302>\353\362\2773\216v\370\213.\300?\324\237r_Q2\357?\216zT\'\2435\343\277\314\220\303]f\267\365?yQc\014\303\310\351\277\253\203\361\265\355\'\324\277_\316\214\314\237\302\370?\n\234>\356b\224\361\277\346U\351U\361\222\376?\256$\340\201\336\033\351?\277|\r;\002u\003@fU\354\022O\342\361\277\213\270\362\224\236Z\332?\361\206\242\241C\334\302?s\356\022\256\315\371\353\277\001\247a\2234\n\005@\t<\224\302\313T\315?\315Q\020\307\244K\305?>BAB\022a\357?|\304\3350\003\325\363\277BoA\246t \303\277\215\261\2579Df\324\2778y\222C\373k\376?|\n\\\331I\272\256\277h\231eP\221\234\205\277\217\014\236\002a\324\340?\242\033a&\274\232\376?\030F(G\264\034\321\277\013\322\n\0324\267\373\277\272\217\222u\254K\330\277\206\364\203\307\303#\341\277N\226\000\322D&\352\277\3038\343\326u\240\336\277\310\326\271O\202\027\354?\003\303[\030I<\342\277t\200\\\211\213\230\351?\016!vV\272r\352?\320\205\226\247\334\033\000@,\261h\032\374^\362\277\266\252\260\341\275-\353?9\334\330\2208\025\352?>\335q\210\300H\363\277\2233\317N\267\307\365\277T\312K.\205\263\263?%*\t\324L?\371?\203\241\353\016\223\244\301?\333\343q\254;\316\253\2776;\352\304G!\325\277\021\343\327\350\276M\323\277\274\2367f\337\240\357\277BoA\246t \303\277v\260t@\322\324\304\277\335]\261\206co\311?\310\t\352Y\255\320\316\277\262$\3446\371\\\224?\314\277\306\353\346\254\327?t\367}\347\177/\362?\223#\241\323QI\236\277\360\364X\306\205=\325?\355\255E\016 \275\325\277\206+\337\331dT\322\277\233\246S\204\257\371\361\277US,D\305h\335\277\216zT\'\2435\343\277Sk2]\362\315\350?f\272\273\314\240\372\355?\346\360\031\234\237z\342\277\311x\2633\201,\330\277$Y\014b\3154\333?=g\337\020\234\277\341\277\'\027?\004\363\377\240?I\322\221\004j\357\300\277S\r,A\361\342\324\277j&\260t\013\366\000@y\210\276\036d\371\332\277\246^I\326\253\243\377?yQc\014\303\310\351\277j\230\324\302>\353\362\277\267\342\036\251\360X\303?\351\310cz1\237\350?\031aP\304}$\366?\247\t\256\363\\\356\341\277\305\333\357o\006\260\341\277\227F%\212V\315\355\277hY\235]\273\222\322\277\014`\'yG\222\270?D\265A\251H\246\313\277\n&\254v>\013\340\277\310U32\227\351\323\277\255\256M\n\272\222\367?\345\006\002\350,\304\317?\246{\217 \025\307\342?d\032\340\265A\001\320?\232\345\006\033qe\302\277\234\370\326\023\0322\350?|NK\271\336K\342\277|\304\3350\003\325\363\277\370o5\200\236\252\360\277b\277\361\354$\223\343\277\317\n\007 \367\360\367\277Q7\357\2355\032\337?}\264\257\265\235V\234\277|\304\3350\003\325\363\277\002_\206\344;\205\377\277\215\017\266UEQ\350?\225\310\266\277O\034\315\277\310\036\330\037\366\270\342\277\340\000\302\007]\027\241\277\356\222\241_\030\242\360?\355\2709\264\346a\374?o\376<t\0307\370\277o\214\030&\345A\006@\333\313g\253\245\320\333?\313M`\266R\301\005@\267\267H\227\032\'\302\277\177\310\216{o\205\324\277\223\202\266\274{\226\304\277A\375\3316\306\016\360\277\220\300T*w\273\353\277\252\262\364Cn\035\366\277\252keZ\312\211\366?x\013c\t\357B\341\277$\370\351=\315\213\224\277\376\324\016K\250\350\376?\343\320\261\355\231\264\345\277dt\273\311\314t\345?\0242C%E\t\362\277\276\371%/\374\016\334?\"5y\253Q\367\337\277w-\317\033-e\r@\203\'.\217\370\243\361\277\021\254|\326\035\035\342\277j\230\324\302>\353\362\277 \253\205\340\177G\317?\342.\270\t\233\237\331?\311AX!\340\373\346\277\355\255E\016 \275\325\2770?\r0:\277\263\277\311\274\246\373~V\260\277v\260t@\322\324\304\277I0\230 k\332\344\277\2560e\202\251\032\271\277\216zT\'\2435\343\277\013l\254y\022\221\350\277E\355\257p{\321\343\277\212\357M\247?\213\353?\024\373\347\022\244\330\360?\335\377\252jb\204\345?\274\366\005?\224\270\264\277\376\245\013\275\'\363\354\277\326\372`(n\240\313?\246\202X\276e\364\372\277\305\266Q\241|Q\357?\241\252\313\276X\263\003@Ww\277\372@\246\330?\322\352\250\202\251P\355\27713\210/o\300\343?\026\022\345\207\367h\347\277?s\347\245\016\205\000@\\s\234\217N\010\272?]\267\217WL2\322?B Z8\260Q\364\277\235\275P\371\002\212\330\277\233\202D\234\365\250\366?\354\212\305\0146z\321\277\007\035\376\033\021\271\010@\341\0138\010\261\\\325?j\230\324\302>\353\362\277j9=L9\246\265?>\212_\022\206\002\346\277\214\037f^\206\307\306\277\301si\361\214H\356?o\353\360I1W\362\277\304\365\002\304\tq\275?/\330\231fRR\327\277\007\276%\370\304\243\354?Uh\032\n\016Q\341?\301\352\212O\201\337\366?\337\274\314\313*\241\366?.\344\034\363\350\004\365\277\266P\325\3152\272\325?*v\\\275\356}\320?\252\262\364Cn\035\366\277,\261h\032\374^\362\277Wl\313Tz\001\362\277\246\236\017\"\377\t\347?x\303D9{\241\352?\373<\213\270i*\340\277\304t\200\216\207\333\251\277\376\245\013\275\'\363\354\277\260T\3708%X\304\277Z9!\215E\201\341\277S\r,A\361\342\324\277|\304\3350\003\325\363\2774\324v\373_\264\310?\335]\261\206co\311?\276\313\261\207K\'\361\277\337\347\244Q5\037\332\277\370K&\230\344Y\365?~\245\016z\205B\320\277=g\337\020\234\277\341\277\312d\330\"\312>\353\277\225\225\206\265$c\352?S\r,A\361\342\324\277 \200\257\316\251\025\316\2774\007\247\005\213m\353\277\247\301\217#\351L\353?\361}9\334\305\362\276\277\227#\245\210l\212\351\277\2654\036j\231\244\371?\033\215;\377\031\235\320?C_\221\2353\252\344?\021\254|\326\035\035\342\277\204U\2426\251\213\334?\332\016H\276\021\000\275\277\355.\314+\013\353\355?\217\014\236\002a\324\340?\370o5\200\236\252\360\277\317\270\203\220\214\270\321\277\277\021\262\212\037\255\371\277A\246\233~\373*\003@\262\253\272\277\261(\001@\271(\037\254\304\336\313?\304\365\002\304\tq\275?gE\276\227\351c\232\277S)\343\244\212\370\360\277\333\235\363\003\365\350\360\277\200\264\263j\270\227\347\277@\nC\212$\207\026@\010\366\223\277\367\316\304?A\375\3316\306\016\360\277\2127lw\263,\342\277\335]\261\206co\311?\350R\321\002\r\026\367?\370o5\200\236\252\360\277|\304\3350\003\325\363\277\330F0CN\362\362?k\302\035by[\337\277j\230\324\302>\353\362\277\036\353\307]\021\301\366\277,\201\326\245\253[\351\277l\240\260\025!\023\322?=\236:#=\360\322\277\243\216W|:\272\310\277\205\023S~A\266\364?7\'\017\264\2203\350\277|\304\3350\003\325\363\277\024aF\263\305\376\343?\375\302Q\007\221\026\360\277\001\223Ca\002\000\307?\"\333\235\227\306\203\352\277\204J\256\220\342\346\365\277;\273\202\024)\267\201\277\221\343\324+a\376\357\277\337\201D=\337\254\264?\252\341\367\321\356\022\350?\346f\254\023\304\003\364\277k\343\220(\215B\263\277+\240\245\\)\356\374?m\346\260\030\365\230\332?[\\\241\216/\304\345\277\321\343\337\344X#\365?S)\343\244\212\370\360\277\210\251M\244k\005\343?tI\001w\352g\330?s\264\032@l9\002@o\253*\376\335\360\352\277\227\222nb@\346\342?\216zT\'\2435\343\277~\245\016z\205B\320\277}\362Q\330\263\274\336?\373\364l\350\365\210\351?6\004\217\262\246\360\343\277yQc\014\303\310\351\277\223\340\274\330|\201\350\277|\304\3350\003\325\363\277\335\256\037\272\271\t\215?\232\345\006\033qe\302\277\207\370\361\360\264\267\000@\321!\004\225J\201\336\277\024\025\375\332\333\345\356\277\317\347\206\036\r\256\363\277\320\323\253\rV\300\366?\240\004d\261h\n\330?\014\306\207\215\235\004\336\277W\256\032\r\342\326\351?\273X7c\013\033\347\277\350\245\343xG\\\344?\360\364X\306\205=\325?\376\245\013\275\'\363\354\277!p\377\305h\237\357?h\025\252\225\275h\312?\235\275P\371\002\212\330\277\352\264\210iz\261\333?\342\2551\354\257q\341\277tI\001w\352g\330?U\034\3211$8\354\277v\260t@\322\324\304\277\021\254|\326\035\035\342\277yJ\232nr\233\361?|\304\3350\003\325\363\277\335\220\341\220\216(\354\277\3352\333t\215=\310\277s\356\022\256\315\371\353\277\000\243\363iCv\345\277\246\202X\276e\364\372\277q\250\022\253\371s\343\277\226\270\006\267\016\246\356?e=`\267+D\324?\3476\032\237s\000\353\277\370\020]\\R\225\004@\322$\214\367sO\025@\230[\023P\237\265\321?,z\r\010[.\361?\214\037f^\206\307\306\277T\326\320.P\262\343\277s\356\022\256\315\371\353\277\243~\247s\371C\352?EG\213\204\006E\331\277\226\000%\207\202G\345\277fU\354\022O\342\361\277\303M\321\234\276\210\342?\376\272\371\202p\333\320?G3\260sOW\354\277(uI\010]\203\331\277l\372\213)\254\206\347? \372lND\026\376?\342\3344z0g\363?\260\316\265\270\277X\364?s\356\022\256\315\371\353\277\327X\3652=\021\020@\220\023g\240\261\001\371\277\321\366+\017@\003\373?\203\241\353\016\223\244\301? \200\257\316\251\025\316\277\033\215;\377\031\235\320?\003{=H\325\232\353?\364\020\226l\025\214\323\277r%n\300n*\335\277N\330\321\3449\234\257?\315\327RG\nK\365\277\376\245\013\275\'\363\354\277Wl\313Tz\001\362\277\007|\326?]\316\364\277\341B\223\032R\215\346?\366\037;]H\341\352\277\350*\225\236\250\001\273?\260\320<~Q$\211?\243\375 V\016\026\322\277\275\204\"\236\247\223\361?\027\223k\245\342\226\337?\243\375 V\016\026\322\277d\005\362\357\370\030\354\277F\0200re\024\350\277P\370\2678\262\301\376?o\253*\376\335\360\352\277\310\t\352Y\255\320\316\277\261\025E\242c\354\363\2773\344&\004\241*\347\277\223#\241\323QI\236\277\261\346A\024\343\366\321\277R\374h\203\036r\357\277\215\261\2579Df\324\2772y\2102CF\354?\333\250\347\251\273\215\327?\r\211\370\037\031\231\222\277\301\307\nN\227\234\362?\204\367\233\032\250\240\350\2770\241>T\261!\346\277\276Eo\007\346\'\301?zm\032p\\\336\365?\346f\254\023\304\003\364\277K\266^o\222\306\364\277\254\336\337~\n\226\340? \253\205\340\177G\317?\215\216/8Z#\320\277\305\\v\215\361\335\331?N\360\333\345\317\231\337\2771\347>W\205\247\356\277#ylsO!\270\277\243\216W|:\272\310\277\262$\3446\371\\\224?\333\250\347\251\273\215\327?f`\340\270\025\207\330?\253\203\361\265\355\'\324\277tI\001w\352g\330?\256\233\001\340\322\262\361?\225\335\244\205\230\004\341\277p=t\331\233\217\350?\325h\027M\260\001\336?\305\\v\215\361\335\331?-q&\235j\345\312?\366o\263%\021\n\243\277\350*\225\236\250\001\273?\036\230\265\347\326z\351\277\303\026v\212\035X\321?O\316n\231wQ\322?:g\333[\201~\226\277\037\314\370\246\223.\323\277\371\235\251\'O\222\333?\265-U\314Hw\321?ua\215\322\r\006\366\277\024\366\352\002\3436\n@\347/Q\001#\323\362?MTn\370a4\001@>[Z\020\321\300\261?@\266JM\"{\360?,\261h\032\374^\362\277\341\350\267\006\307\031\321?~\245\016z\205B\320\277j\230\324\302>\353\362\277\377\335y\204Z\036\325?\216\315f\235\335{\360\277\331\274\302\272r{\344?\330\204T\363?P\334\277\332\016H\276\021\000\275\277\221\343\324+a\376\357\277\267\226\325\320\006@\336?\260\177\316J\373\211\305?\266\362\316\2611\317\341\277\271w\006\032\211\255\372?B\315G\302u\013\347\277\263\356\035g\305\036\361?^\342g\335V\260\365\2770\241>T\261!\346\277jd\023^\017\330\246?|\n\\\331I\272\256\2778\226\330\215d\217\341?\372\321\354\346\013F\345?\\\177!\220\031\007\352\277\024aF\263\305\376\343?\315\363\t\253\243`\341?{\254Q\325\3376\326?f`\340\270\025\207\330?Z9!\215E\201\341\277 \253\205\340\177G\317?\244+\225\375\276\375\374?Zp|\237\346\261\322\277\263,B\027\267|\332\277\271w\006\032\211\255\372?\032\320\033\022\206\314\261\2770\241>T\261!\346\277\202\017\2423\325\005\324?\232\345\006\033qe\302\277\364\331:Zt[\342\277?\034\251\355C\241\343?\376\245\013\275\'\363\354\277k\302\035by[\337\277(uI\010]\203\331\277~\204\233\263q[\314?\305d\316\021\022\031\371\277\002\005\253\320\260\021\372?\337\215\311=\252\253\344\277\263%yyfO\362\277w!KU|\214\316?s\342\215\255\002\373\273?\201R\202FA5\265\277d\005\362\357\370\030\354\277G\256\376M\356\261\265\277q\250\022\253\371s\343\277r\313\222\254\343\266\347\277o\274\355\273\260a\320\277\365\374\272[^\236\346\277T\365!@[\345\244?\261\346A\024\343\366\321\277\375\302Q\007\221\026\360\277\0242C%E\t\362\277\346f\254\023\304\003\364\277\326\234Z\014m\265\347?\3352\333t\215=\310\277\234\222xs\370\013\365?\214}lz\207\262\352\277\371\256l\345!\003\341?u\007\262\276\202\222\360?\346\360\031\234\237z\342\277\315\204@\321\317\004\350\277\355\255E\016 \275\325\277\000\001\372\205Da\331?M\315[\344\345V\333\277\311\022S\037+\272\262?\036\307\270uWp\373?\203\255o\325C}\000@;\014\361G\177Q\305\277\312\260!\373\263W\340?\204U\2426\251\213\334?\257\342\220\311vF\361\277Ww\277\372@\246\330?3B- \242\025\333?\010\252J\347\r\266\337?~\204\233\263q[\314?\365\374\272[^\236\346\277\332\337B\274\\\276\350?\273\307\000=\337v\340?\266P\325\3152\272\325?\007YV>s\213\360\277|\304\3350\003\325\363\277=\2060\"\247\362\242?\361\027\331\307o\200\331?\225\335\244\205\230\004\341\277F\0200re\024\350\277$6\214`\343\361\326?q`\364\332\205\322\354?\354Sj\372\224I\340\277\235\033W\025\004u\354?\315\363\t\253\243`\341?B Z8\260Q\364\277\236\365\276\3005\265\340?$+\230\272\034M\360\277\305\\v\215\361\335\331?%\310\325;\241\220\304?\332\337B\274\\\276\350?\323\"\027J\334{\325?\341\350\267\006\307\031\321?\261\325~V\020\206\354\277w\377\234[\335s\002@\344\225+\323\202\014\306\277\247\t\256\363\\\356\341\277\221\343\324+a\376\357\277A\375\3316\306\016\360\277X\217KVdD\366\277\207\027\004\311\255f\345\277Ww\277\372@\246\330?\257\342\220\311vF\361\277Q\331\350\2014/\353\277g\203`\272\377\311\334?\367\031\007\002e\246\220\277\t\251\247A\301\014\030@)\230\311\tG\306\335\277\r\337\244C\305\374\244\277\224\363\214\321%N\316?}\362Q\330\263\274\336?7\222jds\373\001\300\216zT\'\2435\343\277\243\216W|:\272\310\277\346\250\373\313+\331\353?;c.\306/\017\361?\207j\026?\350\254\362\277\024*\353\240$\316\322?[\\\241\216/\304\345\277\351\206\024\302\311\311\360\277\3452iT\007P\372?\310\036\330\037\366\270\342\277|\304\3350\003\325\363\277$\220gtne\354?\313\366!\376\207\335\350?,z\r\010[.\361?\260\262\376T&C\350\277\036\221\354I\206M\361?\031i\250H\236_\325\277\'\016\326>u\026\315?C_\221\2353\252\344?\305Q\202\347*9\363\277\264H\371zP\222\366\277\347mu\261\0241\334\277\016D\366W\244\265\356?\315\327RG\nK\365\277\364\010>\350\364P\364?S\r,A\361\342\324\277E@\302\346\265\027\361\277\324\211\212\023\304\350\301\277\332\2140F\"x\373?\245\005\375\250\360=\361?L\010\342\376\374\376\352?r\313\222\254\343\266\347\277\312]\017\205y\021\363?c\342q\356\016\326\347\277\333\002\303\275F\001\355?\000\322\366\367\303k\367?yQc\014\303\310\351\277\350\245\343xG\\\344?\364\020\226l\025\214\323\2771\374,\035\316\217\322?\271\375H\232\356\254\312\277\322Yr\\}\254\346?\355v\352\373~\214\344\277\317\227\020\312x\321\315?\333\235\363\003\365\350\360\277\344\300\001\345X>\307?\366o\263%\021\n\243\277\037\327\354LZ\323\371?=\2060\"\247\362\242?\246\202X\276e\364\372\277\322\377\226H\3628\321?\351\221\010h\220n\327?K\266^o\222\306\364\277CC\3329\232\224\370\277\200\323\004|\303\312\250?A\010\316\334\214\263\326?\242\271-\216\020\354\311?\032\320\033\022\206\314\261\277\375\302Q\007\221\026\360\277g\203`\272\377\311\334?\223\374s<\026\227\364?\240^?\305\363}\355?\352V\202My\306\347\277D$\013\203\034\002\325\277\270\247\230\216\331\260\343?B\351\376%\017!\363?\216zT\'\2435\343\2777\262\244\352\224f\037@wq\301\251\020i\364\277\273\307\000=\337v\340?\027\244.c\265\007\345?^\332\017Y6u\326?\032U\3157\347q\350\277&/I\005\211\375\320\277\377\335y\204Z\036\325?\352\230\321\005\341\233\377?Uh\032\n\016Q\341?\247\301\217#\351L\353?\375\334f\317\310#\336\277JS\030\"U\035\351\277\365V\226o\351\021\334\277\366\232\2117\347;\264\277\277\n\351\354\316\177\341?\273L\262b@\034\267?z\211\321\323\365\363\321?\026\022\345\207\367h\347\277%|\214c\267w\337?\364\221\034\212\000\272\353?\355\311\374q\271\322\361\2777\'\017\264\2203\350\277\232\304\223T]~\336?\340\n%S\037b\336\277v1\373]\275\002\355\277\224\363\214\321%N\316?\255\206\021\246U~\273?\205F\001\373\220w\220?$\370\351=\315\213\224\277~\204\233\263q[\314?\3216\362Z\223i\342?-\244V\247\225\236\355\277C0\216\017\263\264\362\277\010\366\223\277\367\316\304?=R\361JS\327\315\277\317\270\203\220\214\270\321\277\245f\241Z\314\336\336\277Uh\032\n\016Q\341?\266P\325\3152\272\325?|\304\3350\003\325\363\277\333\250\347\251\273\215\327?\013\341\251\256\311\'\234?\346J\365\257*\356\327\2771\310,\177\214\370\t@d\032\340\265A\001\320?(uI\010]\203\331\277\036\353\307]\021\301\366\277\214}lz\207\262\352\277\222\275<\327\222>\344\277\332\016H\276\021\000\275\277jt\305\332\204\232\367?B Z8\260Q\364\277\224\037\364=\000\332\370?n\367s\326\307\t\340?\006A\312\342O\355\322?\336\304$PK\334\325\277.\255\301\340G\324\363?\365V\226o\351\021\334\277\373\364l\350\365\210\351?\014\n{U\233.\266\277\333\235\363\003\365\350\360\277\305\\v\215\361\335\331?}\362Q\330\263\274\336?\342#\304c\324\372\362\277\305\\v\215\361\335\331?\r\337\244C\305\374\244\277\004\346\333\0313\177\346\277\010\366\223\277\367\316\304?\351\310cz1\237\350?hY\235]\273\222\322\277\022\317\374\327\007`\346\2778J\217\265zv\354\277;7\307YU\203\306?\215\216/8Z#\320\277\376\245\013\275\'\363\354\277\330*y\337\264\334\346\277\2103\273,G|\361?\037\314\370\246\223.\323\277\221\370\302\361\251\346\323?L\010\342\376\374\376\352?\346\023\232\235\211\275\346\277\375\202\213\273=\260\350\277m\346\260\030\365\230\332?T\326\320.P\262\343\277\345\006\002\350,\304\317?5\251\240\351\211\202\307\277\023\362|\331\361\242\352\277\217\014\236\002a\324\340?\214\3545T[\016\344?\343FDe\276=\367\277\262\257\346\001B\306\340\277f`\340\270\025\207\330?S\301\342h\007\312\317\277\340\n%S\037b\336\277\324\211\212\023\304\350\301\277\373<\213\270i*\340\277\376\245\013\275\'\363\354\277P\370\2678\262\301\376?\0241\264>u\373\372?Zp|\237\346\261\322\277\306\032\'\325\211\010\362?\346U\351U\361\222\376?\310\036\330\037\366\270\342\277,\261h\032\374^\362\277dt\273\311\314t\345?\246{\217 \025\307\342?\331\274\302\272r{\344?i\"BK\032b\341\277\"\333\235\227\306\203\352\277\373<\213\270i*\340\277>kM:\215S\001@\324\211\212\023\304\350\301\277\300\317b\322\267\327\321\277\2103\273,G|\361?8J\217\265zv\354\277}\362Q\330\263\274\336?\226Z\000\233\r\273\332\277B Z8\260Q\364\277\304t\200\216\207\333\251\277\334\211\030\363=\373\363?1\374,\035\316\217\322?\021\254|\326\035\035\342\277\311\274\246\373~V\260\277\022\006X\352\250\220\327\277\207\027\004\311\255f\345\277\340+\230\0313I\262\277\0312M6\375.\344\277\314\277\306\353\346\254\327?,\261h\032\374^\362\277\004\002\223}\314\224\362?\375\302Q\007\221\026\360\277\177\344E\337\010\233\360\277\003\267\326\027~=\262?:\245}~\227\344\330?\216efaZM\317\277?\355\245_\303\253\361\277\000\366\005\340}\274\362\277\207j\026?\350\254\362\277\214\333r\226\210\235\336?\002)\272\270jb\365\277k\273T\304(.\367\277\223#\241\323QI\236\277\224wH\214\371\201\211\277\217\030#\003,\323\260\277\333\235\363\003\365\350\360\277\376\245\013\275\'\363\354\277\376\245\013\275\'\363\354\277F\177\371K9p\341?\017m\002P\037\250\000@\206+\337\331dT\322\277\033\215;\377\031\235\320?\256\233\001\340\322\262\361?KCh\031\024\247\312?x]\346\230Y{\367?\014M\232\241\031\342\003@\013e\343\333\301c\360?\336\304$PK\334\325\277\304\365\002\304\tq\275?I\216\236<l\305\330?\301\307\nN\227\234\362?\337\201D=\337\254\264?,\261h\032\374^\362\277\245\014\306FAk\351\277\0015=E\001\025\343?8>\n\265\257w\274?o\376<t\0307\370\277s\342\215\255\002\373\273?\277\213o\n\272\255\311?\352#RCN\r\305?Q\246\270w\tv\310?%\310\325;\241\220\304?\336\231L\312@^\362?\333\250\347\251\273\215\327?{\220\232qF!\372?\204J\256\220\342\346\365\277\371\256l\345!\003\341?\370z)&eO\327?\304\n\363\375\206\245\363?tI\001w\352g\330?Zp|\237\346\261\322\277r:\\\206\267\022\341?\361\206\242\241C\334\302?\204\367\233\032\250\240\350\277\307Dpt\304x\356\277O\255\373\322cj\276?N\226\000\322D&\352\277,\261h\032\374^\362\277n\333\274r.\364\363\277\330*y\337\264\334\346\277gE\276\227\351c\232\277\016\214\024(\030W\345\277\304\223\321\237\222\016\353?>BAB\022a\357? \200\257\316\251\025\316\277\200\323\004|\303\312\250?[\223\374\240\320\364\326\277\026p\353\243\370S\333?>[Z\020\321\300\261?=g\337\020\234\277\341\2770\333x\251s\330\017@i|\035_\245\325\326\277)\220q\205&\213\376?D\3479K!\245f?\372b#\r8\352\353\277n\244a`\215\303\362?\365\374\272[^\236\346\277=g\337\020\234\277\341\277\2560e\202\251\032\271\277\003\303[\030I<\342\277D\340\027\273\036\330\314?Wl\313Tz\001\362\277\220\300T*w\273\353\277\321\273\243\200\364\016\271?\266P\325\3152\272\325?\221#\233w\264d\367\277\342#\304c\324\372\362\277\274IYb\025\317\000@Z$3\307\374\230\315\277\304\223\321\237\222\016\353?B Z8\260Q\364\277s\342\215\255\002\373\273?X\217KVdD\366\277\257\342\220\311vF\361\277\355v\352\373~\214\344\277\336jI<\300h\340\277\305\\v\215\361\335\331?\017\002\247\237<\340\366\277A\375\3316\306\016\360\277=g\337\020\234\277\341\277\375\302Q\007\221\026\360\277@?)\357-\344\347?\365\374\272[^\236\346\277\303\001\210\304\324o\355\277u\007\262\276\202\222\360?\032U\3157\347q\350\277x\366tC\246Z\315\277E@\302\346\265\027\361\277h\210\240\353;\210\364\277\254o\026\2456:\347\277|\304\3350\003\325\363\277\227\222nb@\346\342?\204\367\233\032\250\240\350\277\n\336\215\246\312i\351?\366;\362\300\341\366\366?p\234L\375\347\244\004@\244<X\273\221n\362\277e\337Y\233*Y\340\277\364\331:Zt[\342\277V%<k\326m\362?%\310\325;\241\220\304?jd\023^\017\330\246?\375\334f\317\310#\336\277\332\016H\276\021\000\275\277\036\230\265\347\326z\351\277}\362Q\330\263\274\336?\200\264\263j\270\227\347\277 \200\257\316\251\025\316\2770\363\301\343\033Z\374?\2671\006\027\265\'\362?9$\367`\254\266\340\277\036\353\307]\021\301\366\277\332\016H\276\021\000\275\2775\251\240\351\211\202\307\277\216zT\'\2435\343\277\032\320\033\022\206\314\261\277\243\216W|:\272\310\277S\r,A\361\342\324\277\300\332Vx~|\370?gxl\0249%\366\277\267\267H\227\032\'\302\277|\304\3350\003\325\363\277|\304\3350\003\325\363\277\010\252J\347\r\266\337?s\356\022\256\315\371\353\277\016\337&\236R\235\362\277\340+\230\0313I\262\277\223\255\214\316Q\310\305?\332\205g\250\321J\323?\276\313\261\207K\'\361\277\021\254|\326\035\035\342\277\036\221\354I\206M\361?\332\016H\276\021\000\275\277~\267\313\275\234\024\357\277\224wH\214\371\201\211\277\300\332Vx~|\370?5\325H\003\253\336\000@\030F(G\264\034\321\277\017\257\224)\002\232\351\277v*2\300l\325\364?\r\337\244C\305\374\244\277\034\260\273\000\004\340\324?\221\343\324+a\376\357\277\2654\036j\231\244\371?\024\025\375\332\333\345\356\277\360\373!d\326j\375?jay\260\235\272\361?\274\273}\260H\304\362\277\261\3615\272\251\233\370?j\230\324\302>\353\362\277\376\231\206\274\\\364\274?B Z8\260Q\364\277\t\273\r\245\340&\345?\236\365\276\3005\265\340?Zp|\237\346\261\322\277\332\016H\276\021\000\275\2779\211\306\032\376\316\374?r:\\\206\267\022\341?\235\275P\371\002\212\330\277\260\177\316J\373\211\305?\273\307\000=\337v\340?\t]\007\211\337;\321\277\246\202X\276e\364\372\277\016D\366W\244\265\356?]\267\217WL2\322?N\005\312\253\030\202\343?\n\200\207\212\311~\325\277\337\347\244Q5\037\332\277\001hmO,\316\305\277\317\201(~\353\207\340\277\371\256l\345!\003\341?\035u5\346\3547\345\277\034\n\227\024\217S\352?@?)\357-\344\347?\177\2213i\316T\343\277PK\312\256\354\007\354?i|\035_\245\325\326\277\375\334f\317\310#\336\277\203\241\353\016\223\244\301?l\240\260\025!\023\322?\3352\333t\215=\310\277jt\305\332\204\232\367?\314\277\306\353\346\254\327?\363R\345$}a\373\277G3\260sOW\354\277\n&\254v>\013\340\277\361}9\334\305\362\276\277\023\362|\331\361\242\352\277S\342S\273\346d\361?Y\3362\304(\023\305\277\375\361T\225\021\014\342??\246\026v\037\030\362?|\n\\\331I\272\256\277\031&\310520\264?q\250\022\253\371s\343\277|\304\3350\003\325\363\277s\356\022\256\315\371\353\277\r\337\244C\305\374\244\277|q\313\272\310\216\346\277yQc\014\303\310\351\277\260T\3708%X\304\277 \200\257\316\251\025\316\277\332\016H\276\021\000\275\277\335\220\341\220\216(\354\277V\030\245\357\223\232\014@\023)\330\353\222\323\333\277\3021\0329%s\366\277yQc\014\303\310\351\277\221#\233w\264d\367\277|\317\321\326\311y\332?\345\006\002\350,\304\317?\360\305U8\005H\363?\246{\217 \025\307\342?\371\235\251\'O\222\333?\376\245\013\275\'\363\354\277,\261h\032\374^\362\277\375\236B\037\327\305\364?\202\017\2423\325\005\324?\365\374\272[^\236\346\277\272\217\222u\254K\330\277#ylsO!\270\277=\236:#=\360\322\277k\302\035by[\337\2778>\n\265\257w\274?\227#\245\210l\212\351\277\375\302Q\007\221\026\360\277Q\246\270w\tv\310?c\361\221\326e\030\016@A\236\001\023z\371\003@\232\373\356f\376\256\357?S\r,A\361\342\324\277v\016{\\\323\277\350\277\014\n{U\233.\266\277u>\r\321#\303\361\277\202\017\2423\325\005\324?F\272\271n\001>L?m\346\260\030\365\230\332?gE\276\227\351c\232\277-q&\235j\345\312?\322e\367\\H\253\266\277\262\243a\001w\307\260?\261\346A\024\343\366\321\277\350\004\274\234\223q\000@\n\200\207\212\311~\325\277\270\247\230\216\331\260\343?\336\317\030\366\021\201\374?\224wH\214\371\201\211\277\353\370{1x\333\303\277T\371P0:\365\347\277\202\017\2423\325\005\324?+\274\\\300\302\003\331?|\304\3350\003\325\363\277}\264\257\265\235V\234\277B\374JP\366\000\371?G\242yM#\263\345?\013\341\251\256\311\'\234?|\n\\\331I\272\256\277\246\202X\276e\364\372\277\216zT\'\2435\343\277p\234L\375\347\244\004@,\000P\210\300-\301\277)>\356\365\273R\350\277\2103\273,G|\361?]\277\347\333lm\361\277\233\265\362\030Ej\222?\226Z\000\233\r\273\332\277%N\030\274\006\220\364\277Ab\251\360\027\'\354?R\374h\203\036r\357\277S)\343\244\212\370\360\277\231\034a\363\367o\002@\035u5\346\3547\345\277`1\323\031\335k\344?\n&\254v>\013\340\277\235\275P\371\002\212\330\277\376\245\013\275\'\363\354\277\233\265\362\030Ej\222?\336\317\030\366\021\201\374?f\031\224\360\354\017\n@i|\035_\245\325\326\277^|\t=5\212\342\277\271(\037\254\304\336\313?hd\221\003\2027\371?&^L\223\t\363\362\277\230\226\235R\037\366\245\277\212\357M\247?\213\353?\367B\273^2$\357\277\332\016H\276\021\000\275\277"
      }
    }
  }
}
node {
  name: "tensors/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1167
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1167
          }
        }
        tensor_content: "\362\325]`\"\356\001\300\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\237>Ui\364\321\344?\0342\004\362I\372\365?\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\0342\004\362I\372\365?\026\031b\003\365J\370\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\026\031b\003\365J\370\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\026\031b\003\365J\370\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?X\237\n?\312\266\007\300\0342\004\362I\372\365?\0342\004\362I\372\365?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\333\253[\266t\216\006@\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\0342\004\362I\372\365?\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\026\031b\003\365J\370\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\0342\004\362I\372\365?\237>Ui\364\321\344?\026\031b\003\365J\370\277\0342\004\362I\372\365?\0342\004\362I\372\365?\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\026\031b\003\365J\370\277\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\0342\004\362I\372\365?\237>Ui\364\321\344?\237>Ui\364\321\344?\026\031b\003\365J\370\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\237>Ui\364\321\344?\362\325]`\"\356\001\300\0342\004\362I\372\365?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\0342\004\362I\372\365?\3227\357\212X\205\262\277\0342\004\362I\372\365?\362\325]`\"\356\001\300\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\237>Ui\364\321\344?\0342\004\362I\372\365?\224\014\021\214Js\351\277\237>Ui\364\321\344?t\342\256\327\314\305\000@\026\031b\003\365J\370\277X\237\n?\312\266\007\300\3227\357\212X\205\262\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\026\031b\003\365J\370\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\0342\004\362I\372\365?\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\0342\004\362I\372\365?\0342\004\362I\372\365?\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\362\325]`\"\356\001\300\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277X\237\n?\312\266\007\300\0342\004\362I\372\365?\3227\357\212X\205\262\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\0342\004\362I\372\365?\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\333\253[\266t\216\006@\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277t\342\256\327\314\305\000@\237>Ui\364\321\344?\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?t\342\256\327\314\305\000@\224\014\021\214Js\351\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\0342\004\362I\372\365?\3227\357\212X\205\262\277\237>Ui\364\321\344?\026\031b\003\365J\370\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?t\342\256\327\314\305\000@\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\0342\004\362I\372\365?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\0342\004\362I\372\365?\237>Ui\364\321\344?\0342\004\362I\372\365?\362\325]`\"\356\001\300\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\0342\004\362I\372\365?\026\031b\003\365J\370\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\0342\004\362I\372\365?t\342\256\327\314\305\000@\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\333\253[\266t\216\006@t\342\256\327\314\305\000@\224\014\021\214Js\351\277\237>Ui\364\321\344?\026\031b\003\365J\370\277\333\253[\266t\216\006@t\342\256\327\314\305\000@\0342\004\362I\372\365?\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\026\031b\003\365J\370\277\026\031b\003\365J\370\277\333\253[\266t\216\006@\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277t\342\256\327\314\305\000@\224\014\021\214Js\351\277\362\325]`\"\356\001\300\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\362\325]`\"\356\001\300\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\237>Ui\364\321\344?\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\026\031b\003\365J\370\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277t\342\256\327\314\305\000@\224\014\021\214Js\351\277t\342\256\327\314\305\000@\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\0342\004\362I\372\365?\0342\004\362I\372\365?\224\014\021\214Js\351\277t\342\256\327\314\305\000@\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\026\031b\003\365J\370\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\362\325]`\"\356\001\300\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277t\342\256\327\314\305\000@\333\253[\266t\216\006@\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?t\342\256\327\314\305\000@t\342\256\327\314\305\000@t\342\256\327\314\305\000@\026\031b\003\365J\370\277\333\253[\266t\216\006@\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277t\342\256\327\314\305\000@\237>Ui\364\321\344?t\342\256\327\314\305\000@\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277t\342\256\327\314\305\000@\026\031b\003\365J\370\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\237>Ui\364\321\344?\362\325]`\"\356\001\300t\342\256\327\314\305\000@\0342\004\362I\372\365?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\0342\004\362I\372\365?\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\0342\004\362I\372\365?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\237>Ui\364\321\344?\237>Ui\364\321\344?\0342\004\362I\372\365?\0342\004\362I\372\365?\224\014\021\214Js\351\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\333\253[\266t\216\006@\3227\357\212X\205\262\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\0342\004\362I\372\365?\0342\004\362I\372\365?\237>Ui\364\321\344?t\342\256\327\314\305\000@\237>Ui\364\321\344?\0342\004\362I\372\365?\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\362\325]`\"\356\001\300\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277t\342\256\327\314\305\000@\224\014\021\214Js\351\277\237>Ui\364\321\344?\362\325]`\"\356\001\300\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\0342\004\362I\372\365?\0342\004\362I\372\365?t\342\256\327\314\305\000@\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\333\253[\266t\216\006@\026\031b\003\365J\370\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\0342\004\362I\372\365?\3227\357\212X\205\262\277\362\325]`\"\356\001\300\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\026\031b\003\365J\370\277\0342\004\362I\372\365?\0342\004\362I\372\365?\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\0342\004\362I\372\365?t\342\256\327\314\305\000@\237>Ui\364\321\344?\0342\004\362I\372\365?\026\031b\003\365J\370\277t\342\256\327\314\305\000@\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\026\031b\003\365J\370\277\3227\357\212X\205\262\277t\342\256\327\314\305\000@\224\014\021\214Js\351\277\333\253[\266t\216\006@\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\0342\004\362I\372\365?\276h\267\035r\177\r\300\237>Ui\364\321\344?\237>Ui\364\321\344?\0342\004\362I\372\365?\333\253[\266t\216\006@\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\362\325]`\"\356\001\300\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\0342\004\362I\372\365?\026\031b\003\365J\370\277t\342\256\327\314\305\000@\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\0342\004\362I\372\365?t\342\256\327\314\305\000@\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\026\031b\003\365J\370\277\237>Ui\364\321\344?t\342\256\327\314\305\000@\026\031b\003\365J\370\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\333\253[\266t\216\006@\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\0342\004\362I\372\365?\026\031b\003\365J\370\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\026\031b\003\365J\370\277\3227\357\212X\205\262\277t\342\256\327\314\305\000@\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\026\031b\003\365J\370\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\0342\004\362I\372\365?\3227\357\212X\205\262\277t\342\256\327\314\305\000@\0342\004\362I\372\365?\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\362\325]`\"\356\001\300\224\014\021\214Js\351\277\224\014\021\214Js\351\277\362\325]`\"\356\001\300\237>Ui\364\321\344?\237>Ui\364\321\344?\3227\357\212X\205\262\277\333\253[\266t\216\006@\237>Ui\364\321\344?\3227\357\212X\205\262\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\0342\004\362I\372\365?\026\031b\003\365J\370\277\026\031b\003\365J\370\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\0342\004\362I\372\365?\224\014\021\214Js\351\277\026\031b\003\365J\370\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\0342\004\362I\372\365?\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\362\325]`\"\356\001\300\3227\357\212X\205\262\277\333\253[\266t\216\006@\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\026\031b\003\365J\370\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\0342\004\362I\372\365?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\237>Ui\364\321\344?t\342\256\327\314\305\000@\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\0342\004\362I\372\365?\026\031b\003\365J\370\277\0342\004\362I\372\365?\0342\004\362I\372\365?\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\333\253[\266t\216\006@\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\026\031b\003\365J\370\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\0342\004\362I\372\365?\224\014\021\214Js\351\277\0342\004\362I\372\365?\362\325]`\"\356\001\300t\342\256\327\314\305\000@\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\276h\267\035r\177\r\300\237>Ui\364\321\344?\362\325]`\"\356\001\300\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\333\253[\266t\216\006@\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\0342\004\362I\372\365?\224\014\021\214Js\351\277t\342\256\327\314\305\000@\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\3227\357\212X\205\262\277\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\026\031b\003\365J\370\277\026\031b\003\365J\370\277\333\253[\266t\216\006@\0342\004\362I\372\365?\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\237>Ui\364\321\344?\0342\004\362I\372\365?\3227\357\212X\205\262\277\0342\004\362I\372\365?\026\031b\003\365J\370\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\026\031b\003\365J\370\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\0342\004\362I\372\365?\026\031b\003\365J\370\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\0342\004\362I\372\365?\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?t\342\256\327\314\305\000@\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\026\031b\003\365J\370\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\3227\357\212X\205\262\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\0342\004\362I\372\365?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\224\014\021\214Js\351\277"
      }
    }
  }
}
node {
  name: "tensors/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1167
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1167
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1167
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1167
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1167
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1167
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1167
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1167
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "tensors/component_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1167
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1167
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_8"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1167
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1167
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_9"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1167
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1167
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_10"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1167
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1167
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "tensors/component_11"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1167
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1167
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_12"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1167
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1167
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_13"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1167
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1167
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_14"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1167
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1167
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_15"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1167
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1167
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_16"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1167
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1167
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_17"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1167
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 1167
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "tensors/component_18"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1167
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1167
          }
        }
        tensor_content: "\302V`\253\325L\003\300\022\034\262\344\320H\362?\353\177<\252q \275\277\024\364%4Cv\277\277\302V`\253\325L\003\300!<]b\3119\357\277J\232SN=\367\342\277\351\353E\016\203\021\341\277R\370\"\351\037\247\257?\255\201\022A\250\272\364?3\373\237\215\221\274\334\277\036\271\260a\241T\351?\314X\330\264\005\346\326\277\327\3470b\177\300\360?a\330I\341\005\267\333\277aMP\022\327j\324\277\250c\242\2224\315\337\277\036\312\372\374g~\317\277G\275\341\265\312\343\244\277\\\347\216\260[\325\354?\007\003\2655\340\321\342\2770w\236\277\261\'\345\277\007\216\256\004\017\036\352\277\333^\274\224\034\265\363?\200g\276\241[:\353?\256\272\303\363X\230\324?+\205\216\301O\226\344?k5\304CzL\334\277L\223[M\356?\323\277\232{\323/\220?\266?\301:\2628\3315\364\277)\021\202\301~{\301\277\200\332\0328\275\216\340\277\024m\200\232\363\350\316\277\373\337\2604\363\251q\277\363Jj\013g\006\345?\241\353\346+\203G\344\277\327@L\346\250\307\336\277\005\014W\321\236\350\325?\302V`\253\325L\003\300\363H\300p\367\246\341\277\224\223\272/\356\t\320\277*\327\326\335\315\004\374\277[\372\277 =\364\001@\375E\017\255\353\006\002@\253\323Z]&)\354\277\\i\213G\024\364\264\277\205\341\310\006\305\010\316\277\352\257\360\217b;\370?\275\010\371\206w\017\344\277!(\024_\333\000\344?\241\353\346+\203G\344\277Z\256\335\375\252\367\374\277xy\247<!Q\345?G\275\341\265\312\343\244\277\262u\314\331y\253\370?\253J\013)g<\350?\223^]\262\034\353\366?Y`\216zT1\340\277\302V`\253\325L\003\300\267\3357\326d\240\363\277;K\311\355f\320\341?=H%\"\367\327\310?0\004B)P\323\357?g\360\026\\\342\234\362?v\200\237=p\010\325?\3736\327\3251\220\347\277\241x\212\225!\363\356?7\031\020<\005\252\361?\302\374\262\037I\000\350\277\344\3715\020!\200\340?H\223\000\034\355\223\261?=\315 !\327\005\326\277j\351\036[\223\345\362\277&\221\324(~\245\340?\251\333\247+-\220\355?\024W\215\374\225P\300\277\205V\3177\226\274\306\277\341\215\321z\016\343\312?\241\353\346+\203G\344\277\336\324\362\371\001\372\364\277f\312Y\337gH\314\277\\\342\345\255\304f\304\277\252\234SE\345\252\377\277\253\323Z]&)\354\2778d`W4a\331\277\217\036Y\315\033\252\265?\\\347\216\260[\325\354?k5\304CzL\334\277{-\335\272\226\313\362?.\304\275\016\364\\\371?\324\276\364\2628\222\352?\363H\300p\367\246\341\277\2350\336Eb4\360?g{\020+\021\351\371?\216\364G\033\302\226\370\277\024m\200\232\363\350\316\277\300\002VS\340\007\346\277[\231?-\005\017\360?\\o\211\027c\022\337\277\353m\235A\363F\305\277\331\262\256K\n\203\356?\235\030\304m\227A\005@\336\216\313\253\016|\340\277k#%\333\373r\324?\360\330\007\246\005K\325\277\027\313\231\374fk\343?3\365\241\275B\236\262\277\302V`\253\325L\003\300b\207V\222?\370\365?3t\372\363A/\334?G\275\341\265\312\343\244\277\n\212\265k\347u\357?\035\365\005\340\301*\362\277\353\344M\r4Z\321\277\227\216l\311\016\262\343\277imE\302\026\231\363?k5\304CzL\334\277\224\251\255\315K\242\336\277XyqOS\230\023@\212\302\216i`p\350\277\224\251\255\315K\242\336\277q\216\217?\016w\304?=C|\037`i\340\277\356\341\251A\304a\350?\363H\300p\367\246\341\277\270\031\350\360<\215\310?\222%\254\377k\r\347\277\257{o\r\021\263\366?\236{.a\221\353\327\277\356\337\377\246T\002\345\277\347@\215\222(\217\375?k5\304CzL\334\277aN\245\337\216\032\346\277\206\0061\266\207\255\362\277\221\322>\004\037\210\214?8g_\277[p\356?.|\354%\221\177\321\277\351\355\357\250\362p\344?\331\260\004\261\232#\353\277\007\220X\237~}\355?\307d\036\0344\365\322\2773q\373\213\032 \347\277\375\245:\323k<\342\277\373\337\2604\363\251q\277\366\376\237\211\334\200\362?;\220\233n\242\236\364?\231\210\311\225w\252\345\277q\216\217?\016w\304?k5\304CzL\334\277\322:\363\344X\375\322?:_\022\361T\t\355\277\00165\253\213\323\001@\222%\254\377k\r\347\277aN\245\337\216\032\346\277\031M\361/\327\240\327\277$\037r\303\034\352\320\277.\177\353\215\270\216\346?2\257\372\244\252U\363\277\rn\037\232\362\325\342?\307hrQ\023\264\331?G\257\226\202+\311\263\277\236\177\202\226p\252\336?\363H\300p\367\246\341\277\336\216\313\253\016|\340\277\300\004\000\356Og\351?\036?\001.92\310\277\241x\212\225!\363\356?\360\330\007\246\005K\325\277M\226Z\265\025O\350?\271c\343>\264\224\376?\275\222\235\210\356\253\331\277Z\256\335\375\252\367\374\277\363\323\271?&\363\350\277\024m\200\232\363\350\316\277\302V`\253\325L\003\300\3736\327\3251\220\347\277T\371wK!\354\346?z\200\372nq\264\266\277\263\252)WK\312\321\277G-\232\353r\252\353?)\026+\304\025\352\351?\241\353\346+\203G\344\277\346\007\334\337w\261\355\277\031\306K\226\207\023\327?\023\230\213}M\225\361\277)-\360\316(-\003@@?\203\2068\301\345?\322\301\230~\250\212\323\277G\242\240\034D^\344?\024Z\214d\275_\345\277\217*\372eKe\323\277.\013:*\237\212\337?0w\236\277\261\'\345\277\207\3101\235\367w\346\277\031M\361/\327\240\327\277\017i\3213\023~\326?)\237z\370\324\326\355\277\270\'3$\334\247\311\277\260\261!X\232\201\341\277\341D\253\304\363U\361?\302\374\262\037I\000\350\277\253\323Z]&)\354\277\022\355\322\001\363\022\356?\0344Z\306\t\020\340?K\322\25736%\361\277\206\0061\266\207\255\362\277\236{.a\221\353\327\277\251M\257\364\3264\321\277\367zy\"Y\315\361\277\007\216\256\004\017\036\352\277\034\275\251\372\310\374\343\277\036\312\372\374g~\317\2773\365\241\275B\236\262\277\205\320~k\376\336\347?\306\244\307\3173\212\362?\005\227P\240\3154\335?\204\014\324\351\036\265\360\277\356\001\231\334\3300\203?q\216\217?\016w\304?\230\307\035|\277\217\363?\207\204\264\351sY\365?\336\033o\025\255\'\353?+\020\210\220~\342\353?\031M\361/\327\240\327\277\327.\255}*\356\326?k5\304CzL\334\277\300\215O\"\017T\355\277a\331\236\256\275f\355\277w\313\357X\237\277\374\277\302V`\253\325L\003\300\353p\234\251\032V\352\277k5\304CzL\334\277P\306i\314\007\026\365\277\3735\202\010z\340\325\277J%M\035lC\352\277\005\014W\321\236\350\325?\2636x\3631\306\352\277\205\323}\323%\356\314?\036s\211\023\256\326\364?\350\0019\254\340\251\357\277\272\231\225\211=c\351\2773n\374#\363\020\302\277E3=\037\n\262\351?&\032$]=\222\344\277\270\216\356!\016A\301?\270\222BW\355\377\267?L\036U\034\035\214\332\277G\275\341\265\312\343\244\277\365B\035=`\237\343\277\024m\200\232\363\350\316\277B:5 Yi\331?z\373\376o\221\206\331\277O\005\276\262O\373\342?\313|\273~\224\027\220\277\241\353\346+\203G\344\277L\036U\034\035\214\332\277y;\250#\221\033\371?\217.N\233*$\332?cH\002\254\367\022\350\277\263\252)WK\312\321\277\3736\327\3251\220\347\277\236{.a\221\353\327\277\247\215X\250\326\311\360?,G\217\250\277`\370?K\322\25736%\361\277\217.N\233*$\332?\036\267\006\3071\365\345\277\216\364G\033\302\226\370\277\216\364G\033\302\226\370\277\363(\321\325\342\327\206\277\267\3357\326d\240\363\277\263#\204\275\373<\321?\255\200\275s\360\n\363\277\000\036\233\010\034\026\274?\034\275\251\372\310\374\343\277\275\303&\006<A\361\277\270\346\264\330\177\230\375?G-\232\353r\252\353?G\275\341\265\312\343\244\277\206\007\206\203?]\364?!<]b\3119\357\277\224\251\255\315K\242\336\277\\\347\216\260[\325\354?\017\255N\347\226\234\367?\302\013S \240\312\272\277\236\3604\222b\237\320\277=\315 !\327\005\326\277\274F\370\237\007E\360\277&\034\316\367\254\361\347?\327+\256\025\003\337\341\277\224\251\255\315K\242\336\277\312\326\200\201\225\260\342?\300y\006\037!\033\342?T\371wK!\354\346?,\322\210w\356\254\377?3\365\241\275B\236\262\277\236{.a\221\353\327\277\034H\243\311\367H\353\277\2151\362f\232\034\343\277\324\276\364\2628\222\352?\270\216\356!\016A\301?5\340^\211T\314\341\277\027\313\231\374fk\343?\253\323Z]&)\354\2770w\236\277\261\'\345\277|5\005\360\371\023\373?\326\305G\345\210\365\273\277\322\tjg\013h\373?G\240\366\201\324\376\340\277\030\215\232\343\3265\367?`\215\371\305\326\377\363?0w\236\277\261\'\345\277\360\330\007\246\005K\325\277\253\323Z]&)\354\277R\375p\344H\224\341\277\025\312D\232e&\254?G\266\351\0372\227\357\277\n\212\265k\347u\357?\302V`\253\325L\003\300\305m\300\267\362\013\346?8\335\272\275\344\323\330?G\257\226\202+\311\263\277k5\304CzL\334\277\276A\2529(\355\363?\000\027Hk\025H\340?\024m\200\232\363\350\316\277\217\242\377\376C(\341?+\'M\233\221%\005@\313|\273~\224\027\220\2773\331\013W\004i\260?\341#\201\204\276\267d?\364\360\244\010fm\222\277\260\263\313\362\t\341\344?\365\315\026\014\217\353\352\277r\335\010\014\341\231\220?\251M\257\364\3264\321\277Y\353\207I\203}\347\277U/*\226\252\272\361\277\034H\243\311\367H\353\277\335X\031a\205\255\365?2\257\372\244\252U\363\277\253\323Z]&)\354\277\365\312\027\244g\334\305\277cH\002\254\367\022\350\277\217:\3573Z\337\267\277\367\006\310\276?\311\372?\302\204\255\206P=\312\277\\M\365\340\325\276\262?\253\323Z]&)\354\277\217.N\233*$\332?\027mX\326\250\372\003@j\352s(K\225\364?\036I\370+\371\215\242\277\2350\336Eb4\360?\365U\021s\226(\315\277\312\352\311\204\203\351\355\277J%M\035lC\352\277\234\237)\242\224i\010@\036r4F\366&\363\277\\\342\345\255\304f\304\277\246j\232\223\203\204\357\277\311\236$\234\234\202\364?\366\300 \246\247\200\273?\204\014\324\351\036\265\360\277k5\304CzL\334\277Q\022\017\265\356|\336\277\035\365\005\340\301*\362\277\236{.a\221\353\327\2770w\236\277\261\'\345\277\270\222BW\355\377\267?\217>Ci9\236\316\277\216\364G\033\302\226\370\277\236|\203.I\233\351\277\240\213\273\005\003\022\004@p\024\340\013\246T\343\277k5\304CzL\334\277X\265\325\376\371\256\374?\336\324\362\371\001\372\364\277\242$\230\3363%\364?>>.$7|\256?\2151\362f\232\034\343\277\305k\026\035\203\254\342\277Q\205kKP\321\303\277u\007E\327\277\225\325\277\205\316\324\320\216\177\344\277\372\300{\327\250,\335\277\027T\3510&X\347\277/\266\362\245\371\014\363?\360\330\007\246\005K\325\277\360c\001u4\227\334\277\353\177<\252q \275\277\303\341q\206\302z\247?jum\367y\341\373?0w\236\277\261\'\345\277\273\233?$\255\302\354?]?\252\2556\244\241?u\007E\327\277\225\325\277\360Qb\014\266\275\324?n\245|\016l\250\350\277\200e\024\007\354\332\347\277p\024\340\013\246T\343\277\322:\363\344X\375\322?q\007\352\245\276\351\263?\244\324\371\\%\026\300?k5\304CzL\334\277\037/\014`*\270\323?+\020\210\220~\342\353?\352$\367\3003\357\360?\341\213\'\340\236\203\327?\353\177<\252q \275\277\352\256\233\302\252\213\366\277\237\260V\\9\001{\277\224\333\213\030Q\347\367?\341\026!\257\315\317\336?oi\'\220K\322\377?\231\002y\311\337\314\306?(\234{\220\255\307\310\277\224\224\017\375\245\271\341\277G\275\341\265\312\343\244\2778d`W4a\331\277\0136\303\264\371\247\364?\312\326\200\201\225\260\342?\305\366\017\354\261\370\351\277\217\245\376fk7\306?\241\353\346+\203G\344\277\326\305G\345\210\365\273\277\216\364G\033\302\226\370\277\253\323Z]&)\354\277\360\330\007\246\005K\325\277k5\304CzL\334\277\353\177<\252q \275\277L\036U\034\035\214\332\277\373\337\2604\363\251q\277\036\274\257\311\310c\316?!<]b\3119\357\277\034H\243\311\367H\353\277cH\002\254\367\022\350\277}\342g\006\304\365\341?\265`\tp0\244\362\277\373\310\340F\267\n\001@,+\3415\303I\t@\251N\004\302\216\344\342\277G\275\341\265\312\343\244\277\217\263I\232\nR\307\277n\245|\016l\250\350\277\373\337\2604\363\251q\277\314V.\032\226\206\303\277cH\002\254\367\022\350\277\200\357\270\010cw\335\277\307d\036\0344\365\322\2773\365\241\275B\236\262\277~\244h\3553\300\365?\364\360\244\010fm\222\277G(\361\350\333;\303\277\235F\321\343\277\314\376?Rw \030\261\266\302?+\020\210\220~\342\353?\353c\246C3\353\272?\373\337\2604\363\251q\277oi\'\220K\322\377?\352\256\233\302\252\213\366\277\352\215\207\335\020;\256\277\264\344/\327\263W\363?\356\341\251A\304a\350?|\252\013!\313\307\363?\375\245:\323k<\342\277\034H\243\311\367H\353\277\2639w[Y\325\337?\202\324w\004&\207\342\277\363H\300p\367\246\341\277\302V`\253\325L\003\300\322\301\230~\250\212\323\277\336\216\313\253\016|\340\277B6\341\352y\252\322\277\373\337\2604\363\251q\277\251N\004\302\216\344\342\277\353\177<\252q \275\2773\373\237\215\221\274\334\277\263\253~$\003z\343\277\324\274J\030\3112\347\2778d`W4a\331\277\263\252)WK\312\321\277H\032\246\265<!\302?\256Gg]\367C\317?]?\252\2556\244\241?\n\377\273\234\270)\350?3\373\237\215\221\274\334\277\035\365\005\340\301*\362\277\207\3101\235\367w\346\277\317\312:\032g\241\346?\217*\372eKe\323\2778d`W4a\331\277\027\346\362\241\253\322\000@\270\'3$\334\247\311\277[\231?-\005\017\360?\353c\246C3\353\272?y\257Y\207\252\037\360\277\353\352K\335\202x\313?\007\005_\320O1\346?CT9\370\345 \005@\372\300{\327\250,\335\277=C|\037`i\340\277\353c\246C3\353\272?\014\371\030i!\"\352?B9\340R\241\271\347?\316\222\3364ns\370?\200h\023o\023\352\334?\302\013S \240\312\272\277\214\276\225\3208\310\355?\312azP\304\374\351?\270\256\330\275+5\272\277[$9\3743[\367?RD\355\377\363\301\367?k\256\036\252*\277\333?\372\300{\327\250,\335\277\036\320ul\264\227\002@\360\330\007\246\005K\325\277\327\233fK\253\245\250?\306\243r\002|\332\360\277\316\222\3364ns\370?\265\245\333\360kr\345\277\002%\356:ly\355\277\331\341\215.\350\270\362?G\275\341\265\312\343\244\277\n\375\021\002I\312\344\277K\322\25736%\361\277\363Jj\013g\006\345?\202\326!\237\225\346\345?7\244\t\0134\366\370?\315\212\266\377\n+\360?0w\236\277\261\'\345\2770\220\re4\312\001@\236\006(0\3007\337\277\224\226\271\227\025\031\345?]\223\234\371m\007\362?\217:\3573Z\337\267\277\360\330\007\246\005K\325\277\354U[\020\224\320\251?\007\005_\320O1\346?k5\304CzL\334\277g\360\026\\\342\234\362?\243m>_\363|\310\277\024\364%4Cv\277\277\000\237B\322\034\205\322\277cH\002\254\367\022\350\277Q\205kKP\321\303\277\307d\036\0344\365\322\277p\234\332r\255\221\305\277\204\014\324\351\036\265\360\277\373S\332\025\346V\010@=LyW\326\226\277?\302\031\236S?\345\253\277n\245|\016l\250\350\277q\007\352\245\276\351\263?\207S+l&\304\355\277\365\317\300\246\376J\356?=\313v\206g\246\302\277G(\361\350\333;\303\277q\371\236r\037\317\242?X\265\325\376\371\256\374?\315\212\266\377\n+\360?[$9\3743[\367?\300\002VS\340\007\346\2778\335\272\275\344\323\330?cH\002\254\367\022\350\277\231\002y\311\337\314\306?\2151\362f\232\034\343\277\266\034\214\274\254\205\341?s\020\347r~\254\350?G+\360P\003K\350\277\302V`\253\325L\003\300<\r\312\324\326\232\365?j\351\036[\223\345\362\277\224\227\016e\315\310\326?\336\031\305z=\310\347\277\302V`\253\325L\003\300\005\227P\240\3154\335?\300y\006\037!\033\342?\365A\310o\250\357\321\277\2636x\3631\306\352\277=\313v\206g\246\302\277J%M\035lC\352\277\334\251\014\260Kl\333\277cH\002\254\367\022\350\277\303\341q\206\302z\247?T\371wK!\354\346?\241@\376\301?,\202\277\302\374\262\037I\000\350\277\346\364\347\251A(\324?\302V`\253\325L\003\300\231\215r\230\016\031\316?k5\304CzL\334\277\360P\r?\376\r\343?\034H\243\311\367H\353\277\336\324\362\371\001\372\364\277\024Y7\227\005\260\323\277\372\300{\327\250,\335\277\0178H\266\305\350\376?\363H\300p\367\246\341\277%\266d\234\2138\000@\365\334\266\014\346\265\275\277\364\360\244\010fm\222\277G(\361\350\333;\303\277\017i\3213\023~\326?\315H\343\346\366k\302?G\242\240\034D^\344?B\301\332\271\250\366\331\277M\013a\346\346\002\341?\376\336\353\205\034\032\362?i(sA\333\312\340?\217-\371\315rt\350?\234\204\320\374O\002\353?k\253\037B\003\260\346\277Yv\201\030\262\311\356\277\224\223\272/\356\t\320\277\374o\210\210\342m\367?\224\037\t\314\324\005\351\277\263\252)WK\312\321\277W\364)\345A\224\332?\302vbS\261\"\311?\302V`\253\325L\003\300\334\036\023\341\034 \324\277\223^]\262\034\353\366?\256\312\270\301g\022\311\277k5\304CzL\334\277\302V`\253\325L\003\300;\217F\241\352\356\362\277>\"\230\275\370F\234?G\275\341\265\312\343\244\277>\007\'\241?\223\367?r\335\010\014\341\231\220?\360\330\007\246\005K\325\277\217\263I\232\nR\307\277\341\022\315y\356\020\330\277\224\251\255\315K\242\336\277\336\031\305z=\310\347\277\205V\3177\226\274\306\277k5\304CzL\334\277\306\244\307\3173\212\362?\352:\352^\221\207\377?\031\330\352\376\005\355\336\277 \360\267y\342\322\365?3\374\364ZIl\356\277\233Lt\027W\324\374?\270\241\342WD\312\352?f\272d\021Y\316\327?Q\205kKP\321\303\277.|\354%\221\177\321\277\034\275\251\372\310\374\343\277)\031*,=\371\316?\336\216\313\253\016|\340\277k5\304CzL\334\277\025\256\2563\'\361\231?]\036\226\310\234S\371?\205\263\2237\010\372\243?}v\317\246\207\371\022@n\245|\016l\250\350\277\275\225\234\360\025\273\356?J\232SN=\367\342\277\346\006\207\022\300\001\334\277\302V`\253\325L\003\300\204\014\324\351\036\265\360\2778\334e\360,$\347?A\323v\367\177\000\000@6\375a\311\010\223\002@L\036U\034\035\214\332\277\211\001\343O\250U\366?\n\002\273\004\3408\315?L\036U\034\035\214\332\277f\306\005\252\210\211\265\277\005\014W\321\236\350\325?k5\304CzL\334\277\236\361\211_\032O\342\2773\331\013W\004i\260?\2639w[Y\325\337?\024\3362\226\345\335\260\277\377\262\213\325\n\276\315\277\302V`\253\325L\003\300=\211\243mS\347\364\277=\313v\206g\246\302\277\250c\242\2224\315\337\277\'R\200B6\300\362\277n\245|\016l\250\350\277\302V`\253\325L\003\300\363H\300p\367\246\341\277\373\256\334n*S\325?\017f\322\313\353n\341\277\334\036\023\341\034 \324\277n\247&\251\333\007\354?\346\363\222\334\211x\342?\007\005_\320O1\346?\260\203\227Bt\373\376?f1\025\335\231\341\303?\031M\361/\327\240\327\277\302V`\253\325L\003\300\363(\321\325\342\327\206\277=VpU\226\362\311\277\302V`\253\325L\003\300a\225!\3739H\374?O\031\007\266=4\356\277\250c\242\2224\315\337\277\207\016Y\353\352\365\372\277\327\3470b\177\300\360?\270)\335\276K\007\335\277\341\207\323\252\277\304\320\277\353\370\226\020\"\223\314\277\241\353\346+\203G\344\277s\233\340A\255\370\357?\267?\r\227T5\007@\302V`\253\325L\003\300!<]b\3119\357\277\360\225\337\2779\334\365?\231\020\304\374~\347\307\277=C|\037`i\340\2777\243\264=|F\367\277fs\350\365\255\240\361?\235\273\327\024\221\200\367?\256E\275\302\207\344\333?\317U4\351\225\355\355?\336\324\362\371\001\372\364\277\356\232-&\0314\362\277n\245|\016l\250\350\277>`\177_\0240\001@\341\002\330\253\337\226\303?\200e\024\007\354\332\347\277{\376\375\327\270\225\356?\260>\305\3018-\354?\204\014\324\351\036\265\360\277\205\333\360!\352\n\'@\\o\211\027c\022\337\277\351\353E\016\203\021\341\277\346{\215C\221\265\324\277\265\247\205\213\333\321\350?)\0037\216\337`\300?\241\353\346+\203G\344\277\246\341J_\304\227\353?\260<\033\'\311\315\350\277|5\005\360\371\023\373?$ \307\220\324\231\342\277\336\216\313\253\016|\340\277\341\006,\341\276U\272?\253\323Z]&)\354\277\216\364G\033\302\226\370\277\217\245\376fk7\306?T\263P\375-n\362?J\234\375\350\254V\346?&\245\035,l\336\353\277\217\036Y\315\033\252\265?\244\324\371\\%\026\300?\302V`\253\325L\003\300\312\352\311\204\203\351\355\277\306/\301\236b\326\371?\031QEe\266_\336?[w\326z\263\016\246\277s\205\355\243O`\341?@=\331\353\310a\342\277\321L\222M\327\326\332\277\017\"U\030hP\360?\220d\000\346\263\362\364?G\275\341\265\312\343\244\277\024\3362\226\345\335\260\277\314X\330\264\005\346\326\277fE^\340\207\032\337?\363H\300p\367\246\341\277\022b\3312\304\306\346?\017\364\312\002B\312\335?|5\005\360\371\023\373?\030\215\232\343\3265\367?k5\304CzL\334\277\270\'3$\334\247\311\277oS4\362\3559\361?\376\335\226\270dj\360\277\373\362Y\"\256q\366?\217>Ci9\236\316\277cH\002\254\367\022\350\2770w\236\277\261\'\345\277\314V.\032\226\206\303\277)\237z\370\324\326\355\277cH\002\254\367\022\350\277\036?\001.92\310\277\224\251\255\315K\242\336\277P\307\276\231\277\305\366?\346\006\207\022\300\001\334\277p\'\324A\334\335\314\277\270*2\214\003\267\356\277\334\227mG\315\222\323?:_\022\361T\t\355\277\336\216\313\253\016|\340\277f\266\020\334y\017\321\277\353\370\226\020\"\223\314\277\316\222\3364ns\370?\346\006\207\022\300\001\334\277k5\304CzL\334\277k5\304CzL\334\277\241x\212\225!\363\356?a\330I\341\005\267\333\277\000\\\032\354P\026\363?E\021\244\351\205\203\213\277+\231\327\304=\317\357\277\205V\3177\226\274\306\277F\331w\034\t\031\227\277\231\020\304\374~\347\307\277B9\340R\241\271\347?G\275\341\265\312\343\244\277\256\274m\216\310\367\307?\n{\025k\220\253\274?\202\326!\237\225\346\345?\002\234\236\006\255\214\351?\327@L\346\250\307\336\277\270\031\350\360<\215\310?\244\330M\222\004\325\266?\302V`\253\325L\003\300\306\243r\002|\332\360\277tG\356\212\277*\365?\376h\220\207\223\266\367\277\303\341q\206\302z\247?\\m\337|\363\262\313\277\237\260V\\9\001{\277O\216\r\347\016\350\346\277W\364)\345A\224\332?\000\245@\242k\243\314?u\007E\327\277\225\325\277\302\377\261\207p\017\335?u\007E\327\277\225\325\277G\266\351\0372\227\357\277\302V`\253\325L\003\3005kXX\203\030\351\277\206V\033\243\307\222\022@\215\354\037\346^N\360\277\353_R\016T,\304?\270\027>V\315-\325?\217\243T\314\373\327\322?\360\330\007\246\005K\325\277\275\303&\006<A\361\277\265\245\333\360kr\345\277\017\360v\315b\013\327\277\352\256\233\302\252\213\366\277\354U[\020\224\320\251?\331\260\004\261\232#\353\277\241@\376\301?,\202\277n\247&\251\333\007\354?\253\323Z]&)\354\277$#\306\370\373\250\327?\302\371\263\267!\361\302\2778d`W4a\331\277\\\350\343}\023\205\336?\224\251\255\315K\242\336\277\344\202\205D\340l\344\277@\352k\360{\334\207?\200\357\270\010cw\335\277\236\364\210\307A^\327?\207S+l&\304\355\277\302\206W!\300\234\335\277)\031*,=\371\316?\034JMdg\250\356?}\366\260\t\262.\355\277\200\357\270\010cw\335\277.\007\346\364\277\313\330\277\270\256\330\275+5\272\277\336\324\362\371\001\372\364\277\270\'3$\334\247\311\277\300\002VS\340\007\346\277u\222>\246\356\341\334\277\031\303L.`\004\342\277\365A\310o\250\357\321\277k5\304CzL\334\277k5\304CzL\334\277\221\322>\004\037\210\214?\327+\256\025\003\337\341\277\267\3357\326d\240\363\277\374\344\216\271\263!\360?fD\t\023\320j\355?\305\366\017\354\261\370\351\277\353\370\226\020\"\223\314\277\302V`\253\325L\003\300\302V`\253\325L\003\300p\024\340\013\246T\343\277\310\335x\202\344g\322?\024Z\214d\275_\345\277\331\260\004\261\232#\353\277\354U[\020\224\320\251?{-\335\272\226\313\362?}\342g\006\304\365\341?\262u\314\331y\253\370?G(\361\350\333;\303\277\256Gg]\367C\317?\356\337\377\246T\002\345\277x\276y\275\\\037\370?\353\350\241B\023\031\330?\256Ai\215\250%\325\277\360\330\007\246\005K\325\277\2565\310\364xj\267?f\266\020\334y\017\321\277\2151\362f\232\034\343\277n\245|\016l\250\350\277\300\002VS\340\007\346\277\005\014W\321\236\350\325?\035\366Z\255y\332\363?\\_\224IT\230\312?\343\017)\256~\030\357?\365\315\026\014\217\353\352\277\270\'3$\334\247\311\277\000\030\2358\315\367\321?\2151\362f\232\034\343\277i\370>\221E\345\372?\223^]\262\034\353\366?\320\001B2\250\037\363?B\301\332\271\250\366\331\277\007\005_\320O1\346?\317\310\220\177\367A\343\277\353\372@\253\221\362\337\277U/*\226\252\272\361\2770w\236\277\261\'\345\277@=\331\353\310a\342\2773\331\013W\004i\260?\302V`\253\325L\003\300\250c\242\2224\315\337\277\023\230\213}M\225\361\277&\032$]=\222\344\277\353_R\016T,\304?u\222>\246\356\341\334\277p\031\211\016=\303\313?\365\315\026\014\217\353\352\277fs\350\365\255\240\361?@\352k\360{\334\207?\007\003\2655\340\321\342\277\327\266\247\3441+\351\277.\200@[p>\330?\n{\025k\220\253\274?xy\247<!Q\345?\212:\224\002Y3\326?p\024\340\013\246T\343\277\256\036\026\032Z\245`\277s\233\340A\255\370\357?\302vbS\261\"\311?\302V`\253\325L\003\300\205[x:-+\357?\031\306K\226\207\023\327?\255\201\022A\250\272\364?\253\323Z]&)\354\277\224b\346i%\263s?\227J\357\025\213\223\362?\000\030\2358\315\367\321?k\253\037B\003\260\346\277#\252k\222K6\330\277f\271\017D\241\036\346?0yHZ!\207\350?\353\370\226\020\"\223\314\277\224\251\255\315K\242\336\277{-\335\272\226\313\362?\034\275\251\372\310\374\343\277\224\223\272/\356\t\320\277\263#\204\275\373<\321?\346\177\341xpt\333?\316\222\3364ns\370?\241v\340\372\261\223\353\277\374n3\273*\276\365\277\274F\370\237\007E\360\277\336\324\362\371\001\372\364\277)\023,\\\356\332\324\277\302vbS\261\"\311?\352\215\207\335\020;\256\277f\274\016\254\310-\313?)\0037\216\337`\300?\212\302\216i`p\350\2773p\246\276bp\325\277\314Y-\202\275\225\350\277\326\305G\345\210\365\273\277k5\304CzL\334\277\345F0\306\277\226\373?\220c\253\030\374B\363\277\236{.a\221\353\327\277\353\352K\335\202x\313?!m\346\337\026\317\366?x\325>\310ob\001\300)\027\200\221\315\231\333?\253\323Z]&)\354\277\r\020\336s4e\003@\346{\215C\221\265\324\277\n\374\2744\221\032\323\277\236\177\202\226p\252\336?cH\002\254\367\022\350\277\244\330M\222\004\325\266?B\301\332\271\250\366\331\277H\032\246\265<!\302?\356\341\251A\304a\350?\202\324w\004&\207\342\277\024m\200\232\363\350\316\277\231\213\310\375\236\271\332?0w\236\277\261\'\345\277\302\206W!\300\234\335\277\360\333\006\016-Z\352?\360Qb\014\266\275\324?G+\360P\003K\350\277\310\335x\202\344g\322?\350\0019\254\340\251\357\277\302V`\253\325L\003\300\227\216l\311\016\262\343\277\302\206W!\300\234\335\277k5\304CzL\334\277k5\304CzL\334\277rM\221\276V2\363?\373\337\2604\363\251q\277\275\223\362U\246[\353\277\022\355\322\001\363\022\356?\250c\242\2224\315\337\2775\340^\211T\314\341\277\024m\200\232\363\350\316\277\253\323Z]&)\354\277\007\243\211\017`\234\002@\302\206W!\300\234\335\277\n\227\253\321\316\340\276\277\275\010\371\206w\017\344\277\036;\255\370Ys\261\277\022b\3312\304\306\346?\241\353\346+\203G\344\277K\322\25736%\361\277\251\334\374\370\344?\337?0\004B)P\323\357?k\253\037B\003\260\346\277Q\205kKP\321\303\277=\315 !\327\005\326\277\353\177<\252q \275\277\205\301\336j\247\024\265?\n\201\2703qH\260\277k5\304CzL\334\277p\214\345\244\236\027\321?\236{.a\221\353\327\277\034y,GE\336\362?\224\251\255\315K\242\336\277\205Xy\322\005\034\332\277\024\3440f4\374\332\277\007\005_\320O1\346?\353s\233\021Be\337?\356\341\251A\304a\350?\241\353\346+\203G\344\277\312\326\200\201\225\260\342?\276A\2529(\355\363?+?gs\\\030\360?\250c\242\2224\315\337\277!<]b\3119\357\277\260Q\3661\032L\001@\273\016\234\272\016\027\342\277b\022PanD\375?\244\\\364\303,S\342?G\245\237\204km\311?T\202\307\177\340\330\352\277aQ\244G\266)\333?\275Ou\242\"=\372?\n\002\273\004\3408\315?\327@L\346\250\307\336\277G\263\352\267\n\210\312\277\314X\330\264\005\346\326\277v\232\243\025\375\277\000@\331\260\004\261\232#\353\277\236\177\202\226p\252\336?\264\344/\327\263W\363?\302V`\253\325L\003\300\37504\242\232\210\351\277\224\227\016e\315\310\326?\"\352\024FK\313\367?y\257Y\207\252\037\360\277\364\360\244\010fm\222\277\035\366Z\255y\332\363?\2636x\3631\306\352\277\303\341q\206\302z\247?\336\216\313\253\016|\340\277\302vbS\261\"\311?\035\200\377\256\360v\371\277\021\000\004r\3241\003@\343\017)\256~\030\357?\227\220\026d~\021\347?\346\364\347\251A(\324?k5\304CzL\334\277\373\337\2604\363\251q\277L\224\260\032\246\357\344\277G\245\237\204km\311?q\007\352\245\276\351\263?Z\256\335\375\252\367\374\277\356\341\251A\304a\350?cH\002\254\367\022\350\277\363(\321\325\342\327\206\277+\020\210\220~\342\353?@\352k\360{\334\207?\324\274J\030\3112\347\277\244\240qw\260q\363\277\204\014\324\351\036\265\360\277\327@L\346\250\307\336\277tG\356\212\277*\365?dJ\254Fgr\353?\360\330\007\246\005K\325\277\346{\215C\221\265\324\277\221\322>\004\037\210\214?\360\330\007\246\005K\325\277G\245\237\204km\311?\257{o\r\021\263\366?\302vbS\261\"\311?L\223[M\356?\323\277\214\276\225\3208\310\355?$ \307\220\324\231\342\277\005\227P\240\3154\335?K\323\004\001\356\324\362?\232{\323/\220?\266?\336\324\362\371\001\372\364\277\206\007\206\203?]\364?\022\355\322\001\363\022\356?\214\276\225\3208\310\355?\251k\007\002C\253\003@\031M\361/\327\240\327\277U\272#e\331\006\371\277\317\310\220\177\367A\343\277\275\007\244\271\277_\322\277B\301\332\271\250\366\331\277\006B\t\034(\267\360?\262u\314\331y\253\370?i>f\3378c\357?\265\245\333\360kr\345\277\300\002VS\340\007\346\277q\007\352\245\276\351\263?\317\312:\032g\241\346?\256E\275\302\207\344\333?\024\3362\226\345\335\260\277\244]I\221\344\002\324?\270\216\356!\016A\301?\275\010\371\206w\017\344\277\3752\336<\n\350\354?\322\301\230~\250\212\323\277\250c\242\2224\315\337\277\307d\036\0344\365\322\277k5\304CzL\334\277O\216\r\347\016\350\346\277\370\307s\330\367\343\354\277)[\375DQ\270\374?oS4\362\3559\361?\222%\254\377k\r\347\277!<]b\3119\357\277\360Qb\014\266\275\324?\336\220uF~\333\343?\353_R\016T,\304?3`\261\360S\366\300?Wi0\026\023H\323?\341\207\323\252\277\304\320\277\\\026n\2239\013\361?\302V`\253\325L\003\300\253\323Z]&)\354\277\336\216\313\253\016|\340\277\236\3604\222b\237\320\277\365U\021s\226(\315\277G\265\224Rz\347\335\277)\023,\\\356\332\324\277+\203\344&\3406\341\277u\013\231\014\237T\334?\370\263*\325\t\253\341?G\275\341\265\312\343\244\277\300\002VS\340\007\346\277\036;\255\370Ys\261\277\237\0006fP\212\023@\234\371\326-!\266\343?\024m\200\232\363\350\316\277\357\030\261Y\005\340\364?\224\"\0104\374\024\336?\\o\211\027c\022\337\277\034JMdg\250\356?i\261\302u\232\267\344\277\024\364%4Cv\277\277\273\016\234\272\016\027\342\277"
      }
    }
  }
}
node {
  name: "tensors/component_19"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1167
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1167
          }
        }
        tensor_content: "_\215\311\216\367a&@\007z*\200\006\342\'@s\036:\013-N\'@\\/&\266\014\364\'@\2722\303QY\255&@[\\\364\003\272v&@\367\354u\376]L)@\261\021\na\305a(@\355\022 \271\233\027)@\3760\271\276\333\304\'@\3760\271\276\333\304\'@U\375\267\013\213\033(@fcT\307\227A(@\035G\027\202&\214(@3\304j\225\013\014)@!\362\n\376\346\003(@\272=i\263l=(@~\354\262$\324a\'@3.7/Q\233\'@\035e\321\251\025\250(@\023=*\211A\037(@\302@\321`}\202(@Q\215\263\210\252\251\'@\377\344\367\237\311j(@\353u\273\273\233T(@\333X\262\234[\343\'@\244\177!\264\3076(@_\334\001(\211\266\'@eG\353\263f6(@^m\364lM\031(@\361\026\370\226\376\200\'@s\262\271\246\013\035)@\354\264\347\345\213\\(@\211\240a\243\033\243\'@)yU\234\002\205\'@-8^H\357Q(@\002\235\336u\263\226\'@\375\274\247\236$\231(@\314\260\201K\206\253\'@\314\245:\321\005\367&@\223\000R\354\361K\'@\212\\)\335&v(@\026\231\372:\023\001&@yE\033ou\342(@n\001\344\233\356\247)@\253\376\027@\272\363\'@UQD|h\263&@\361\026\370\226\376\200\'@zx\306Y\353\n*@_\212T\026m0(@\311[q\366\326\357(@\235\337\233\010\360\346&@s\036:\013-N\'@z/\340v\357\017(@eG\353\263f6(@\311[q\366\326\357(@^m\364lM\031(@\030\200\207\242[|(@\257\343\213\274\301\020\'@\334H[a\245+\'@\200\034C\332\350D&@\234\256\221\254w)(@\236[\277\022TU)@96\266\251)\003)@*\253\357?\275\364(@\267!t\3317\315(@S\252H\246\2752\'@}\347N\001\222A)@\302@\321`}\202(@\037\\f\372\016((@\223\230#\3340y)@[)w#ux\'@\020r\347D\3072\'@\271E\314\317\257\335%@/*[:\230Y(@1\306\217\325\026b)@(\013\271\370\021\321\'@\233\222\306yE\240\'@_\334\001(\211\266\'@[)w#ux\'@+8\233y\\[\'@g\010\\\305\2229&@~\301\341y1E\'@\236\352k\022\004\330&@A,\031\247\201\324\'@\346w\017$\241\230\'@\205\033\377S\205\373(@\341\2016=?O(@\323n\337\262\320v\'@Bg\227\014\226\")@\3600\243\270\216\014)@U\177\357\361l2(@\323n\337\262\320v\'@\037\206\023\250\317:)@\362\252\300\314\355\245\'@\221\343s{B\367\'@\212\\)\335&v(@C{5p\003\217(@\255\007\'\351\346u(@\311[q\366\326\357(@H\336\363\340\337\325\'@\2729-\013T\373(@\024}0\"R\317(@B\265\334\351\303\224\'@\335\204\204V\2142\'@\324\016\312v\'\272\'@\220\272\347\306\342\343(@b\270\2609\302\333(@\203N\033\316\002\241&@\235\324\250\356\277\')@\221\343s{B\367\'@\345\221\313>\301t\'@\214p\320\023\252C(@\227\331Lb\244@\'@\203\335\'\350\363\212(@\372\352\014\223\256_\'@\010e=\020V\277(@:\244\377\234\001\207\'@K\\,0\322\323\'@s\262\271\246\013\035)@\346w\017$\241\230\'@g\363\325\214\312\322\'@\367\206\335@\312\305(@\217\255\347j\037{(@h\256\211 $%(@O\005y\351\215\214\'@\347\201\343\020\3048)@\275\2136\206(\221&@\255\372K\322\032d(@*\270\201\306\362\214\'@\206>S\341\023D(@\375KF\211X\244)@b\273H\226`\310\'@\301Mc\347\262\032\'@~\003\031\032Ss&@\253\037\373\310\003\007(@~\347UZO\364(@\237HK\230\356\215\'@\354\237\331M\345I)@\221\343s{B\367\'@\273\255\270\3519\320)@B\265\334\351\303\224\'@\352\350\216\010\330-(@\352\350\216\010\330-(@\3760\271\276\333\304\'@.\366\361\363l\")@\266\361\231\313\345\345(@\022\242\366{\304\'(@\353x\365\340j\300(@g\010\\\305\2229&@Y\326\262\201=\020(@M\374\351\035\001\347\'@\303\017l\251\032k(@X\303\000\3774\"(@2(\250\232\005.\'@\213\212\025\315\014\244\'@\373\360G\364\370\332\'@\377CkA\344\262\'@s\336<\202e\271&@\035\323Z\366D\026(@\336=\310\263G3(@\246\317\r\204\031\367\'@n\026j\324\266\016(@\253\037\373\310\003\007(@L\325\005\261\206]\'@\363fh\334-\262(@\035\220\242T\270\304(@kTq{j\016)@s\036:\013-N\'@\235t=\311m\306(@\026\335?\272t\226)@\315p\204\302\276\026\'@\026\231\372:\023\001&@\372\377\3433\236\331\'@\035\220\242T\270\304(@\331\200\307\326\034\236\'@~\301\341y1E\'@\333(\330\216\t\374\'@\3564\001\231\365*(@\3076\252G\337\313\'@\362M8\326\241\225(@\343\215\346=_G(@x\027\030^\377\334\'@\233\222\306yE\240\'@\356\233\325\375\026\303\'@\377CkA\344\262\'@\007RyP\010\210)@Q\264=\270\263\324(@eG\353\263f6(@fcT\307\227A(@m\244b\007\206n\'@\005J\272\347/Y\'@\243\312\201\325!q(@|\034w\356\351\216\'@\341\2016=?O(@\340\243ni\320\245(@\352\350\216\010\330-(@S\234\224\033z1%@5\033\240*\306\035(@s\036:\013-N\'@\236\347Zq\310\025)@h\256\211 $%(@\3076\252G\337\313\'@\204=7\200\026R)@\315\022\036\263H1(@-8^H\357Q(@\200\270v\312*\305&@\350\"\225\251j7\'@\377CkA\344\262\'@\364\3643\254L\026(@\340\243ni\320\245(@\230c\rM\034\037\'@7p\205\321\313\210\'@\204J\311\006L\352\'@\331\264hA\014\312(@*\253\357?\275\364(@3\246S\274qZ(@\221\343s{B\367\'@*\270\201\306\362\214\'@\267a\202\226\263\347(@\3600\243\270\216\014)@\231\243\323c\202<)@\301-\037\336t\224(@\036\212\342l\277;(@\3564\001\231\365*(@M\374\351\035\001\347\'@6\333\242\241\376\210\'@\2277\263q\032&&@\214\251\253=\250\365\'@\"\252s\267\316\267%@s\036:\013-N\'@&C\311\213\337\010(@\265<\352j\367c\'@F\367\306g\243\361$@\207\306\204\331N\232(@\350\353\325\206F\342\'@\222\331\002}\230](@\206\021\')wH(@Vi\302\205D\020)@gL\241D\364\316)@2h\257\340\367#\'@\025?wX\033\313(@\260>hb;[(@\240\216\361\032\307\373)@X\303\000\3774\"(@\334H[a\245+\'@\253\037\373\310\003\007(@\372\352\014\223\256_\'@O\005y\351\215\214\'@s\036:\013-N\'@\312\333\212\251@\276(@\260>hb;[(@\3760\271\276\333\304\'@\235\324\250\356\277\')@)|\217\301\321\360\'@\221\346\255\240\021c(@~\354\262$\324a\'@\001\016\362B\302\256)@\037\\f\372\016((@S\267M\346{\263)@6\333\242\241\376\210\'@\001d\331)\337\220\'@Tl7@\317\205\'@\3600\243\270\216\014)@u\035\372m\372L)@\3760\271\276\333\304\'@\007z*\200\006\342\'@\361\026\370\226\376\200\'@\364k\310\013\227\003(@w9P\212\2203(@\364\3643\254L\026(@h\256\211 $%(@\223 \345\350PA(@UQD|h\263&@\002\235\336u\263\226\'@\022\202,\262I\034(@\025?wX\033\313(@\303\215\002\n\nW)@\2670tE\277\275\'@\346w\017$\241\230\'@96\266\251)\003)@\n\264\033,\355\333&@\354\264\347\345\213\\(@\231\243\323c\202<)@\307\256\250(\3663)@W\206~\214\377\025(@\022\302);\021\261(@/6\372\252\247\315&@?,\217\220\213L(@\022\242\366{\304\'(@\226\207\037\336\204x(@\2670tE\277\275\'@\3760\271\276\333\304\'@\300\225\372-\313f)@,o\317\365\361\334(@sW8\020\016/*@\361\026\370\226\376\200\'@H\336\363\340\337\325\'@X\303\000\3774\"(@\"\255\302G\351z\'@i\240\245\025\232&(@}o\252\255\303\002)@6\333\242\241\376\210\'@)\360;\254c\242(@)yU\234\002\205\'@\212\\)\335&v(@\313\"\317\030\002N)@\372M\222Z\202i(@\362\225\2624G\223(@\303\024\301\t\336x\'@-\203\004T%\322(@\251W\013\\\321>(@b\003\355p`\364&@\3076\252G\337\313\'@\362?\204K^\224&@\254\023\363\226L\216(@\034\323\030\241\326\337(@\265\301dA\025\006(@\372/9\232\322\266(@\311\n\232\360?\302&@kI*\001\352Y(@i\020\213\023\376\323\'@\017\3171\253P\301\'@\005:D(F\374&@\001\247\334\240DW(@\035\247\010J7\326\'@v\233\207(7h\'@Zy\230\316%I(@\245O;%[\377(@\375\3705\350W\317\'@M\313$>{\341\'@\210\206\332\236Y\345\'@\312\333\212\251@\276(@\216\215\205mcy(@b\273H\226`\310\'@\000\227,\212\371~\'@*\270\201\306\362\214\'@~\301\341y1E\'@\212\330\237\221\355\215&@v\331@\362ml\'@1\306\217\325\026b)@\202m&+\031G(@+8\233y\\[\'@\221\343s{B\367\'@\037\\f\372\016((@\354\237\331M\345I)@ \021\026[\375\251)@[\252\242*\236\006\'@x\027\030^\377\334\'@~\301\341y1E\'@1\306\217\325\026b)@\200%&m#\262)@\377\223\221e[1)@g\363\325\214\312\322\'@!\232\277h\023\270(@\253\331\273\177O\333\'@\3760\271\276\333\304\'@V_\346])D&@\r\245\323\313\322\n+@\377CkA\344\262\'@:\244\377\234\001\207\'@\265<\352j\367c\'@\0215\376b\346R)@\236\260\216\326\257\344\'@\304\364\261\234\335\025%@\016B\005\370\214\232\'@\2322\300\226s$\'@#\235\3410\231\037\'@U\201\036\212\272\232&@\225\227S\033\025\234\'@\017\3171\253P\301\'@\r\360#)z\035(@*\270\201\306\362\214\'@\352\350\216\010\330-(@\302R\220\312\300\006)@\341\";%\212c\'@\274\r\233[\324R\'@\341\2016=?O(@{\317\031\331\317\265&@\212\\)\335&v(@\006\254K\365v\234\'@UQD|h\263&@fcT\307\227A(@\3760\271\276\333\304\'@x\027\030^\377\334\'@{\354J\221\211\216(@\350\"\225\251j7\'@\354wk\317\273 (@\223\230#\3340y)@\\/&\266\014\364\'@\265<\352j\367c\'@\005J\272\347/Y\'@)yU\234\002\205\'@\346\203\257\252\310Q)@\001d\331)\337\220\'@\365\010\233\374n\004*@o\351\n\333J0\'@M\374\351\035\001\347\'@<y\350Ug,(@:\244\377\234\001\207\'@h\256\211 $%(@\255\372K\322\032d(@\324\016\312v\'\272\'@\3760\271\276\333\304\'@\3076\252G\337\313\'@s\036:\013-N\'@w9P\212\2203(@\035\247\010J7\326\'@T\340\331\232\333\306(@\336=\310\263G3(@\037\3002\n\315\247\'@\277\311\004=i\266&@.\366\361\363l\")@\203\213\316\014_\014)@M\374\351\035\001\347\'@\212\265\247\2025\306)@\377CkA\344\262\'@\2035\273n\245\327(@\017\3171\253P\301\'@kY-\256\371\212\'@SS\255\347\027\240(@\240\007\311Y\303\363(@\030\200\207\242[|(@h\256\211 $%(@\233\222\306yE\240\'@w\353\241c\254\243\'@M\374\351\035\001\347\'@\364\3643\254L\026(@\2312\267\341\"\331&@\221\364X\254\266\365(@Y\334\rA\004\025&@\035\247\010J7\326\'@\333X\262\234[\343\'@Y\205\323\2528\257\'@\331\2034\\\250}\'@Z\"q2c\260&@\350\"\225\251j7\'@n\026j\324\266\016(@X\303\000\3774\"(@\3760\271\276\333\304\'@N\325\220\357\211u*@\240\261\341r\246\021+@9\326\257\306W\207(@\233\222\306yE\240\'@\225Xg\231\206\262\'@\233\222\306yE\240\'@\017\3171\253P\301\'@\344ukb\262\345(@\221\343s{B\367\'@\341\2016=?O(@A\000\1779\354B\'@\251W\013\\\321>(@\022\302);\021\261(@\265\212\\\374\230\210\'@q\340\361\333Z\340\'@\r\272Y\004\233q)@1\306\217\325\026b)@\266\024\377\244\323N)@\r\272Y\004\233q)@~\243\'RB)\'@j\306\276H\346\260*@\211\357\302\026\251\322&@\n\221j\324(\320(@\035G\027\202&\214(@\030~\204\251Sj\'@\006\022\343\233\265\302)@\341\2016=?O(@\361\026\370\226\376\200\'@\026\231\372:\023\001&@M\374\351\035\001\347\'@L\325\005\261\206]\'@\206\024\277\205\0255\'@\350\"\225\251j7\'@/\225\250\334\007\"\'@\242\350(\315@i(@\007z*\200\006\342\'@\352\350\216\010\330-(@\257\343\213\274\301\020\'@\372\352\014\223\256_\'@{\354J\221\211\216(@\226\0130\226\300\211(@\027N\252\233\001\203\'@Q\215\263\210\252\251\'@\3076\252G\337\313\'@\235\324\250\356\277\')@\204J\311\006L\352\'@\364\3643\254L\026(@\014|\013\231\037\244&@M\374\351\035\001\347\'@\250\230M\245\351!(@]\217,\231\336o(@\rBd\037_\236\'@\247\243?\366\000W\'@\204=7\200\026R)@Q\215\263\210\252\251\'@WB\322\236\351\367(@\230\216\374\302\222\302(@B\336F\r[\354&@\307\265\332\037\3744(@eG\353\263f6(@l\001\263\026\207@*@\200\270v\312*\305&@\227\331Lb\244@\'@\333(\330\216\t\374\'@\177\353\"\374.\r(@\036v`\211\275\305\'@l\026\r_G\331\'@\224\242\271X\234\315\'@\225\216\027\t\030]\'@\310\250\261\024\020l(@\2476\247\214\371B(@UQD|h\263&@nH\373U2h)@o\277/\214\346\346(@D\032\304\005\303\021(@^m\364lM\031(@\300|Ww\006\351)@\233\222\306yE\240\'@\243\332\366!5\270(@\376\003\325\214\221\355\'@\374\005c\037P\274\'@\215\274]\300\260\343\'@\253f\232_\2342(@\035\220\242T\270\304(@x\027\030^\377\334\'@<\203\2138\324I(@\027\270\002\"s\372\'@eG\353\263f6(@\217\255\347j\037{(@\3600\243\270\216\014)@\370(\303\332\034\022)@\206\024\277\205\0255\'@)\000\031\r\013\331)@z-\332dX\215(@\311[q\366\326\357(@\300\356;\t\203\211(@b\270\2609\302\333(@\017\3171\253P\301\'@{\354J\221\211\216(@\037\\f\372\016((@\004\333\254,\364\273\'@\323\367\3177\016\005)@\343\3116\3734\344&@\022\302);\021\261(@\377CkA\344\262\'@?,\217\220\213L(@}/)q\362|\'@}\202\352Ee\264(@\247\243?\366\000W\'@\223$>tC\315\'@\220\224\350\255}\272)@\037\\f\372\016((@~\371\257r\320x)@\271\037\021\317P\277&@\377\267\317\342o\362\'@\345\231GP2\357\'@\226\0130\226\300\211(@?,\217\220\213L(@\244\355\251\027\024\274(@\364\3643\254L\026(@\330G\357\314\345\351(@\215?\305-\373%)@0\207c\253&Z)@\377CkA\344\262\'@?,\217\220\213L(@3\026g\262 \312\'@\215\330\360\310\331\215)@\2670tE\277\275\'@w9P\212\2203(@\367f\360.\031\205)@|\034w\356\351\216\'@\203N\033\316\002\241&@^\317:VZ\212(@\212\330\237\221\355\215&@\2670tE\277\275\'@X\372\226E\373T(@\343\3116\3734\344&@\3760\271\276\333\304\'@\244\3353X*_(@wyW\320\202)(@s\336<\202e\271&@\334H[a\245+\'@\272BnY\344\237\'@\375\3705\350W\317\'@\352\350\216\010\330-(@\3432\251\343t\000(@\206\021\')wH(@\372\377\3433\236\331\'@5\033\240*\306\035(@Y\205\323\2528\257\'@2(\250\232\005.\'@\221\346\255\240\021c(@\337\246\006\306n\222\'@X\303\000\3774\"(@\334\317\201\200\366K\'@\2322\300\226s$\'@\2670tE\277\275\'@\272BnY\344\237\'@0\207c\253&Z)@\227\331Lb\244@\'@w9P\212\2203(@/\256Z\255T\326&@\362Pi|\322\222\'@\035G\027\202&\214(@\247\2161^ZD(@Y\205\323\2528\257\'@w9P\212\2203(@<\203\2138\324I(@\023=*\211A\037(@\037n\r\356D\201(@\311[q\366\326\357(@\220\325\031C\314n)@\316QJ\33589(@\242A\253\021\316\256\'@\345\221\313>\301t\'@\372\352\014\223\256_\'@\242\240\324\210iu)@\230c\rM\034\037\'@\365&|\237\360U(@Y\205\323\2528\257\'@[\206\215o\265\262\'@\252(\336\233\247e(@)\360;\254c\242(@\246\035\032\260\352D)@B\265\334\351\303\224\'@\010\000P\306\034\364%@\356Xf\023\022_\'@\261\021\na\305a(@#TNc.\236\'@6\333\242\241\376\210\'@\020\204\341\013?C)@\266\361\231\313\345\345(@\271\037\021\317P\277&@\340\243ni\320\245(@\n\232\354\372\244\306(@\356\233\325\375\026\303\'@8)\'\343z\007(@4T\340\007*\242\'@\030\200\207\242[|(@\215\023\331N\200\350(@\336C\276\220\250\256)@\276\351\r\321\254\244(@3\2011\330$\333(@[\252\242*\236\006\'@\234\341T|\340\371)@\307\265\332\037\3744(@fcT\307\227A(@\204J\311\006L\352\'@w9P\212\2203(@\206\024\277\205\0255\'@\377CkA\344\262\'@fcT\307\227A(@!R\254\327\014<\'@\027N\252\233\001\203\'@Es\375\263\375Y)@\361\026\370\226\376\200\'@\361V\326\210\346@(@\233\222\306yE\240\'@\362\225\2624G\223(@8\326\246\021\007<(@9\326\257\306W\207(@\035\257A\np(%@\372\377\3433\236\331\'@\310aY\317\367/(@0\212\235\320\365\305)@\256\234?m~\031*@\"\255\302G\351z\'@T\340\331\232\333\306(@)|\217\301\321\360\'@\026\247\256\305V\002(@6\333\242\241\376\210\'@\253\037\373\310\003\007(@\361\026\370\226\376\200\'@\241\3314\235\267\255(@\236\347Zq\310\025)@FG/&\345\271(@~\243\'RB)\'@\000\233\346\317\263\267(@\265<\352j\367c\'@\247\243?\366\000W\'@i\016\370Tm\247\'@\017\3171\253P\301\'@\212\330\237\221\355\215&@\350\"\225\251j7\'@\017\3171\253P\301\'@\350\"\225\251j7\'@1\244A\034\326\256(@Q\215\263\210\252\251\'@X\343\355\020\346b\'@\277\324\332\305~\360\'@z\030\314\314\261z)@\372M\222Z\202i(@^m\364lM\031(@h\256\211 $%(@\370\327\010\301\227X(@\010\353A.v\341&@b\270\2609\302\333(@\2035\273n\245\327(@I\177\245y\206\324%@-\216t\203\251c)@\027N\252\233\001\203\'@w9P\212\2203(@]\000 %\322\315&@\341\2016=?O(@M\344>#\243\024\'@\353u\273\273\233T(@\314\002\300\253\001\353&@z/\340v\357\017(@\340\243ni\320\245(@\353#\266\300\331\245*@\276\027\230\352\206_\'@U\201\036\212\272\232&@\026\247\256\305V\002(@*\270\201\306\362\214\'@\247\243?\366\000W\'@\014|\013\231\037\244&@\212\\)\335&v(@\327\023\264\330\271\240)@Y\326\262\201=\020(@-8^H\357Q(@]\000 %\322\315&@!\362\n\376\346\003(@\250\037\335\361#2(@\235\217\2264\024C)@M\374\351\035\001\347\'@>9\350\206\254\346\'@\316\227\202\216\344\352(@Vi\302\205D\020)@\204\351\024\363\332\301\'@\221\343s{B\367\'@kY-\256\371\212\'@\264\247&\354\206u(@\372M\222Z\202i(@\361\343S_\220\010(@M\374\351\035\001\347\'@~\354\262$\324a\'@\027N\252\233\001\203\'@\214\251\253=\250\365\'@_\334\001(\211\266\'@\212\\)\335&v(@\346w\017$\241\230\'@$_#\030\2759\'@\361\026\370\226\376\200\'@D\032\304\005\303\021(@M\374\351\035\001\347\'@\014HR7j\321(@\310\034E\314\346\347(@G\324\037\364\2745&@\271\037\021\317P\277&@\237:\034\272\335\341(@K\25091\316\262&@\226\306\232\337\233R\'@\317\341\263\240\262\245)@\263\320 p\354\366\'@\362Pi|\322\222\'@6}<\222\210\243(@Y\326\262\201=\020(@\017\3171\253P\301\'@A,\031\247\201\324\'@\2670tE\277\275\'@@\276G\231\312\024(@L\325\005\261\206]\'@\340\177X/\214-\'@\376\003\325\214\221\355\'@4T\340\007*\242\'@]\217,\231\336o(@fcT\307\227A(@\035\220\242T\270\304(@\373\322\025\346\360V)@\314\245:\321\005\367&@*\270\201\306\362\214\'@\311[q\366\326\357(@EK\201\355\233p\'@0\207c\253&Z)@h\256\211 $%(@\322<\002\254v}&@\346w\017$\241\230\'@+8\233y\\[\'@\265<\352j\367c\'@omW&A2(@\022\302);\021\261(@\377CkA\344\262\'@5\257\037\306\244\354)@\255\372K\322\032d(@\023=*\211A\037(@2(\250\232\005.\'@f\332\231w\303.)@\220R\002\304\210\277\'@[\257FI\217\366(@\233\222\306yE\240\'@S\362\302\004c0\'@\303\024\301\t\336x\'@\250h\332\002\253\251(@\350\"\225\251j7\'@\341\2016=?O(@{\354J\221\211\216(@\206\021\')wH(@*.\005\375\360\006)@5\033\240*\306\035(@\"\255\302G\351z\'@\021\354%\251\257r\'@\233\222\306yE\240\'@\344\347\336\334z\251\'@\253\037\373\310\003\007(@\361\026\370\226\376\200\'@Z\"q2c\260&@\372M\222Z\202i(@6}<\222\210\243(@\370\327\010\301\227X(@{\354J\221\211\216(@\006\254K\365v\234\'@\361\343S_\220\010(@}/)q\362|\'@\345\246\331\326g\207&@\346<=S\'-)@\226\3521\223\030?(@H\336\363\340\337\325\'@}\202\352Ee\264(@?,\217\220\213L(@\303\024\301\t\336x\'@kI*\001\352Y(@\206\021\')wH(@\260\025i\303\033\n(@\037\\f\372\016((@\336=\310\263G3(@\252#\034x\375\033(@R\261\317*\351\340&@\213\212\025\315\014\244\'@\307\003\252\026\025t*@)yU\234\002\205\'@\244\355\251\027\024\274(@\235\324\250\356\277\')@e-d\257\244x(@\303\024\301\t\336x\'@\352\350\216\010\330-(@\307\265\332\037\3744(@3(E\3156\341(@\350\"\225\251j7\'@_\334\001(\211\266\'@\226\306\232\337\233R\'@b\270\2609\302\333(@fcT\307\227A(@\003\357\016\317\271\030\'@T\340\331\232\333\306(@~\301\341y1E\'@\342J\t%\226\245(@\207\306\204\331N\232(@\276X\243\372\367\351\'@\312\347\247M\017\261\'@\236\347Zq\310\025)@\377CkA\344\262\'@\245\246E\000T~(@\2670tE\277\275\'@\3076\252G\337\313\'@\303\024\301\t\336x\'@\345\231GP2\357\'@U\201\036\212\272\232&@\034\2029\312\321~(@\204J\311\006L\352\'@fcT\307\227A(@\021ry\2237\247&@\002\235\336u\263\226\'@\315\177B=\272E(@\304`?Ix`(@\010\353A.v\341&@\037\3002\n\315\247\'@EK\201\355\233p\'@\001d\331)\337\220\'@\035\220\242T\270\304(@\350\"\225\251j7\'@Z\"q2c\260&@\341\2016=?O(@h\256\211 $%(@X\303\000\3774\"(@6\333\242\241\376\210\'@\004\372\255s\3636\'@\330\225`Z\254\320&@p7\230\337\303i(@d\316r\335\001?)@\303\024\301\t\336x\'@Y\205\323\2528\257\'@:\024~}\230\254(@\244\355\251\027\024\274(@\340\243ni\320\245(@\264/LD9\215*@\024}0\"R\317(@\376\003\325\214\221\355\'@\261\021\na\305a(@\223\310\375\351\202`)@\323\367\3177\016\005)@\377CkA\344\262\'@\265<\352j\367c\'@\233\222\306yE\240\'@\353x\365\340j\300(@\341\2016=?O(@;\327\205\332\244\353$@<y\350Ug,(@]\217,\231\336o(@{\354J\221\211\216(@x\027\030^\377\334\'@\030\200\207\242[|(@)|\217\301\321\360\'@*\270\201\306\362\214\'@\243~\234\\\330\036)@I\177\245y\206\324%@\3076\252G\337\313\'@:\024~}\230\254(@\340uM@\022c)@-8^H\357Q(@\216\352\204S\305\000(@\3168\230\014\354\204(@\001\247\334\240DW(@\205\341\373\342\220V\'@\200\270v\312*\305&@\346w\017$\241\230\'@\224\243\300Q\201\304\'@x\024\023\362\216\227&@\037\3002\n\315\247\'@b\003\355p`\364&@g\363\325\214\312\322\'@\352\247\0305\331$(@\224\026!\331\030\222(@SS\255\347\027\240(@\336A\207L\324\374\'@\207\306\204\331N\232(@\354\001(\004\305\330\'@\375\274\247\236$\231(@\336=\310\263G3(@\253\037\373\310\003\007(@\350\217DLc$*@\364\3643\254L\026(@\r\272Y\004\233q)@s\036:\013-N\'@S\252H\246\2752\'@*\350\010\224\256T)@\2670tE\277\275\'@\263\203\364z\300\017\'@\2269S/\031\033)@!\362\n\376\346\003(@b\270\2609\302\333(@|2bR1p\'@\215\274]\300\260\343\'@\244\3353X*_(@\362\252\300\314\355\245\'@\362?\204K^\224&@[\252\242*\236\006\'@\341\2016=?O(@\\/&\266\014\364\'@\323n\337\262\320v\'@\362Pi|\322\222\'@\245\010?YX\252(@\331s(.\033z&@2(\250\232\005.\'@\376\003\325\214\221\355\'@\215\274]\300\260\343\'@<\203\2138\324I(@\303\027Yf|e&@/\256Z\255T\326&@>\311\302\266k!(@\240\210\237`\247\351&@\302@\321`}\202(@6\333\242\241\376\210\'@\375\3705\350W\317\'@\3168\230\014\354\204(@\\/&\266\014\364\'@\364$\016\272\236\375\'@\002\235\336u\263\226\'@\203N\033\316\002\241&@\233\222\306yE\240\'@\362\252\300\314\355\245\'@+M\233m\214X)@\351\334U`\266\013\'@\035G\027\202&\214(@\235\324\250\356\277\')@\243~\234\\\330\036)@\226\306\232\337\233R\'@\261\021\na\305a(@#\235\3410\231\037\'@8\227S\350\235\337)@\371\305`bG\023(@\220\271\341 Y\270\'@B\265\334\351\303\224\'@\260R\275Q\301\351\'@\3760\271\276\333\304\'@\216\352\204S\305\000(@M\374\351\035\001\347\'@\350\"\225\251j7\'@\371\305`bG\023(@F&\036\025\340z(@\242\350(\315@i(@kY-\256\371\212\'@b\273H\226`\310\'@C\201#\210\016\302)@\374\243\017U\2660(@\251W\013\\\321>(@wyW\320\202)(@\005:D(F\374&@\371\305`bG\023(@[\252\242*\236\006\'@(\013\271\370\021\321\'@\027N\252\233\001\203\'@pr\225j\030f\'@\350\"\225\251j7\'@\324\016\312v\'\272\'@\3275Q\302\211\t&@\300\365\233\007\361\236(@\267\222ge++\'@\321\313\227\312\351\220(@Y\205\323\2528\257\'@~\301\341y1E\'@\224\312k\317\324\270)@(\013\271\370\021\321\'@s\036:\013-N\'@\3119#=\226<(@\3269\220\250\332\356(@\035\220\242T\270\304(@_\334\001(\211\266\'@\377CkA\344\262\'@\210\020\354\307\006\310\'@\303\002\023H\241\234(@\221\343s{B\367\'@ \034\274\277\031s\'@T\340\331\232\333\306(@\rBd\037_\236\'@s\031\375\t\377\027)@\204\010M\321|\r)@*\270\201\306\362\214\'@\324\276\217Z\252\200)@EK\201\355\233p\'@\315\022\036\263H1(@_\334\001(\211\266\'@\021\235\277Uw\230(@\001\247\334\240DW(@{\255\363\027\302[(@{\354J\221\211\216(@0\207c\253&Z)@\377CkA\344\262\'@\022\302);\021\261(@\207\306\204\331N\232(@\366I)}\271\256(@#\235\3410\231\037\'@\362?\204K^\224&@(3\\\262\014\320)@\245\010?YX\252(@\256\327\276\266\344\222(@w9P\212\2203(@[\252\242*\236\006\'@\214\251\253=\250\365\'@\035\247\010J7\326\'@\022\302);\021\261(@\023=*\211A\037(@\354\264\347\345\213\\(@\014V(@\341p(@\227\206=Z\272\223&@&jt\t3\375)@~\243\'RB)\'@\220R\002\304\210\277\'@\245\010?YX\252(@[\252\242*\236\006\'@\336=\310\263G3(@\225\227S\033\025\234\'@T\340\331\232\333\306(@KE\237\330\363\312&@\362\252\300\314\355\245\'@\244\355\251\027\024\274(@,\222\373\032\212>(@\216\377%\313\232\272\'@\206\021\')wH(@\027\356\270\323\3608(@\377CkA\344\262\'@\024}0\"R\317(@h\256\211 $%(@FG/&\345\271(@\004\372\255s\3636\'@O\005y\351\215\214\'@\034\231\254O\261\260\'@<y\350Ug,(@g\324L8\346\367\'@Y\205\323\2528\257\'@B\265\334\351\303\224\'@\260\025i\303\033\n(@\024z\372\377\336\003(@\217\242\240\360\236\306\'@\372M\222Z\202i(@\364$\016\272\236\375\'@pr\225j\030f\'@\200\270v\312*\305&@\227\206=Z\272\223&@\340\243ni\320\245(@\207;m<\200\331(@[\331\271\0010\306(@Y\205\323\2528\257\'@Y\326\262\201=\020(@\212\222\321\353\273\225\'@\223\000R\354\361K\'@b\270\2609\302\333(@\005\227t\036r\247\'@\345\221\313>\301t\'@*\270\201\306\362\214\'@H\336\363\340\337\325\'@\"\255\302G\351z\'@5\033\240*\306\035(@5j\212\017\200\265(@\203\rM\360{\256\'@[\252\242*\236\006\'@5j\212\017\200\265(@3F\251\210\2000)@\262\253\372\241H\353)@%\265\026Y[\253)@s\036:\013-N\'@Y\205\323\2528\257\'@\3564\001\231\365*(@\345\221\313>\301t\'@\300\365\233\007\361\236(@\177\353\"\374.\r(@\373\322\025\346\360V)@9\326\257\306W\207(@\023=*\211A\037(@\233\222\306yE\240\'@\017\026\205\232\374\310(@%\213\260ZIp(@U\300\352\317\'})@Y\205\323\2528\257\'@\303\002\023H\241\234(@\'*\312\316=H)@w9P\212\2203(@?,\217\220\213L(@\3076\252G\337\313\'@\3564\001\231\365*(@\310\250\261\024\020l(@\264\257\275\2673=\'@\233\276`\347\3321(@\330\225`Z\254\320&@\331\264hA\014\312(@\n\375\034\336\335\355(@)yU\234\002\205\'@s\336<\202e\271&@\303\024\301\t\336x\'@*.\005\375\360\006)@)|\217\301\321\360\'@\221\343s{B\367\'@\030\200\207\242[|(@\255\224\256>\346\243\'@\244\355\251\027\024\274(@\330\225`Z\254\320&@\271\037\021\317P\277&@\037\\f\372\016((@\203\".?\376.(@\333\210X\352l\300\'@\204=7\200\026R)@\017\3171\253P\301\'@\202m&+\031G(@\324\016\312v\'\272\'@y\373\241\331\332\257(@x\027\030^\377\334\'@\3564\001\231\365*(@\255\345\364\'q\375(@\032\220:\301m\361)@\2670tE\277\275\'@\006\254K\365v\234\'@\226\0130\226\300\211(@\241@\316\245\227\371(@\233\222\306yE\240\'@\022\333\220\001\315\177(@\232\300D\2666\002)@g\363\325\214\312\322\'@\2312\267\341\"\331&@"
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 10
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 10000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "OneShotIterator"
  op: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dataset_factory"
    value {
      func {
        name: "_make_dataset_RSUbk8WWExk"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_UINT8
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/Shape"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/FullBath/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/Shape"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/GrLivArea/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:2"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/Shape"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/OverallQual/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:3"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:4"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:5"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:6"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:7"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:8"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:9"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:10"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:11"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:12"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:13"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:14"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:15"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_New/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:16"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:17"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Shape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:18"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Shape"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/FullBath/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/GrLivArea/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/OverallQual/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Abnorml/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_AdjLand/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Alloca/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Family/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Normal/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleCondition_Partial/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_COD/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_CWD/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Con/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLD/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLI/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_ConLw/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_New/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_Oth/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/SaleType_WD/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/TotalBsmtSF/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 19
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\023\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4714045226573944
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4714045226573944
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 19
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/kernel/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/bias/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Size"
  op: "Size"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Switch"
  op: "Switch"
  input: "dnn/zero_fraction/LessEqual"
  input: "dnn/zero_fraction/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/switch_t"
  op: "Identity"
  input: "dnn/zero_fraction/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/switch_f"
  op: "Identity"
  input: "dnn/zero_fraction/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/pred_id"
  op: "Identity"
  input: "dnn/zero_fraction/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/zeros"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction/cond/count_nonzero/NotEqual/Switch:1"
  input: "dnn/zero_fraction/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/zero_fraction/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/Const"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction/cond/count_nonzero/Cast"
  input: "dnn/zero_fraction/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual/Switch"
  input: "dnn/zero_fraction/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/zero_fraction/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction/cond/count_nonzero_1/Cast"
  input: "dnn/zero_fraction/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Merge"
  op: "Merge"
  input: "dnn/zero_fraction/cond/count_nonzero_1/nonzero_count"
  input: "dnn/zero_fraction/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction/counts_to_fraction/Cast"
  input: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/fraction"
  op: "Identity"
  input: "dnn/zero_fraction/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\010\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.7071067690849304
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7071067690849304
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/kernel/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/bias/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_1/kernel/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_1/bias/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Size"
  op: "Size"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Switch"
  op: "Switch"
  input: "dnn/zero_fraction_1/LessEqual"
  input: "dnn/zero_fraction_1/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/switch_t"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/switch_f"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/pred_id"
  op: "Identity"
  input: "dnn/zero_fraction_1/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual/Switch:1"
  input: "dnn/zero_fraction_1/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/zero_fraction_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/Const"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_1/cond/count_nonzero/Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual/Switch"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/zero_fraction_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Merge"
  op: "Merge"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/nonzero_count"
  input: "dnn/zero_fraction_1/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_1/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_1/activation/tag"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.095445156097412
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.095445156097412
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/kernel/part_0"
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/bias/part_0"
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/bias/part_0"
  input: "dnn/logits/bias/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "Identity"
  input: "dnn/logits/kernel/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/bias/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "Identity"
  input: "dnn/logits/bias/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Size"
  op: "Size"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Switch"
  op: "Switch"
  input: "dnn/zero_fraction_2/LessEqual"
  input: "dnn/zero_fraction_2/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/switch_t"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/switch_f"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/pred_id"
  op: "Identity"
  input: "dnn/zero_fraction_2/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual/Switch:1"
  input: "dnn/zero_fraction_2/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/Const"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_2/cond/count_nonzero/Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual/Switch"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Merge"
  op: "Merge"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/nonzero_count"
  input: "dnn/zero_fraction_2/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_2/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_2/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/labels/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:19"
  input: "dnn/head/labels/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/Shape"
  op: "Shape"
  input: "dnn/head/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/Shape_1"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "dnn/head/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/strided_slice/stack"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice"
  op: "StridedSlice"
  input: "dnn/head/labels/Shape_1"
  input: "dnn/head/labels/strided_slice/stack"
  input: "dnn/head/labels/strided_slice/stack_1"
  input: "dnn/head/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/head/labels/concat/values_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat/axis"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat"
  op: "ConcatV2"
  input: "dnn/head/labels/strided_slice"
  input: "dnn/head/labels/concat/values_1"
  input: "dnn/head/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Equal"
  op: "Equal"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/All"
  op: "All"
  input: "dnn/head/labels/assert_equal/Equal"
  input: "dnn/head/labels/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert"
  op: "Assert"
  input: "dnn/head/labels/assert_equal/All"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/labels"
  op: "Identity"
  input: "dnn/head/labels/ExpandDims"
  input: "^dnn/head/labels/assert_equal/Assert/Assert"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/ToFloat"
  op: "Cast"
  input: "dnn/head/labels"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/SquaredDifference"
  op: "SquaredDifference"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/values/shape"
  op: "Shape"
  input: "dnn/head/mean_squared_error/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "dnn/head/mean_squared_error/ToFloat/x"
  op: "Const"
  input: "^dnn/head/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/Mul"
  op: "Mul"
  input: "dnn/head/mean_squared_error/SquaredDifference"
  input: "dnn/head/mean_squared_error/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "dnn/head/mean_squared_error/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "dnn/head/weighted_loss/ToFloat/x"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Mul"
  op: "Mul"
  input: "dnn/head/mean_squared_error/Mul"
  input: "dnn/head/weighted_loss/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Const"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Sum"
  op: "Sum"
  input: "dnn/head/weighted_loss/Mul"
  input: "dnn/head/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/gradients/Fill"
  op: "Fill"
  input: "dnn/head/gradients/Shape"
  input: "dnn/head/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/Fill"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "dnn/head/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "dnn/head/mean_squared_error/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  input: "dnn/head/weighted_loss/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/head/mean_squared_error/Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape"
  op: "Shape"
  input: "dnn/head/mean_squared_error/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/head/mean_squared_error/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/head/mean_squared_error/SquaredDifference"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/control_dependency"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/scalar"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/sub"
  op: "Sub"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/ToFloat"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Mul"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/mul_1"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/mul_1"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Neg"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape"
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Neg"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/control_dependency"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/control_dependency"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 19
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/L2Loss"
  op: "L2Loss"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/L2Loss_1"
  op: "L2Loss"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/L2Loss_2"
  op: "L2Loss"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/L2Loss_3"
  op: "L2Loss"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/L2Loss_4"
  op: "L2Loss"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/L2Loss_5"
  op: "L2Loss"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/stack"
  op: "Pack"
  input: "dnn/head/global_norm/L2Loss"
  input: "dnn/head/global_norm/L2Loss_1"
  input: "dnn/head/global_norm/L2Loss_2"
  input: "dnn/head/global_norm/L2Loss_3"
  input: "dnn/head/global_norm/L2Loss_4"
  input: "dnn/head/global_norm/L2Loss_5"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/head/global_norm/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/Sum"
  op: "Sum"
  input: "dnn/head/global_norm/stack"
  input: "dnn/head/global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/global_norm/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/mul"
  op: "Mul"
  input: "dnn/head/global_norm/Sum"
  input: "dnn/head/global_norm/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/global_norm/global_norm"
  op: "Sqrt"
  input: "dnn/head/global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/VerifyFinite/CheckNumerics"
  op: "CheckNumerics"
  input: "dnn/head/global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/global_norm/global_norm"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "message"
    value {
      s: "Found Inf or NaN global norm."
    }
  }
}
node {
  name: "dnn/head/VerifyFinite/control_dependency"
  op: "Identity"
  input: "dnn/head/global_norm/global_norm"
  input: "^dnn/head/VerifyFinite/CheckNumerics"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/global_norm/global_norm"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/truediv/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/truediv"
  op: "RealDiv"
  input: "dnn/head/clip_by_global_norm/truediv/x"
  input: "dnn/head/VerifyFinite/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/truediv_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/truediv_1"
  op: "RealDiv"
  input: "dnn/head/clip_by_global_norm/Const"
  input: "dnn/head/clip_by_global_norm/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "dnn/head/clip_by_global_norm/truediv"
  input: "dnn/head/clip_by_global_norm/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul"
  op: "Mul"
  input: "dnn/head/clip_by_global_norm/mul/x"
  input: "dnn/head/clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul_1"
  op: "Mul"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  input: "dnn/head/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_0"
  op: "Identity"
  input: "dnn/head/clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul_2"
  op: "Mul"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  input: "dnn/head/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_1"
  op: "Identity"
  input: "dnn/head/clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul_3"
  op: "Mul"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  input: "dnn/head/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_2"
  op: "Identity"
  input: "dnn/head/clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul_4"
  op: "Mul"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  input: "dnn/head/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_3"
  op: "Identity"
  input: "dnn/head/clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul_5"
  op: "Mul"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  input: "dnn/head/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_4"
  op: "Identity"
  input: "dnn/head/clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/mul_6"
  op: "Mul"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  input: "dnn/head/clip_by_global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_5"
  op: "Identity"
  input: "dnn/head/clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/GradientDescent/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.029999999329447746
      }
    }
  }
}
node {
  name: "dnn/head/GradientDescent/update_dnn/hiddenlayer_0/kernel/part_0/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/head/GradientDescent/learning_rate"
  input: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/GradientDescent/update_dnn/hiddenlayer_0/bias/part_0/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/head/GradientDescent/learning_rate"
  input: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/GradientDescent/update_dnn/hiddenlayer_1/kernel/part_0/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "dnn/head/GradientDescent/learning_rate"
  input: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/GradientDescent/update_dnn/hiddenlayer_1/bias/part_0/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "dnn/head/GradientDescent/learning_rate"
  input: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/GradientDescent/update_dnn/logits/kernel/part_0/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/head/GradientDescent/learning_rate"
  input: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/GradientDescent/update_dnn/logits/bias/part_0/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dnn/logits/bias/part_0"
  input: "dnn/head/GradientDescent/learning_rate"
  input: "dnn/head/clip_by_global_norm/dnn/head/clip_by_global_norm/_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/GradientDescent/update"
  op: "NoOp"
  input: "^dnn/head/GradientDescent/update_dnn/hiddenlayer_0/bias/part_0/ResourceApplyGradientDescent"
  input: "^dnn/head/GradientDescent/update_dnn/hiddenlayer_0/kernel/part_0/ResourceApplyGradientDescent"
  input: "^dnn/head/GradientDescent/update_dnn/hiddenlayer_1/bias/part_0/ResourceApplyGradientDescent"
  input: "^dnn/head/GradientDescent/update_dnn/hiddenlayer_1/kernel/part_0/ResourceApplyGradientDescent"
  input: "^dnn/head/GradientDescent/update_dnn/logits/bias/part_0/ResourceApplyGradientDescent"
  input: "^dnn/head/GradientDescent/update_dnn/logits/kernel/part_0/ResourceApplyGradientDescent"
}
node {
  name: "dnn/head/GradientDescent/value"
  op: "Const"
  input: "^dnn/head/GradientDescent/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/GradientDescent"
  op: "AssignAdd"
  input: "global_step"
  input: "dnn/head/GradientDescent/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/ones_like/Shape"
  op: "Shape"
  input: "dnn/head/mean_squared_error/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/ones_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/ones_like"
  op: "Fill"
  input: "dnn/head/ones_like/Shape"
  input: "dnn/head/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/mul"
  op: "Mul"
  input: "dnn/head/mul/x"
  input: "dnn/head/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/Sum"
  op: "Sum"
  input: "dnn/head/mul"
  input: "dnn/head/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/truediv"
  op: "RealDiv"
  input: "dnn/head/weighted_loss/Sum"
  input: "dnn/head/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "dnn/head/weighted_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "average_loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "average_loss"
      }
    }
  }
}
node {
  name: "average_loss"
  op: "ScalarSummary"
  input: "average_loss/tags"
  input: "dnn/head/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/hiddenlayer_0/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_0/kernel/part_0/Assign"
  input: "^dnn/hiddenlayer_1/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_1/kernel/part_0/Assign"
  input: "^dnn/logits/bias/part_0/Assign"
  input: "^dnn/logits/kernel/part_0/Assign"
  input: "^global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 7
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/hiddenlayer_1/kernel/part_0"
        string_val: "dnn/hiddenlayer_1/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 7
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/hiddenlayer_1/kernel/part_0"
        string_val: "dnn/hiddenlayer_1/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_0/activation"
  input: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_1/activation"
  input: "dnn/dnn/logits/fraction_of_zero_values"
  input: "dnn/dnn/logits/activation"
  input: "loss"
  input: "average_loss"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/Identity"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/Read_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/Identity_2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/Read_2/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/Identity_4"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/Read_3/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/Identity_6"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_4/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/Read_4/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/Identity_8"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_5/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/Read_5/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/Identity_10"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_aa4725e2adb54a6b88ca18f9aec2cf17/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "global_step"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/ShardedFilename_1/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename_1"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename_1/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Read_6/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/Read_6/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/Identity_12"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_7/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/Read_7/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/Identity_14"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_8/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/Read_8/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/Identity_16"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_9/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/Read_9/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/Identity_18"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_10/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/Read_10/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/Identity_20"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_11/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/Read_11/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_23"
  op: "Identity"
  input: "save/Identity_22"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/SaveV2_1/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 6
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
      }
    }
  }
}
node {
  name: "save/SaveV2_1/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 6
          }
        }
        string_val: "8 0,8"
        string_val: "19 8 0,19:0,8"
        string_val: "4 0,4"
        string_val: "8 4 0,8:0,4"
        string_val: "1 0,1"
        string_val: "4 1 0,4:0,1"
      }
    }
  }
}
node {
  name: "save/SaveV2_1"
  op: "SaveV2"
  input: "save/ShardedFilename_1"
  input: "save/SaveV2_1/tensor_names"
  input: "save/SaveV2_1/shape_and_slices"
  input: "save/Identity_13"
  input: "save/Identity_15"
  input: "save/Identity_17"
  input: "save/Identity_19"
  input: "save/Identity_21"
  input: "save/Identity_23"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency_1"
  op: "Identity"
  input: "save/ShardedFilename_1"
  input: "^save/SaveV2_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "save/ShardedFilename_1"
  input: "^save/control_dependency"
  input: "^save/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity_24"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  input: "^save/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 6
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 6
          }
        }
        string_val: "8 0,8"
        string_val: "19 8 0,19:0,8"
        string_val: "4 0,4"
        string_val: "8 4 0,8:0,4"
        string_val: "1 0,1"
        string_val: "4 1 0,4:0,1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 19
          }
          dim {
            size: 8
          }
        }
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Identity_25"
  op: "Identity"
  input: "save/RestoreV2_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "save/Identity_25"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_26"
  op: "Identity"
  input: "save/RestoreV2_1:1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 19
          }
          dim {
            size: 8
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "save/Identity_26"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_27"
  op: "Identity"
  input: "save/RestoreV2_1:2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "save/Identity_27"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_28"
  op: "Identity"
  input: "save/RestoreV2_1:3"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "save/Identity_28"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_29"
  op: "Identity"
  input: "save/RestoreV2_1:4"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "dnn/logits/bias/part_0"
  input: "save/Identity_29"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_30"
  op: "Identity"
  input: "save/RestoreV2_1:5"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel/part_0"
  input: "save/Identity_30"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/restore_shard_1"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_5"
  device: "/device:CPU:0"
}
node {
  name: "save/restore_all/NoOp"
  op: "NoOp"
  input: "^save/restore_shard"
}
node {
  name: "save/restore_all/NoOp_1"
  op: "NoOp"
  input: "^save/restore_shard_1"
  device: "/device:CPU:0"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_all/NoOp"
  input: "^save/restore_all/NoOp_1"
}
library {
  function {
    signature {
      name: "_make_dataset_RSUbk8WWExk"
      output_arg {
        name: "modeldataset"
        type: DT_VARIANT
      }
      description: "Factory function for a dataset."
      is_stateful: true
    }
    node_def {
      name: "optimizations"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 3
              }
            }
            string_val: "map_and_batch_fusion"
            string_val: "noop_elimination"
            string_val: "shuffle_and_repeat_fusion"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_0"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 1167
              }
            }
            tensor_content: "\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\2770*\200j\263\326\004@\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\317m\375\0323\270\006\300\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\317m\375\0323\270\006\300\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\2770*\200j\263\326\004@\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\2770*\200j\263\326\004@\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?0*\200j\263\326\004@\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\2770*\200j\263\326\004@\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\317m\375\0323\270\006\300\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\317m\375\0323\270\006\300\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?0*\200j\263\326\004@\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?0*\200j\263\326\004@\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\2770*\200j\263\326\004@\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?0*\200j\263\326\004@\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\317m\375\0323\270\006\300\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\2770*\200j\263\326\004@\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\317m\375\0323\270\006\300\237\313Q2wf\360\2770*\200j\263\326\004@\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?0*\200j\263\326\004@\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\2770*\200j\263\326\004@0*\200j\263\326\004@\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\317m\375\0323\270\006\300\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\2770*\200j\263\326\004@\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\2770*\200j\263\326\004@\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?0*\200j\263\326\004@\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?0*\200j\263\326\004@\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\2770*\200j\263\326\004@\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\2770*\200j\263\326\004@\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?0*\200j\263\326\004@\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?0*\200j\263\326\004@\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\317m\375\0323\270\006\300\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\2770*\200j\263\326\004@\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\2770*\200j\263\326\004@\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?0*\200j\263\326\004@0*\200j\263\326\004@\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?0*\200j\263\326\004@\237\313Q2wf\360\277\302\210\256\242\357F\351?0*\200j\263\326\004@\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?0*\200j\263\326\004@\237\313Q2wf\360\277\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\302\210\256\242\357F\351?\302\210\256\242\357F\351?\237\313Q2wf\360\277\237\313Q2wf\360\277"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_1"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 1167
              }
            }
            tensor_content: "o\376<t\0307\370\277\245\335\300D\214)\265?\246/FH+\256\355\277l\240\260\025!\023\322?wq\301\251\020i\364\277\246\202X\276e\364\372\277\360N4\332\020\261\352?\261\266l~\027\327\007@{\006-\351j\252\353?\257\355\204o=\353\327?\245\207\024!\340\305\262\277\234+\007\036E\353\312\277*\3207\321y\361\345?=\2060\"\247\362\242?\207\317\345\3709\305\356?\345\006\002\350,\304\317?:\245}~\227\344\330?6W\241(\3416\361\277\376\245\013\275\'\363\354\277\032\320\033\022\206\314\261\277~\204\233\263q[\314?I\375g\026@!\302?\374_\013\272Sm\344\277*B\\\037\255\346\007@\223\202\266\274{\226\304\277\007\006D\3108E\343\277\031i\250H\236_\325\277|\304\3350\003\325\363\277\260\177\316J\373\211\305?7\'\017\264\2203\350\277\n&\254v>\013\340\277(7%Xk%\360?\246D4\016t\226\321?\276\313\261\207K\'\361\277&\036\206G\266\214\353\277:g\333[\201~\226\277h\352\323\203\3476\311\277\256$\340\201\336\033\351?]\021kk\327\245\347?>\335q\210\300H\363\277\337\215\311=\252\253\344\277?\246\026v\037\030\362?\364g\026\014Af\000\3007 F\026@\006\360?(7%Xk%\360?q\223$\345\260\213\317\277zt\343\r\255\013\356\277\211zJ\026\353\017\361\277\030Q\034\355z\301\367?|\n\\\331I\272\256\277\205F\001\373\220w\220?l\213\302O\330*\356\277\013\243\007\214\263\301\331\277\301\362\342\323\241\032\326\277T0\254B\333%\331\277m\346\260\030\365\230\332?O\361\356\232a\224\326?*\231\334\276\330\300\324? \225\235\224\362\375\341\277\265X-RS\365\364\277\224y\317Q\213M\376\277\356\320\305\017\n\000\332\277Q\010\354\017\265$\375?\r\337\244C\305\374\244\277\027.\234\353\220~\363?\217\271\213\214&\216\363?\322\352\250\202\251P\355\277\024\0164=\213\270\366?\006\022\307T\317\367\360?OWO\257\267\006\274\277eD)U|q\374?\335\377\252jb\204\345?\331\215\277,\362\205\362\277\033xM9\321\264\354\277y\210\276\036d\371\332\277y\017\3212\340\326\000@\350Y\232\240]C\357\277$+\230\272\034M\360\277!\270\035\226\334@\346\277J\246*\230\217c\366\277\375\302Q\007\221\026\360\277\214}lz\207\262\352\277A\375\3316\306\016\360\277M\306\222F\225)\363\277\n\021\276\260\365\"\314\277s\342\215\255\002\373\273?\336\"+lL\307\351?+\"\275\324\030v\276\277|\304\3350\003\325\363\277O\255\373\322cj\276?4S\360\335t\206\340?\214\037f^\206\307\306\277\315\327RG\nK\365\2773\305\024,\250{\002@}\362Q\330\263\274\336?\201R\202FA5\265\277N\330\321\3449\234\257?\303 \331\325\337\242\256?\340\000\302\007]\027\241\277\007X\307W\243}\371?vNA\250&&\360\277|\n\\\331I\272\256\277b\356\364z\245\210\365?\330}\213U\357\"\364\277k\302\035by[\337\277,\261h\032\374^\362\277/\330\231fRR\327\277\323|\362]g\357\352?\240\371o\013\242e\361\277\246D4\016t\226\321?\202\261\233\027\324\032\340\277\376\245\013\275\'\363\354\277\304t\200\216\207\333\251\277p\337m\275\232\244\324\277\353\305K\'M\"\341?\241\034\360\014\214\250\365\277Q\246\270w\tv\310?|\304\3350\003\325\363\277B Z8\260Q\364\277\326\372`(n\240\313?\332\260?.\334\310\366\277B Z8\260Q\364\277\016D\366W\244\265\356?\366\216\0047\034=\344?h\352\323\203\3476\311\277\315\327RG\nK\365\277/z\222\0207A\002@?\355\245_\303\253\361\277\000\001\372\205Da\331?j\230\324\302>\353\362\2773\216v\370\213.\300?\324\237r_Q2\357?\216zT\'\2435\343\277\314\220\303]f\267\365?yQc\014\303\310\351\277\253\203\361\265\355\'\324\277_\316\214\314\237\302\370?\n\234>\356b\224\361\277\346U\351U\361\222\376?\256$\340\201\336\033\351?\277|\r;\002u\003@fU\354\022O\342\361\277\213\270\362\224\236Z\332?\361\206\242\241C\334\302?s\356\022\256\315\371\353\277\001\247a\2234\n\005@\t<\224\302\313T\315?\315Q\020\307\244K\305?>BAB\022a\357?|\304\3350\003\325\363\277BoA\246t \303\277\215\261\2579Df\324\2778y\222C\373k\376?|\n\\\331I\272\256\277h\231eP\221\234\205\277\217\014\236\002a\324\340?\242\033a&\274\232\376?\030F(G\264\034\321\277\013\322\n\0324\267\373\277\272\217\222u\254K\330\277\206\364\203\307\303#\341\277N\226\000\322D&\352\277\3038\343\326u\240\336\277\310\326\271O\202\027\354?\003\303[\030I<\342\277t\200\\\211\213\230\351?\016!vV\272r\352?\320\205\226\247\334\033\000@,\261h\032\374^\362\277\266\252\260\341\275-\353?9\334\330\2208\025\352?>\335q\210\300H\363\277\2233\317N\267\307\365\277T\312K.\205\263\263?%*\t\324L?\371?\203\241\353\016\223\244\301?\333\343q\254;\316\253\2776;\352\304G!\325\277\021\343\327\350\276M\323\277\274\2367f\337\240\357\277BoA\246t \303\277v\260t@\322\324\304\277\335]\261\206co\311?\310\t\352Y\255\320\316\277\262$\3446\371\\\224?\314\277\306\353\346\254\327?t\367}\347\177/\362?\223#\241\323QI\236\277\360\364X\306\205=\325?\355\255E\016 \275\325\277\206+\337\331dT\322\277\233\246S\204\257\371\361\277US,D\305h\335\277\216zT\'\2435\343\277Sk2]\362\315\350?f\272\273\314\240\372\355?\346\360\031\234\237z\342\277\311x\2633\201,\330\277$Y\014b\3154\333?=g\337\020\234\277\341\277\'\027?\004\363\377\240?I\322\221\004j\357\300\277S\r,A\361\342\324\277j&\260t\013\366\000@y\210\276\036d\371\332\277\246^I\326\253\243\377?yQc\014\303\310\351\277j\230\324\302>\353\362\277\267\342\036\251\360X\303?\351\310cz1\237\350?\031aP\304}$\366?\247\t\256\363\\\356\341\277\305\333\357o\006\260\341\277\227F%\212V\315\355\277hY\235]\273\222\322\277\014`\'yG\222\270?D\265A\251H\246\313\277\n&\254v>\013\340\277\310U32\227\351\323\277\255\256M\n\272\222\367?\345\006\002\350,\304\317?\246{\217 \025\307\342?d\032\340\265A\001\320?\232\345\006\033qe\302\277\234\370\326\023\0322\350?|NK\271\336K\342\277|\304\3350\003\325\363\277\370o5\200\236\252\360\277b\277\361\354$\223\343\277\317\n\007 \367\360\367\277Q7\357\2355\032\337?}\264\257\265\235V\234\277|\304\3350\003\325\363\277\002_\206\344;\205\377\277\215\017\266UEQ\350?\225\310\266\277O\034\315\277\310\036\330\037\366\270\342\277\340\000\302\007]\027\241\277\356\222\241_\030\242\360?\355\2709\264\346a\374?o\376<t\0307\370\277o\214\030&\345A\006@\333\313g\253\245\320\333?\313M`\266R\301\005@\267\267H\227\032\'\302\277\177\310\216{o\205\324\277\223\202\266\274{\226\304\277A\375\3316\306\016\360\277\220\300T*w\273\353\277\252\262\364Cn\035\366\277\252keZ\312\211\366?x\013c\t\357B\341\277$\370\351=\315\213\224\277\376\324\016K\250\350\376?\343\320\261\355\231\264\345\277dt\273\311\314t\345?\0242C%E\t\362\277\276\371%/\374\016\334?\"5y\253Q\367\337\277w-\317\033-e\r@\203\'.\217\370\243\361\277\021\254|\326\035\035\342\277j\230\324\302>\353\362\277 \253\205\340\177G\317?\342.\270\t\233\237\331?\311AX!\340\373\346\277\355\255E\016 \275\325\2770?\r0:\277\263\277\311\274\246\373~V\260\277v\260t@\322\324\304\277I0\230 k\332\344\277\2560e\202\251\032\271\277\216zT\'\2435\343\277\013l\254y\022\221\350\277E\355\257p{\321\343\277\212\357M\247?\213\353?\024\373\347\022\244\330\360?\335\377\252jb\204\345?\274\366\005?\224\270\264\277\376\245\013\275\'\363\354\277\326\372`(n\240\313?\246\202X\276e\364\372\277\305\266Q\241|Q\357?\241\252\313\276X\263\003@Ww\277\372@\246\330?\322\352\250\202\251P\355\27713\210/o\300\343?\026\022\345\207\367h\347\277?s\347\245\016\205\000@\\s\234\217N\010\272?]\267\217WL2\322?B Z8\260Q\364\277\235\275P\371\002\212\330\277\233\202D\234\365\250\366?\354\212\305\0146z\321\277\007\035\376\033\021\271\010@\341\0138\010\261\\\325?j\230\324\302>\353\362\277j9=L9\246\265?>\212_\022\206\002\346\277\214\037f^\206\307\306\277\301si\361\214H\356?o\353\360I1W\362\277\304\365\002\304\tq\275?/\330\231fRR\327\277\007\276%\370\304\243\354?Uh\032\n\016Q\341?\301\352\212O\201\337\366?\337\274\314\313*\241\366?.\344\034\363\350\004\365\277\266P\325\3152\272\325?*v\\\275\356}\320?\252\262\364Cn\035\366\277,\261h\032\374^\362\277Wl\313Tz\001\362\277\246\236\017\"\377\t\347?x\303D9{\241\352?\373<\213\270i*\340\277\304t\200\216\207\333\251\277\376\245\013\275\'\363\354\277\260T\3708%X\304\277Z9!\215E\201\341\277S\r,A\361\342\324\277|\304\3350\003\325\363\2774\324v\373_\264\310?\335]\261\206co\311?\276\313\261\207K\'\361\277\337\347\244Q5\037\332\277\370K&\230\344Y\365?~\245\016z\205B\320\277=g\337\020\234\277\341\277\312d\330\"\312>\353\277\225\225\206\265$c\352?S\r,A\361\342\324\277 \200\257\316\251\025\316\2774\007\247\005\213m\353\277\247\301\217#\351L\353?\361}9\334\305\362\276\277\227#\245\210l\212\351\277\2654\036j\231\244\371?\033\215;\377\031\235\320?C_\221\2353\252\344?\021\254|\326\035\035\342\277\204U\2426\251\213\334?\332\016H\276\021\000\275\277\355.\314+\013\353\355?\217\014\236\002a\324\340?\370o5\200\236\252\360\277\317\270\203\220\214\270\321\277\277\021\262\212\037\255\371\277A\246\233~\373*\003@\262\253\272\277\261(\001@\271(\037\254\304\336\313?\304\365\002\304\tq\275?gE\276\227\351c\232\277S)\343\244\212\370\360\277\333\235\363\003\365\350\360\277\200\264\263j\270\227\347\277@\nC\212$\207\026@\010\366\223\277\367\316\304?A\375\3316\306\016\360\277\2127lw\263,\342\277\335]\261\206co\311?\350R\321\002\r\026\367?\370o5\200\236\252\360\277|\304\3350\003\325\363\277\330F0CN\362\362?k\302\035by[\337\277j\230\324\302>\353\362\277\036\353\307]\021\301\366\277,\201\326\245\253[\351\277l\240\260\025!\023\322?=\236:#=\360\322\277\243\216W|:\272\310\277\205\023S~A\266\364?7\'\017\264\2203\350\277|\304\3350\003\325\363\277\024aF\263\305\376\343?\375\302Q\007\221\026\360\277\001\223Ca\002\000\307?\"\333\235\227\306\203\352\277\204J\256\220\342\346\365\277;\273\202\024)\267\201\277\221\343\324+a\376\357\277\337\201D=\337\254\264?\252\341\367\321\356\022\350?\346f\254\023\304\003\364\277k\343\220(\215B\263\277+\240\245\\)\356\374?m\346\260\030\365\230\332?[\\\241\216/\304\345\277\321\343\337\344X#\365?S)\343\244\212\370\360\277\210\251M\244k\005\343?tI\001w\352g\330?s\264\032@l9\002@o\253*\376\335\360\352\277\227\222nb@\346\342?\216zT\'\2435\343\277~\245\016z\205B\320\277}\362Q\330\263\274\336?\373\364l\350\365\210\351?6\004\217\262\246\360\343\277yQc\014\303\310\351\277\223\340\274\330|\201\350\277|\304\3350\003\325\363\277\335\256\037\272\271\t\215?\232\345\006\033qe\302\277\207\370\361\360\264\267\000@\321!\004\225J\201\336\277\024\025\375\332\333\345\356\277\317\347\206\036\r\256\363\277\320\323\253\rV\300\366?\240\004d\261h\n\330?\014\306\207\215\235\004\336\277W\256\032\r\342\326\351?\273X7c\013\033\347\277\350\245\343xG\\\344?\360\364X\306\205=\325?\376\245\013\275\'\363\354\277!p\377\305h\237\357?h\025\252\225\275h\312?\235\275P\371\002\212\330\277\352\264\210iz\261\333?\342\2551\354\257q\341\277tI\001w\352g\330?U\034\3211$8\354\277v\260t@\322\324\304\277\021\254|\326\035\035\342\277yJ\232nr\233\361?|\304\3350\003\325\363\277\335\220\341\220\216(\354\277\3352\333t\215=\310\277s\356\022\256\315\371\353\277\000\243\363iCv\345\277\246\202X\276e\364\372\277q\250\022\253\371s\343\277\226\270\006\267\016\246\356?e=`\267+D\324?\3476\032\237s\000\353\277\370\020]\\R\225\004@\322$\214\367sO\025@\230[\023P\237\265\321?,z\r\010[.\361?\214\037f^\206\307\306\277T\326\320.P\262\343\277s\356\022\256\315\371\353\277\243~\247s\371C\352?EG\213\204\006E\331\277\226\000%\207\202G\345\277fU\354\022O\342\361\277\303M\321\234\276\210\342?\376\272\371\202p\333\320?G3\260sOW\354\277(uI\010]\203\331\277l\372\213)\254\206\347? \372lND\026\376?\342\3344z0g\363?\260\316\265\270\277X\364?s\356\022\256\315\371\353\277\327X\3652=\021\020@\220\023g\240\261\001\371\277\321\366+\017@\003\373?\203\241\353\016\223\244\301? \200\257\316\251\025\316\277\033\215;\377\031\235\320?\003{=H\325\232\353?\364\020\226l\025\214\323\277r%n\300n*\335\277N\330\321\3449\234\257?\315\327RG\nK\365\277\376\245\013\275\'\363\354\277Wl\313Tz\001\362\277\007|\326?]\316\364\277\341B\223\032R\215\346?\366\037;]H\341\352\277\350*\225\236\250\001\273?\260\320<~Q$\211?\243\375 V\016\026\322\277\275\204\"\236\247\223\361?\027\223k\245\342\226\337?\243\375 V\016\026\322\277d\005\362\357\370\030\354\277F\0200re\024\350\277P\370\2678\262\301\376?o\253*\376\335\360\352\277\310\t\352Y\255\320\316\277\261\025E\242c\354\363\2773\344&\004\241*\347\277\223#\241\323QI\236\277\261\346A\024\343\366\321\277R\374h\203\036r\357\277\215\261\2579Df\324\2772y\2102CF\354?\333\250\347\251\273\215\327?\r\211\370\037\031\231\222\277\301\307\nN\227\234\362?\204\367\233\032\250\240\350\2770\241>T\261!\346\277\276Eo\007\346\'\301?zm\032p\\\336\365?\346f\254\023\304\003\364\277K\266^o\222\306\364\277\254\336\337~\n\226\340? \253\205\340\177G\317?\215\216/8Z#\320\277\305\\v\215\361\335\331?N\360\333\345\317\231\337\2771\347>W\205\247\356\277#ylsO!\270\277\243\216W|:\272\310\277\262$\3446\371\\\224?\333\250\347\251\273\215\327?f`\340\270\025\207\330?\253\203\361\265\355\'\324\277tI\001w\352g\330?\256\233\001\340\322\262\361?\225\335\244\205\230\004\341\277p=t\331\233\217\350?\325h\027M\260\001\336?\305\\v\215\361\335\331?-q&\235j\345\312?\366o\263%\021\n\243\277\350*\225\236\250\001\273?\036\230\265\347\326z\351\277\303\026v\212\035X\321?O\316n\231wQ\322?:g\333[\201~\226\277\037\314\370\246\223.\323\277\371\235\251\'O\222\333?\265-U\314Hw\321?ua\215\322\r\006\366\277\024\366\352\002\3436\n@\347/Q\001#\323\362?MTn\370a4\001@>[Z\020\321\300\261?@\266JM\"{\360?,\261h\032\374^\362\277\341\350\267\006\307\031\321?~\245\016z\205B\320\277j\230\324\302>\353\362\277\377\335y\204Z\036\325?\216\315f\235\335{\360\277\331\274\302\272r{\344?\330\204T\363?P\334\277\332\016H\276\021\000\275\277\221\343\324+a\376\357\277\267\226\325\320\006@\336?\260\177\316J\373\211\305?\266\362\316\2611\317\341\277\271w\006\032\211\255\372?B\315G\302u\013\347\277\263\356\035g\305\036\361?^\342g\335V\260\365\2770\241>T\261!\346\277jd\023^\017\330\246?|\n\\\331I\272\256\2778\226\330\215d\217\341?\372\321\354\346\013F\345?\\\177!\220\031\007\352\277\024aF\263\305\376\343?\315\363\t\253\243`\341?{\254Q\325\3376\326?f`\340\270\025\207\330?Z9!\215E\201\341\277 \253\205\340\177G\317?\244+\225\375\276\375\374?Zp|\237\346\261\322\277\263,B\027\267|\332\277\271w\006\032\211\255\372?\032\320\033\022\206\314\261\2770\241>T\261!\346\277\202\017\2423\325\005\324?\232\345\006\033qe\302\277\364\331:Zt[\342\277?\034\251\355C\241\343?\376\245\013\275\'\363\354\277k\302\035by[\337\277(uI\010]\203\331\277~\204\233\263q[\314?\305d\316\021\022\031\371\277\002\005\253\320\260\021\372?\337\215\311=\252\253\344\277\263%yyfO\362\277w!KU|\214\316?s\342\215\255\002\373\273?\201R\202FA5\265\277d\005\362\357\370\030\354\277G\256\376M\356\261\265\277q\250\022\253\371s\343\277r\313\222\254\343\266\347\277o\274\355\273\260a\320\277\365\374\272[^\236\346\277T\365!@[\345\244?\261\346A\024\343\366\321\277\375\302Q\007\221\026\360\277\0242C%E\t\362\277\346f\254\023\304\003\364\277\326\234Z\014m\265\347?\3352\333t\215=\310\277\234\222xs\370\013\365?\214}lz\207\262\352\277\371\256l\345!\003\341?u\007\262\276\202\222\360?\346\360\031\234\237z\342\277\315\204@\321\317\004\350\277\355\255E\016 \275\325\277\000\001\372\205Da\331?M\315[\344\345V\333\277\311\022S\037+\272\262?\036\307\270uWp\373?\203\255o\325C}\000@;\014\361G\177Q\305\277\312\260!\373\263W\340?\204U\2426\251\213\334?\257\342\220\311vF\361\277Ww\277\372@\246\330?3B- \242\025\333?\010\252J\347\r\266\337?~\204\233\263q[\314?\365\374\272[^\236\346\277\332\337B\274\\\276\350?\273\307\000=\337v\340?\266P\325\3152\272\325?\007YV>s\213\360\277|\304\3350\003\325\363\277=\2060\"\247\362\242?\361\027\331\307o\200\331?\225\335\244\205\230\004\341\277F\0200re\024\350\277$6\214`\343\361\326?q`\364\332\205\322\354?\354Sj\372\224I\340\277\235\033W\025\004u\354?\315\363\t\253\243`\341?B Z8\260Q\364\277\236\365\276\3005\265\340?$+\230\272\034M\360\277\305\\v\215\361\335\331?%\310\325;\241\220\304?\332\337B\274\\\276\350?\323\"\027J\334{\325?\341\350\267\006\307\031\321?\261\325~V\020\206\354\277w\377\234[\335s\002@\344\225+\323\202\014\306\277\247\t\256\363\\\356\341\277\221\343\324+a\376\357\277A\375\3316\306\016\360\277X\217KVdD\366\277\207\027\004\311\255f\345\277Ww\277\372@\246\330?\257\342\220\311vF\361\277Q\331\350\2014/\353\277g\203`\272\377\311\334?\367\031\007\002e\246\220\277\t\251\247A\301\014\030@)\230\311\tG\306\335\277\r\337\244C\305\374\244\277\224\363\214\321%N\316?}\362Q\330\263\274\336?7\222jds\373\001\300\216zT\'\2435\343\277\243\216W|:\272\310\277\346\250\373\313+\331\353?;c.\306/\017\361?\207j\026?\350\254\362\277\024*\353\240$\316\322?[\\\241\216/\304\345\277\351\206\024\302\311\311\360\277\3452iT\007P\372?\310\036\330\037\366\270\342\277|\304\3350\003\325\363\277$\220gtne\354?\313\366!\376\207\335\350?,z\r\010[.\361?\260\262\376T&C\350\277\036\221\354I\206M\361?\031i\250H\236_\325\277\'\016\326>u\026\315?C_\221\2353\252\344?\305Q\202\347*9\363\277\264H\371zP\222\366\277\347mu\261\0241\334\277\016D\366W\244\265\356?\315\327RG\nK\365\277\364\010>\350\364P\364?S\r,A\361\342\324\277E@\302\346\265\027\361\277\324\211\212\023\304\350\301\277\332\2140F\"x\373?\245\005\375\250\360=\361?L\010\342\376\374\376\352?r\313\222\254\343\266\347\277\312]\017\205y\021\363?c\342q\356\016\326\347\277\333\002\303\275F\001\355?\000\322\366\367\303k\367?yQc\014\303\310\351\277\350\245\343xG\\\344?\364\020\226l\025\214\323\2771\374,\035\316\217\322?\271\375H\232\356\254\312\277\322Yr\\}\254\346?\355v\352\373~\214\344\277\317\227\020\312x\321\315?\333\235\363\003\365\350\360\277\344\300\001\345X>\307?\366o\263%\021\n\243\277\037\327\354LZ\323\371?=\2060\"\247\362\242?\246\202X\276e\364\372\277\322\377\226H\3628\321?\351\221\010h\220n\327?K\266^o\222\306\364\277CC\3329\232\224\370\277\200\323\004|\303\312\250?A\010\316\334\214\263\326?\242\271-\216\020\354\311?\032\320\033\022\206\314\261\277\375\302Q\007\221\026\360\277g\203`\272\377\311\334?\223\374s<\026\227\364?\240^?\305\363}\355?\352V\202My\306\347\277D$\013\203\034\002\325\277\270\247\230\216\331\260\343?B\351\376%\017!\363?\216zT\'\2435\343\2777\262\244\352\224f\037@wq\301\251\020i\364\277\273\307\000=\337v\340?\027\244.c\265\007\345?^\332\017Y6u\326?\032U\3157\347q\350\277&/I\005\211\375\320\277\377\335y\204Z\036\325?\352\230\321\005\341\233\377?Uh\032\n\016Q\341?\247\301\217#\351L\353?\375\334f\317\310#\336\277JS\030\"U\035\351\277\365V\226o\351\021\334\277\366\232\2117\347;\264\277\277\n\351\354\316\177\341?\273L\262b@\034\267?z\211\321\323\365\363\321?\026\022\345\207\367h\347\277%|\214c\267w\337?\364\221\034\212\000\272\353?\355\311\374q\271\322\361\2777\'\017\264\2203\350\277\232\304\223T]~\336?\340\n%S\037b\336\277v1\373]\275\002\355\277\224\363\214\321%N\316?\255\206\021\246U~\273?\205F\001\373\220w\220?$\370\351=\315\213\224\277~\204\233\263q[\314?\3216\362Z\223i\342?-\244V\247\225\236\355\277C0\216\017\263\264\362\277\010\366\223\277\367\316\304?=R\361JS\327\315\277\317\270\203\220\214\270\321\277\245f\241Z\314\336\336\277Uh\032\n\016Q\341?\266P\325\3152\272\325?|\304\3350\003\325\363\277\333\250\347\251\273\215\327?\013\341\251\256\311\'\234?\346J\365\257*\356\327\2771\310,\177\214\370\t@d\032\340\265A\001\320?(uI\010]\203\331\277\036\353\307]\021\301\366\277\214}lz\207\262\352\277\222\275<\327\222>\344\277\332\016H\276\021\000\275\277jt\305\332\204\232\367?B Z8\260Q\364\277\224\037\364=\000\332\370?n\367s\326\307\t\340?\006A\312\342O\355\322?\336\304$PK\334\325\277.\255\301\340G\324\363?\365V\226o\351\021\334\277\373\364l\350\365\210\351?\014\n{U\233.\266\277\333\235\363\003\365\350\360\277\305\\v\215\361\335\331?}\362Q\330\263\274\336?\342#\304c\324\372\362\277\305\\v\215\361\335\331?\r\337\244C\305\374\244\277\004\346\333\0313\177\346\277\010\366\223\277\367\316\304?\351\310cz1\237\350?hY\235]\273\222\322\277\022\317\374\327\007`\346\2778J\217\265zv\354\277;7\307YU\203\306?\215\216/8Z#\320\277\376\245\013\275\'\363\354\277\330*y\337\264\334\346\277\2103\273,G|\361?\037\314\370\246\223.\323\277\221\370\302\361\251\346\323?L\010\342\376\374\376\352?\346\023\232\235\211\275\346\277\375\202\213\273=\260\350\277m\346\260\030\365\230\332?T\326\320.P\262\343\277\345\006\002\350,\304\317?5\251\240\351\211\202\307\277\023\362|\331\361\242\352\277\217\014\236\002a\324\340?\214\3545T[\016\344?\343FDe\276=\367\277\262\257\346\001B\306\340\277f`\340\270\025\207\330?S\301\342h\007\312\317\277\340\n%S\037b\336\277\324\211\212\023\304\350\301\277\373<\213\270i*\340\277\376\245\013\275\'\363\354\277P\370\2678\262\301\376?\0241\264>u\373\372?Zp|\237\346\261\322\277\306\032\'\325\211\010\362?\346U\351U\361\222\376?\310\036\330\037\366\270\342\277,\261h\032\374^\362\277dt\273\311\314t\345?\246{\217 \025\307\342?\331\274\302\272r{\344?i\"BK\032b\341\277\"\333\235\227\306\203\352\277\373<\213\270i*\340\277>kM:\215S\001@\324\211\212\023\304\350\301\277\300\317b\322\267\327\321\277\2103\273,G|\361?8J\217\265zv\354\277}\362Q\330\263\274\336?\226Z\000\233\r\273\332\277B Z8\260Q\364\277\304t\200\216\207\333\251\277\334\211\030\363=\373\363?1\374,\035\316\217\322?\021\254|\326\035\035\342\277\311\274\246\373~V\260\277\022\006X\352\250\220\327\277\207\027\004\311\255f\345\277\340+\230\0313I\262\277\0312M6\375.\344\277\314\277\306\353\346\254\327?,\261h\032\374^\362\277\004\002\223}\314\224\362?\375\302Q\007\221\026\360\277\177\344E\337\010\233\360\277\003\267\326\027~=\262?:\245}~\227\344\330?\216efaZM\317\277?\355\245_\303\253\361\277\000\366\005\340}\274\362\277\207j\026?\350\254\362\277\214\333r\226\210\235\336?\002)\272\270jb\365\277k\273T\304(.\367\277\223#\241\323QI\236\277\224wH\214\371\201\211\277\217\030#\003,\323\260\277\333\235\363\003\365\350\360\277\376\245\013\275\'\363\354\277\376\245\013\275\'\363\354\277F\177\371K9p\341?\017m\002P\037\250\000@\206+\337\331dT\322\277\033\215;\377\031\235\320?\256\233\001\340\322\262\361?KCh\031\024\247\312?x]\346\230Y{\367?\014M\232\241\031\342\003@\013e\343\333\301c\360?\336\304$PK\334\325\277\304\365\002\304\tq\275?I\216\236<l\305\330?\301\307\nN\227\234\362?\337\201D=\337\254\264?,\261h\032\374^\362\277\245\014\306FAk\351\277\0015=E\001\025\343?8>\n\265\257w\274?o\376<t\0307\370\277s\342\215\255\002\373\273?\277\213o\n\272\255\311?\352#RCN\r\305?Q\246\270w\tv\310?%\310\325;\241\220\304?\336\231L\312@^\362?\333\250\347\251\273\215\327?{\220\232qF!\372?\204J\256\220\342\346\365\277\371\256l\345!\003\341?\370z)&eO\327?\304\n\363\375\206\245\363?tI\001w\352g\330?Zp|\237\346\261\322\277r:\\\206\267\022\341?\361\206\242\241C\334\302?\204\367\233\032\250\240\350\277\307Dpt\304x\356\277O\255\373\322cj\276?N\226\000\322D&\352\277,\261h\032\374^\362\277n\333\274r.\364\363\277\330*y\337\264\334\346\277gE\276\227\351c\232\277\016\214\024(\030W\345\277\304\223\321\237\222\016\353?>BAB\022a\357? \200\257\316\251\025\316\277\200\323\004|\303\312\250?[\223\374\240\320\364\326\277\026p\353\243\370S\333?>[Z\020\321\300\261?=g\337\020\234\277\341\2770\333x\251s\330\017@i|\035_\245\325\326\277)\220q\205&\213\376?D\3479K!\245f?\372b#\r8\352\353\277n\244a`\215\303\362?\365\374\272[^\236\346\277=g\337\020\234\277\341\277\2560e\202\251\032\271\277\003\303[\030I<\342\277D\340\027\273\036\330\314?Wl\313Tz\001\362\277\220\300T*w\273\353\277\321\273\243\200\364\016\271?\266P\325\3152\272\325?\221#\233w\264d\367\277\342#\304c\324\372\362\277\274IYb\025\317\000@Z$3\307\374\230\315\277\304\223\321\237\222\016\353?B Z8\260Q\364\277s\342\215\255\002\373\273?X\217KVdD\366\277\257\342\220\311vF\361\277\355v\352\373~\214\344\277\336jI<\300h\340\277\305\\v\215\361\335\331?\017\002\247\237<\340\366\277A\375\3316\306\016\360\277=g\337\020\234\277\341\277\375\302Q\007\221\026\360\277@?)\357-\344\347?\365\374\272[^\236\346\277\303\001\210\304\324o\355\277u\007\262\276\202\222\360?\032U\3157\347q\350\277x\366tC\246Z\315\277E@\302\346\265\027\361\277h\210\240\353;\210\364\277\254o\026\2456:\347\277|\304\3350\003\325\363\277\227\222nb@\346\342?\204\367\233\032\250\240\350\277\n\336\215\246\312i\351?\366;\362\300\341\366\366?p\234L\375\347\244\004@\244<X\273\221n\362\277e\337Y\233*Y\340\277\364\331:Zt[\342\277V%<k\326m\362?%\310\325;\241\220\304?jd\023^\017\330\246?\375\334f\317\310#\336\277\332\016H\276\021\000\275\277\036\230\265\347\326z\351\277}\362Q\330\263\274\336?\200\264\263j\270\227\347\277 \200\257\316\251\025\316\2770\363\301\343\033Z\374?\2671\006\027\265\'\362?9$\367`\254\266\340\277\036\353\307]\021\301\366\277\332\016H\276\021\000\275\2775\251\240\351\211\202\307\277\216zT\'\2435\343\277\032\320\033\022\206\314\261\277\243\216W|:\272\310\277S\r,A\361\342\324\277\300\332Vx~|\370?gxl\0249%\366\277\267\267H\227\032\'\302\277|\304\3350\003\325\363\277|\304\3350\003\325\363\277\010\252J\347\r\266\337?s\356\022\256\315\371\353\277\016\337&\236R\235\362\277\340+\230\0313I\262\277\223\255\214\316Q\310\305?\332\205g\250\321J\323?\276\313\261\207K\'\361\277\021\254|\326\035\035\342\277\036\221\354I\206M\361?\332\016H\276\021\000\275\277~\267\313\275\234\024\357\277\224wH\214\371\201\211\277\300\332Vx~|\370?5\325H\003\253\336\000@\030F(G\264\034\321\277\017\257\224)\002\232\351\277v*2\300l\325\364?\r\337\244C\305\374\244\277\034\260\273\000\004\340\324?\221\343\324+a\376\357\277\2654\036j\231\244\371?\024\025\375\332\333\345\356\277\360\373!d\326j\375?jay\260\235\272\361?\274\273}\260H\304\362\277\261\3615\272\251\233\370?j\230\324\302>\353\362\277\376\231\206\274\\\364\274?B Z8\260Q\364\277\t\273\r\245\340&\345?\236\365\276\3005\265\340?Zp|\237\346\261\322\277\332\016H\276\021\000\275\2779\211\306\032\376\316\374?r:\\\206\267\022\341?\235\275P\371\002\212\330\277\260\177\316J\373\211\305?\273\307\000=\337v\340?\t]\007\211\337;\321\277\246\202X\276e\364\372\277\016D\366W\244\265\356?]\267\217WL2\322?N\005\312\253\030\202\343?\n\200\207\212\311~\325\277\337\347\244Q5\037\332\277\001hmO,\316\305\277\317\201(~\353\207\340\277\371\256l\345!\003\341?\035u5\346\3547\345\277\034\n\227\024\217S\352?@?)\357-\344\347?\177\2213i\316T\343\277PK\312\256\354\007\354?i|\035_\245\325\326\277\375\334f\317\310#\336\277\203\241\353\016\223\244\301?l\240\260\025!\023\322?\3352\333t\215=\310\277jt\305\332\204\232\367?\314\277\306\353\346\254\327?\363R\345$}a\373\277G3\260sOW\354\277\n&\254v>\013\340\277\361}9\334\305\362\276\277\023\362|\331\361\242\352\277S\342S\273\346d\361?Y\3362\304(\023\305\277\375\361T\225\021\014\342??\246\026v\037\030\362?|\n\\\331I\272\256\277\031&\310520\264?q\250\022\253\371s\343\277|\304\3350\003\325\363\277s\356\022\256\315\371\353\277\r\337\244C\305\374\244\277|q\313\272\310\216\346\277yQc\014\303\310\351\277\260T\3708%X\304\277 \200\257\316\251\025\316\277\332\016H\276\021\000\275\277\335\220\341\220\216(\354\277V\030\245\357\223\232\014@\023)\330\353\222\323\333\277\3021\0329%s\366\277yQc\014\303\310\351\277\221#\233w\264d\367\277|\317\321\326\311y\332?\345\006\002\350,\304\317?\360\305U8\005H\363?\246{\217 \025\307\342?\371\235\251\'O\222\333?\376\245\013\275\'\363\354\277,\261h\032\374^\362\277\375\236B\037\327\305\364?\202\017\2423\325\005\324?\365\374\272[^\236\346\277\272\217\222u\254K\330\277#ylsO!\270\277=\236:#=\360\322\277k\302\035by[\337\2778>\n\265\257w\274?\227#\245\210l\212\351\277\375\302Q\007\221\026\360\277Q\246\270w\tv\310?c\361\221\326e\030\016@A\236\001\023z\371\003@\232\373\356f\376\256\357?S\r,A\361\342\324\277v\016{\\\323\277\350\277\014\n{U\233.\266\277u>\r\321#\303\361\277\202\017\2423\325\005\324?F\272\271n\001>L?m\346\260\030\365\230\332?gE\276\227\351c\232\277-q&\235j\345\312?\322e\367\\H\253\266\277\262\243a\001w\307\260?\261\346A\024\343\366\321\277\350\004\274\234\223q\000@\n\200\207\212\311~\325\277\270\247\230\216\331\260\343?\336\317\030\366\021\201\374?\224wH\214\371\201\211\277\353\370{1x\333\303\277T\371P0:\365\347\277\202\017\2423\325\005\324?+\274\\\300\302\003\331?|\304\3350\003\325\363\277}\264\257\265\235V\234\277B\374JP\366\000\371?G\242yM#\263\345?\013\341\251\256\311\'\234?|\n\\\331I\272\256\277\246\202X\276e\364\372\277\216zT\'\2435\343\277p\234L\375\347\244\004@,\000P\210\300-\301\277)>\356\365\273R\350\277\2103\273,G|\361?]\277\347\333lm\361\277\233\265\362\030Ej\222?\226Z\000\233\r\273\332\277%N\030\274\006\220\364\277Ab\251\360\027\'\354?R\374h\203\036r\357\277S)\343\244\212\370\360\277\231\034a\363\367o\002@\035u5\346\3547\345\277`1\323\031\335k\344?\n&\254v>\013\340\277\235\275P\371\002\212\330\277\376\245\013\275\'\363\354\277\233\265\362\030Ej\222?\336\317\030\366\021\201\374?f\031\224\360\354\017\n@i|\035_\245\325\326\277^|\t=5\212\342\277\271(\037\254\304\336\313?hd\221\003\2027\371?&^L\223\t\363\362\277\230\226\235R\037\366\245\277\212\357M\247?\213\353?\367B\273^2$\357\277\332\016H\276\021\000\275\277"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 1167
              }
            }
            tensor_content: "\362\325]`\"\356\001\300\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\237>Ui\364\321\344?\0342\004\362I\372\365?\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\0342\004\362I\372\365?\026\031b\003\365J\370\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\026\031b\003\365J\370\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\026\031b\003\365J\370\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?X\237\n?\312\266\007\300\0342\004\362I\372\365?\0342\004\362I\372\365?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\333\253[\266t\216\006@\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\0342\004\362I\372\365?\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\026\031b\003\365J\370\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\0342\004\362I\372\365?\237>Ui\364\321\344?\026\031b\003\365J\370\277\0342\004\362I\372\365?\0342\004\362I\372\365?\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\026\031b\003\365J\370\277\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\0342\004\362I\372\365?\237>Ui\364\321\344?\237>Ui\364\321\344?\026\031b\003\365J\370\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\237>Ui\364\321\344?\362\325]`\"\356\001\300\0342\004\362I\372\365?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\0342\004\362I\372\365?\3227\357\212X\205\262\277\0342\004\362I\372\365?\362\325]`\"\356\001\300\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\237>Ui\364\321\344?\0342\004\362I\372\365?\224\014\021\214Js\351\277\237>Ui\364\321\344?t\342\256\327\314\305\000@\026\031b\003\365J\370\277X\237\n?\312\266\007\300\3227\357\212X\205\262\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\026\031b\003\365J\370\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\0342\004\362I\372\365?\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\0342\004\362I\372\365?\0342\004\362I\372\365?\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\362\325]`\"\356\001\300\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277X\237\n?\312\266\007\300\0342\004\362I\372\365?\3227\357\212X\205\262\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\0342\004\362I\372\365?\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\333\253[\266t\216\006@\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277t\342\256\327\314\305\000@\237>Ui\364\321\344?\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?t\342\256\327\314\305\000@\224\014\021\214Js\351\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\0342\004\362I\372\365?\3227\357\212X\205\262\277\237>Ui\364\321\344?\026\031b\003\365J\370\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?t\342\256\327\314\305\000@\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\0342\004\362I\372\365?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\0342\004\362I\372\365?\237>Ui\364\321\344?\0342\004\362I\372\365?\362\325]`\"\356\001\300\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\0342\004\362I\372\365?\026\031b\003\365J\370\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\0342\004\362I\372\365?t\342\256\327\314\305\000@\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\333\253[\266t\216\006@t\342\256\327\314\305\000@\224\014\021\214Js\351\277\237>Ui\364\321\344?\026\031b\003\365J\370\277\333\253[\266t\216\006@t\342\256\327\314\305\000@\0342\004\362I\372\365?\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\026\031b\003\365J\370\277\026\031b\003\365J\370\277\333\253[\266t\216\006@\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277t\342\256\327\314\305\000@\224\014\021\214Js\351\277\362\325]`\"\356\001\300\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\362\325]`\"\356\001\300\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\237>Ui\364\321\344?\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\026\031b\003\365J\370\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277t\342\256\327\314\305\000@\224\014\021\214Js\351\277t\342\256\327\314\305\000@\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\0342\004\362I\372\365?\0342\004\362I\372\365?\224\014\021\214Js\351\277t\342\256\327\314\305\000@\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\026\031b\003\365J\370\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\362\325]`\"\356\001\300\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277t\342\256\327\314\305\000@\333\253[\266t\216\006@\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?t\342\256\327\314\305\000@t\342\256\327\314\305\000@t\342\256\327\314\305\000@\026\031b\003\365J\370\277\333\253[\266t\216\006@\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277t\342\256\327\314\305\000@\237>Ui\364\321\344?t\342\256\327\314\305\000@\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277t\342\256\327\314\305\000@\026\031b\003\365J\370\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\237>Ui\364\321\344?\362\325]`\"\356\001\300t\342\256\327\314\305\000@\0342\004\362I\372\365?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\0342\004\362I\372\365?\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\0342\004\362I\372\365?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\237>Ui\364\321\344?\237>Ui\364\321\344?\0342\004\362I\372\365?\0342\004\362I\372\365?\224\014\021\214Js\351\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\333\253[\266t\216\006@\3227\357\212X\205\262\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\0342\004\362I\372\365?\0342\004\362I\372\365?\237>Ui\364\321\344?t\342\256\327\314\305\000@\237>Ui\364\321\344?\0342\004\362I\372\365?\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\362\325]`\"\356\001\300\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277t\342\256\327\314\305\000@\224\014\021\214Js\351\277\237>Ui\364\321\344?\362\325]`\"\356\001\300\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\0342\004\362I\372\365?\0342\004\362I\372\365?t\342\256\327\314\305\000@\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\333\253[\266t\216\006@\026\031b\003\365J\370\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\0342\004\362I\372\365?\3227\357\212X\205\262\277\362\325]`\"\356\001\300\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\026\031b\003\365J\370\277\0342\004\362I\372\365?\0342\004\362I\372\365?\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\0342\004\362I\372\365?t\342\256\327\314\305\000@\237>Ui\364\321\344?\0342\004\362I\372\365?\026\031b\003\365J\370\277t\342\256\327\314\305\000@\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\026\031b\003\365J\370\277\3227\357\212X\205\262\277t\342\256\327\314\305\000@\224\014\021\214Js\351\277\333\253[\266t\216\006@\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\0342\004\362I\372\365?\276h\267\035r\177\r\300\237>Ui\364\321\344?\237>Ui\364\321\344?\0342\004\362I\372\365?\333\253[\266t\216\006@\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\362\325]`\"\356\001\300\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\0342\004\362I\372\365?\026\031b\003\365J\370\277t\342\256\327\314\305\000@\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\0342\004\362I\372\365?t\342\256\327\314\305\000@\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\026\031b\003\365J\370\277\237>Ui\364\321\344?t\342\256\327\314\305\000@\026\031b\003\365J\370\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\333\253[\266t\216\006@\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\0342\004\362I\372\365?\026\031b\003\365J\370\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\026\031b\003\365J\370\277\3227\357\212X\205\262\277t\342\256\327\314\305\000@\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\026\031b\003\365J\370\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\0342\004\362I\372\365?\3227\357\212X\205\262\277t\342\256\327\314\305\000@\0342\004\362I\372\365?\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\362\325]`\"\356\001\300\224\014\021\214Js\351\277\224\014\021\214Js\351\277\362\325]`\"\356\001\300\237>Ui\364\321\344?\237>Ui\364\321\344?\3227\357\212X\205\262\277\333\253[\266t\216\006@\237>Ui\364\321\344?\3227\357\212X\205\262\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\0342\004\362I\372\365?\026\031b\003\365J\370\277\026\031b\003\365J\370\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\0342\004\362I\372\365?\224\014\021\214Js\351\277\026\031b\003\365J\370\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\0342\004\362I\372\365?\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\237>Ui\364\321\344?\362\325]`\"\356\001\300\3227\357\212X\205\262\277\333\253[\266t\216\006@\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\026\031b\003\365J\370\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\0342\004\362I\372\365?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\237>Ui\364\321\344?t\342\256\327\314\305\000@\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\0342\004\362I\372\365?\026\031b\003\365J\370\277\0342\004\362I\372\365?\0342\004\362I\372\365?\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\3227\357\212X\205\262\277\333\253[\266t\216\006@\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\026\031b\003\365J\370\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\0342\004\362I\372\365?\224\014\021\214Js\351\277\0342\004\362I\372\365?\362\325]`\"\356\001\300t\342\256\327\314\305\000@\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\237>Ui\364\321\344?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\276h\267\035r\177\r\300\237>Ui\364\321\344?\362\325]`\"\356\001\300\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\333\253[\266t\216\006@\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\0342\004\362I\372\365?\224\014\021\214Js\351\277t\342\256\327\314\305\000@\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\3227\357\212X\205\262\277\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\026\031b\003\365J\370\277\026\031b\003\365J\370\277\333\253[\266t\216\006@\0342\004\362I\372\365?\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\237>Ui\364\321\344?\0342\004\362I\372\365?\3227\357\212X\205\262\277\0342\004\362I\372\365?\026\031b\003\365J\370\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\026\031b\003\365J\370\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\0342\004\362I\372\365?\026\031b\003\365J\370\277\224\014\021\214Js\351\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?\0342\004\362I\372\365?\237>Ui\364\321\344?\224\014\021\214Js\351\277\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\0342\004\362I\372\365?\237>Ui\364\321\344?\3227\357\212X\205\262\277\237>Ui\364\321\344?\237>Ui\364\321\344?t\342\256\327\314\305\000@\224\014\021\214Js\351\277\237>Ui\364\321\344?\0342\004\362I\372\365?\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\026\031b\003\365J\370\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\3227\357\212X\205\262\277\026\031b\003\365J\370\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\237>Ui\364\321\344?\224\014\021\214Js\351\277\237>Ui\364\321\344?\026\031b\003\365J\370\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\3227\357\212X\205\262\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\0342\004\362I\372\365?\3227\357\212X\205\262\277\224\014\021\214Js\351\277\237>Ui\364\321\344?\237>Ui\364\321\344?\224\014\021\214Js\351\277\3227\357\212X\205\262\277\0342\004\362I\372\365?\3227\357\212X\205\262\277\224\014\021\214Js\351\277"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_3"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1167
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_4"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1167
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_5"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1167
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_6"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1167
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_7"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1167
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_8"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1167
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_9"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1167
              }
            }
            tensor_content: "\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\001\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_10"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1167
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_11"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1167
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_12"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1167
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_13"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1167
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_14"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1167
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_15"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1167
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_16"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1167
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_17"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 1167
              }
            }
            tensor_content
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_18"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 1167
              }
            }
            tensor_content: "\302V`\253\325L\003\300\022\034\262\344\320H\362?\353\177<\252q \275\277\024\364%4Cv\277\277\302V`\253\325L\003\300!<]b\3119\357\277J\232SN=\367\342\277\351\353E\016\203\021\341\277R\370\"\351\037\247\257?\255\201\022A\250\272\364?3\373\237\215\221\274\334\277\036\271\260a\241T\351?\314X\330\264\005\346\326\277\327\3470b\177\300\360?a\330I\341\005\267\333\277aMP\022\327j\324\277\250c\242\2224\315\337\277\036\312\372\374g~\317\277G\275\341\265\312\343\244\277\\\347\216\260[\325\354?\007\003\2655\340\321\342\2770w\236\277\261\'\345\277\007\216\256\004\017\036\352\277\333^\274\224\034\265\363?\200g\276\241[:\353?\256\272\303\363X\230\324?+\205\216\301O\226\344?k5\304CzL\334\277L\223[M\356?\323\277\232{\323/\220?\266?\301:\2628\3315\364\277)\021\202\301~{\301\277\200\332\0328\275\216\340\277\024m\200\232\363\350\316\277\373\337\2604\363\251q\277\363Jj\013g\006\345?\241\353\346+\203G\344\277\327@L\346\250\307\336\277\005\014W\321\236\350\325?\302V`\253\325L\003\300\363H\300p\367\246\341\277\224\223\272/\356\t\320\277*\327\326\335\315\004\374\277[\372\277 =\364\001@\375E\017\255\353\006\002@\253\323Z]&)\354\277\\i\213G\024\364\264\277\205\341\310\006\305\010\316\277\352\257\360\217b;\370?\275\010\371\206w\017\344\277!(\024_\333\000\344?\241\353\346+\203G\344\277Z\256\335\375\252\367\374\277xy\247<!Q\345?G\275\341\265\312\343\244\277\262u\314\331y\253\370?\253J\013)g<\350?\223^]\262\034\353\366?Y`\216zT1\340\277\302V`\253\325L\003\300\267\3357\326d\240\363\277;K\311\355f\320\341?=H%\"\367\327\310?0\004B)P\323\357?g\360\026\\\342\234\362?v\200\237=p\010\325?\3736\327\3251\220\347\277\241x\212\225!\363\356?7\031\020<\005\252\361?\302\374\262\037I\000\350\277\344\3715\020!\200\340?H\223\000\034\355\223\261?=\315 !\327\005\326\277j\351\036[\223\345\362\277&\221\324(~\245\340?\251\333\247+-\220\355?\024W\215\374\225P\300\277\205V\3177\226\274\306\277\341\215\321z\016\343\312?\241\353\346+\203G\344\277\336\324\362\371\001\372\364\277f\312Y\337gH\314\277\\\342\345\255\304f\304\277\252\234SE\345\252\377\277\253\323Z]&)\354\2778d`W4a\331\277\217\036Y\315\033\252\265?\\\347\216\260[\325\354?k5\304CzL\334\277{-\335\272\226\313\362?.\304\275\016\364\\\371?\324\276\364\2628\222\352?\363H\300p\367\246\341\277\2350\336Eb4\360?g{\020+\021\351\371?\216\364G\033\302\226\370\277\024m\200\232\363\350\316\277\300\002VS\340\007\346\277[\231?-\005\017\360?\\o\211\027c\022\337\277\353m\235A\363F\305\277\331\262\256K\n\203\356?\235\030\304m\227A\005@\336\216\313\253\016|\340\277k#%\333\373r\324?\360\330\007\246\005K\325\277\027\313\231\374fk\343?3\365\241\275B\236\262\277\302V`\253\325L\003\300b\207V\222?\370\365?3t\372\363A/\334?G\275\341\265\312\343\244\277\n\212\265k\347u\357?\035\365\005\340\301*\362\277\353\344M\r4Z\321\277\227\216l\311\016\262\343\277imE\302\026\231\363?k5\304CzL\334\277\224\251\255\315K\242\336\277XyqOS\230\023@\212\302\216i`p\350\277\224\251\255\315K\242\336\277q\216\217?\016w\304?=C|\037`i\340\277\356\341\251A\304a\350?\363H\300p\367\246\341\277\270\031\350\360<\215\310?\222%\254\377k\r\347\277\257{o\r\021\263\366?\236{.a\221\353\327\277\356\337\377\246T\002\345\277\347@\215\222(\217\375?k5\304CzL\334\277aN\245\337\216\032\346\277\206\0061\266\207\255\362\277\221\322>\004\037\210\214?8g_\277[p\356?.|\354%\221\177\321\277\351\355\357\250\362p\344?\331\260\004\261\232#\353\277\007\220X\237~}\355?\307d\036\0344\365\322\2773q\373\213\032 \347\277\375\245:\323k<\342\277\373\337\2604\363\251q\277\366\376\237\211\334\200\362?;\220\233n\242\236\364?\231\210\311\225w\252\345\277q\216\217?\016w\304?k5\304CzL\334\277\322:\363\344X\375\322?:_\022\361T\t\355\277\00165\253\213\323\001@\222%\254\377k\r\347\277aN\245\337\216\032\346\277\031M\361/\327\240\327\277$\037r\303\034\352\320\277.\177\353\215\270\216\346?2\257\372\244\252U\363\277\rn\037\232\362\325\342?\307hrQ\023\264\331?G\257\226\202+\311\263\277\236\177\202\226p\252\336?\363H\300p\367\246\341\277\336\216\313\253\016|\340\277\300\004\000\356Og\351?\036?\001.92\310\277\241x\212\225!\363\356?\360\330\007\246\005K\325\277M\226Z\265\025O\350?\271c\343>\264\224\376?\275\222\235\210\356\253\331\277Z\256\335\375\252\367\374\277\363\323\271?&\363\350\277\024m\200\232\363\350\316\277\302V`\253\325L\003\300\3736\327\3251\220\347\277T\371wK!\354\346?z\200\372nq\264\266\277\263\252)WK\312\321\277G-\232\353r\252\353?)\026+\304\025\352\351?\241\353\346+\203G\344\277\346\007\334\337w\261\355\277\031\306K\226\207\023\327?\023\230\213}M\225\361\277)-\360\316(-\003@@?\203\2068\301\345?\322\301\230~\250\212\323\277G\242\240\034D^\344?\024Z\214d\275_\345\277\217*\372eKe\323\277.\013:*\237\212\337?0w\236\277\261\'\345\277\207\3101\235\367w\346\277\031M\361/\327\240\327\277\017i\3213\023~\326?)\237z\370\324\326\355\277\270\'3$\334\247\311\277\260\261!X\232\201\341\277\341D\253\304\363U\361?\302\374\262\037I\000\350\277\253\323Z]&)\354\277\022\355\322\001\363\022\356?\0344Z\306\t\020\340?K\322\25736%\361\277\206\0061\266\207\255\362\277\236{.a\221\353\327\277\251M\257\364\3264\321\277\367zy\"Y\315\361\277\007\216\256\004\017\036\352\277\034\275\251\372\310\374\343\277\036\312\372\374g~\317\2773\365\241\275B\236\262\277\205\320~k\376\336\347?\306\244\307\3173\212\362?\005\227P\240\3154\335?\204\014\324\351\036\265\360\277\356\001\231\334\3300\203?q\216\217?\016w\304?\230\307\035|\277\217\363?\207\204\264\351sY\365?\336\033o\025\255\'\353?+\020\210\220~\342\353?\031M\361/\327\240\327\277\327.\255}*\356\326?k5\304CzL\334\277\300\215O\"\017T\355\277a\331\236\256\275f\355\277w\313\357X\237\277\374\277\302V`\253\325L\003\300\353p\234\251\032V\352\277k5\304CzL\334\277P\306i\314\007\026\365\277\3735\202\010z\340\325\277J%M\035lC\352\277\005\014W\321\236\350\325?\2636x\3631\306\352\277\205\323}\323%\356\314?\036s\211\023\256\326\364?\350\0019\254\340\251\357\277\272\231\225\211=c\351\2773n\374#\363\020\302\277E3=\037\n\262\351?&\032$]=\222\344\277\270\216\356!\016A\301?\270\222BW\355\377\267?L\036U\034\035\214\332\277G\275\341\265\312\343\244\277\365B\035=`\237\343\277\024m\200\232\363\350\316\277B:5 Yi\331?z\373\376o\221\206\331\277O\005\276\262O\373\342?\313|\273~\224\027\220\277\241\353\346+\203G\344\277L\036U\034\035\214\332\277y;\250#\221\033\371?\217.N\233*$\332?cH\002\254\367\022\350\277\263\252)WK\312\321\277\3736\327\3251\220\347\277\236{.a\221\353\327\277\247\215X\250\326\311\360?,G\217\250\277`\370?K\322\25736%\361\277\217.N\233*$\332?\036\267\006\3071\365\345\277\216\364G\033\302\226\370\277\216\364G\033\302\226\370\277\363(\321\325\342\327\206\277\267\3357\326d\240\363\277\263#\204\275\373<\321?\255\200\275s\360\n\363\277\000\036\233\010\034\026\274?\034\275\251\372\310\374\343\277\275\303&\006<A\361\277\270\346\264\330\177\230\375?G-\232\353r\252\353?G\275\341\265\312\343\244\277\206\007\206\203?]\364?!<]b\3119\357\277\224\251\255\315K\242\336\277\\\347\216\260[\325\354?\017\255N\347\226\234\367?\302\013S \240\312\272\277\236\3604\222b\237\320\277=\315 !\327\005\326\277\274F\370\237\007E\360\277&\034\316\367\254\361\347?\327+\256\025\003\337\341\277\224\251\255\315K\242\336\277\312\326\200\201\225\260\342?\300y\006\037!\033\342?T\371wK!\354\346?,\322\210w\356\254\377?3\365\241\275B\236\262\277\236{.a\221\353\327\277\034H\243\311\367H\353\277\2151\362f\232\034\343\277\324\276\364\2628\222\352?\270\216\356!\016A\301?5\340^\211T\314\341\277\027\313\231\374fk\343?\253\323Z]&)\354\2770w\236\277\261\'\345\277|5\005\360\371\023\373?\326\305G\345\210\365\273\277\322\tjg\013h\373?G\240\366\201\324\376\340\277\030\215\232\343\3265\367?`\215\371\305\326\377\363?0w\236\277\261\'\345\277\360\330\007\246\005K\325\277\253\323Z]&)\354\277R\375p\344H\224\341\277\025\312D\232e&\254?G\266\351\0372\227\357\277\n\212\265k\347u\357?\302V`\253\325L\003\300\305m\300\267\362\013\346?8\335\272\275\344\323\330?G\257\226\202+\311\263\277k5\304CzL\334\277\276A\2529(\355\363?\000\027Hk\025H\340?\024m\200\232\363\350\316\277\217\242\377\376C(\341?+\'M\233\221%\005@\313|\273~\224\027\220\2773\331\013W\004i\260?\341#\201\204\276\267d?\364\360\244\010fm\222\277\260\263\313\362\t\341\344?\365\315\026\014\217\353\352\277r\335\010\014\341\231\220?\251M\257\364\3264\321\277Y\353\207I\203}\347\277U/*\226\252\272\361\277\034H\243\311\367H\353\277\335X\031a\205\255\365?2\257\372\244\252U\363\277\253\323Z]&)\354\277\365\312\027\244g\334\305\277cH\002\254\367\022\350\277\217:\3573Z\337\267\277\367\006\310\276?\311\372?\302\204\255\206P=\312\277\\M\365\340\325\276\262?\253\323Z]&)\354\277\217.N\233*$\332?\027mX\326\250\372\003@j\352s(K\225\364?\036I\370+\371\215\242\277\2350\336Eb4\360?\365U\021s\226(\315\277\312\352\311\204\203\351\355\277J%M\035lC\352\277\234\237)\242\224i\010@\036r4F\366&\363\277\\\342\345\255\304f\304\277\246j\232\223\203\204\357\277\311\236$\234\234\202\364?\366\300 \246\247\200\273?\204\014\324\351\036\265\360\277k5\304CzL\334\277Q\022\017\265\356|\336\277\035\365\005\340\301*\362\277\236{.a\221\353\327\2770w\236\277\261\'\345\277\270\222BW\355\377\267?\217>Ci9\236\316\277\216\364G\033\302\226\370\277\236|\203.I\233\351\277\240\213\273\005\003\022\004@p\024\340\013\246T\343\277k5\304CzL\334\277X\265\325\376\371\256\374?\336\324\362\371\001\372\364\277\242$\230\3363%\364?>>.$7|\256?\2151\362f\232\034\343\277\305k\026\035\203\254\342\277Q\205kKP\321\303\277u\007E\327\277\225\325\277\205\316\324\320\216\177\344\277\372\300{\327\250,\335\277\027T\3510&X\347\277/\266\362\245\371\014\363?\360\330\007\246\005K\325\277\360c\001u4\227\334\277\353\177<\252q \275\277\303\341q\206\302z\247?jum\367y\341\373?0w\236\277\261\'\345\277\273\233?$\255\302\354?]?\252\2556\244\241?u\007E\327\277\225\325\277\360Qb\014\266\275\324?n\245|\016l\250\350\277\200e\024\007\354\332\347\277p\024\340\013\246T\343\277\322:\363\344X\375\322?q\007\352\245\276\351\263?\244\324\371\\%\026\300?k5\304CzL\334\277\037/\014`*\270\323?+\020\210\220~\342\353?\352$\367\3003\357\360?\341\213\'\340\236\203\327?\353\177<\252q \275\277\352\256\233\302\252\213\366\277\237\260V\\9\001{\277\224\333\213\030Q\347\367?\341\026!\257\315\317\336?oi\'\220K\322\377?\231\002y\311\337\314\306?(\234{\220\255\307\310\277\224\224\017\375\245\271\341\277G\275\341\265\312\343\244\2778d`W4a\331\277\0136\303\264\371\247\364?\312\326\200\201\225\260\342?\305\366\017\354\261\370\351\277\217\245\376fk7\306?\241\353\346+\203G\344\277\326\305G\345\210\365\273\277\216\364G\033\302\226\370\277\253\323Z]&)\354\277\360\330\007\246\005K\325\277k5\304CzL\334\277\353\177<\252q \275\277L\036U\034\035\214\332\277\373\337\2604\363\251q\277\036\274\257\311\310c\316?!<]b\3119\357\277\034H\243\311\367H\353\277cH\002\254\367\022\350\277}\342g\006\304\365\341?\265`\tp0\244\362\277\373\310\340F\267\n\001@,+\3415\303I\t@\251N\004\302\216\344\342\277G\275\341\265\312\343\244\277\217\263I\232\nR\307\277n\245|\016l\250\350\277\373\337\2604\363\251q\277\314V.\032\226\206\303\277cH\002\254\367\022\350\277\200\357\270\010cw\335\277\307d\036\0344\365\322\2773\365\241\275B\236\262\277~\244h\3553\300\365?\364\360\244\010fm\222\277G(\361\350\333;\303\277\235F\321\343\277\314\376?Rw \030\261\266\302?+\020\210\220~\342\353?\353c\246C3\353\272?\373\337\2604\363\251q\277oi\'\220K\322\377?\352\256\233\302\252\213\366\277\352\215\207\335\020;\256\277\264\344/\327\263W\363?\356\341\251A\304a\350?|\252\013!\313\307\363?\375\245:\323k<\342\277\034H\243\311\367H\353\277\2639w[Y\325\337?\202\324w\004&\207\342\277\363H\300p\367\246\341\277\302V`\253\325L\003\300\322\301\230~\250\212\323\277\336\216\313\253\016|\340\277B6\341\352y\252\322\277\373\337\2604\363\251q\277\251N\004\302\216\344\342\277\353\177<\252q \275\2773\373\237\215\221\274\334\277\263\253~$\003z\343\277\324\274J\030\3112\347\2778d`W4a\331\277\263\252)WK\312\321\277H\032\246\265<!\302?\256Gg]\367C\317?]?\252\2556\244\241?\n\377\273\234\270)\350?3\373\237\215\221\274\334\277\035\365\005\340\301*\362\277\207\3101\235\367w\346\277\317\312:\032g\241\346?\217*\372eKe\323\2778d`W4a\331\277\027\346\362\241\253\322\000@\270\'3$\334\247\311\277[\231?-\005\017\360?\353c\246C3\353\272?y\257Y\207\252\037\360\277\353\352K\335\202x\313?\007\005_\320O1\346?CT9\370\345 \005@\372\300{\327\250,\335\277=C|\037`i\340\277\353c\246C3\353\272?\014\371\030i!\"\352?B9\340R\241\271\347?\316\222\3364ns\370?\200h\023o\023\352\334?\302\013S \240\312\272\277\214\276\225\3208\310\355?\312azP\304\374\351?\270\256\330\275+5\272\277[$9\3743[\367?RD\355\377\363\301\367?k\256\036\252*\277\333?\372\300{\327\250,\335\277\036\320ul\264\227\002@\360\330\007\246\005K\325\277\327\233fK\253\245\250?\306\243r\002|\332\360\277\316\222\3364ns\370?\265\245\333\360kr\345\277\002%\356:ly\355\277\331\341\215.\350\270\362?G\275\341\265\312\343\244\277\n\375\021\002I\312\344\277K\322\25736%\361\277\363Jj\013g\006\345?\202\326!\237\225\346\345?7\244\t\0134\366\370?\315\212\266\377\n+\360?0w\236\277\261\'\345\2770\220\re4\312\001@\236\006(0\3007\337\277\224\226\271\227\025\031\345?]\223\234\371m\007\362?\217:\3573Z\337\267\277\360\330\007\246\005K\325\277\354U[\020\224\320\251?\007\005_\320O1\346?k5\304CzL\334\277g\360\026\\\342\234\362?\243m>_\363|\310\277\024\364%4Cv\277\277\000\237B\322\034\205\322\277cH\002\254\367\022\350\277Q\205kKP\321\303\277\307d\036\0344\365\322\277p\234\332r\255\221\305\277\204\014\324\351\036\265\360\277\373S\332\025\346V\010@=LyW\326\226\277?\302\031\236S?\345\253\277n\245|\016l\250\350\277q\007\352\245\276\351\263?\207S+l&\304\355\277\365\317\300\246\376J\356?=\313v\206g\246\302\277G(\361\350\333;\303\277q\371\236r\037\317\242?X\265\325\376\371\256\374?\315\212\266\377\n+\360?[$9\3743[\367?\300\002VS\340\007\346\2778\335\272\275\344\323\330?cH\002\254\367\022\350\277\231\002y\311\337\314\306?\2151\362f\232\034\343\277\266\034\214\274\254\205\341?s\020\347r~\254\350?G+\360P\003K\350\277\302V`\253\325L\003\300<\r\312\324\326\232\365?j\351\036[\223\345\362\277\224\227\016e\315\310\326?\336\031\305z=\310\347\277\302V`\253\325L\003\300\005\227P\240\3154\335?\300y\006\037!\033\342?\365A\310o\250\357\321\277\2636x\3631\306\352\277=\313v\206g\246\302\277J%M\035lC\352\277\334\251\014\260Kl\333\277cH\002\254\367\022\350\277\303\341q\206\302z\247?T\371wK!\354\346?\241@\376\301?,\202\277\302\374\262\037I\000\350\277\346\364\347\251A(\324?\302V`\253\325L\003\300\231\215r\230\016\031\316?k5\304CzL\334\277\360P\r?\376\r\343?\034H\243\311\367H\353\277\336\324\362\371\001\372\364\277\024Y7\227\005\260\323\277\372\300{\327\250,\335\277\0178H\266\305\350\376?\363H\300p\367\246\341\277%\266d\234\2138\000@\365\334\266\014\346\265\275\277\364\360\244\010fm\222\277G(\361\350\333;\303\277\017i\3213\023~\326?\315H\343\346\366k\302?G\242\240\034D^\344?B\301\332\271\250\366\331\277M\013a\346\346\002\341?\376\336\353\205\034\032\362?i(sA\333\312\340?\217-\371\315rt\350?\234\204\320\374O\002\353?k\253\037B\003\260\346\277Yv\201\030\262\311\356\277\224\223\272/\356\t\320\277\374o\210\210\342m\367?\224\037\t\314\324\005\351\277\263\252)WK\312\321\277W\364)\345A\224\332?\302vbS\261\"\311?\302V`\253\325L\003\300\334\036\023\341\034 \324\277\223^]\262\034\353\366?\256\312\270\301g\022\311\277k5\304CzL\334\277\302V`\253\325L\003\300;\217F\241\352\356\362\277>\"\230\275\370F\234?G\275\341\265\312\343\244\277>\007\'\241?\223\367?r\335\010\014\341\231\220?\360\330\007\246\005K\325\277\217\263I\232\nR\307\277\341\022\315y\356\020\330\277\224\251\255\315K\242\336\277\336\031\305z=\310\347\277\205V\3177\226\274\306\277k5\304CzL\334\277\306\244\307\3173\212\362?\352:\352^\221\207\377?\031\330\352\376\005\355\336\277 \360\267y\342\322\365?3\374\364ZIl\356\277\233Lt\027W\324\374?\270\241\342WD\312\352?f\272d\021Y\316\327?Q\205kKP\321\303\277.|\354%\221\177\321\277\034\275\251\372\310\374\343\277)\031*,=\371\316?\336\216\313\253\016|\340\277k5\304CzL\334\277\025\256\2563\'\361\231?]\036\226\310\234S\371?\205\263\2237\010\372\243?}v\317\246\207\371\022@n\245|\016l\250\350\277\275\225\234\360\025\273\356?J\232SN=\367\342\277\346\006\207\022\300\001\334\277\302V`\253\325L\003\300\204\014\324\351\036\265\360\2778\334e\360,$\347?A\323v\367\177\000\000@6\375a\311\010\223\002@L\036U\034\035\214\332\277\211\001\343O\250U\366?\n\002\273\004\3408\315?L\036U\034\035\214\332\277f\306\005\252\210\211\265\277\005\014W\321\236\350\325?k5\304CzL\334\277\236\361\211_\032O\342\2773\331\013W\004i\260?\2639w[Y\325\337?\024\3362\226\345\335\260\277\377\262\213\325\n\276\315\277\302V`\253\325L\003\300=\211\243mS\347\364\277=\313v\206g\246\302\277\250c\242\2224\315\337\277\'R\200B6\300\362\277n\245|\016l\250\350\277\302V`\253\325L\003\300\363H\300p\367\246\341\277\373\256\334n*S\325?\017f\322\313\353n\341\277\334\036\023\341\034 \324\277n\247&\251\333\007\354?\346\363\222\334\211x\342?\007\005_\320O1\346?\260\203\227Bt\373\376?f1\025\335\231\341\303?\031M\361/\327\240\327\277\302V`\253\325L\003\300\363(\321\325\342\327\206\277=VpU\226\362\311\277\302V`\253\325L\003\300a\225!\3739H\374?O\031\007\266=4\356\277\250c\242\2224\315\337\277\207\016Y\353\352\365\372\277\327\3470b\177\300\360?\270)\335\276K\007\335\277\341\207\323\252\277\304\320\277\353\370\226\020\"\223\314\277\241\353\346+\203G\344\277s\233\340A\255\370\357?\267?\r\227T5\007@\302V`\253\325L\003\300!<]b\3119\357\277\360\225\337\2779\334\365?\231\020\304\374~\347\307\277=C|\037`i\340\2777\243\264=|F\367\277fs\350\365\255\240\361?\235\273\327\024\221\200\367?\256E\275\302\207\344\333?\317U4\351\225\355\355?\336\324\362\371\001\372\364\277\356\232-&\0314\362\277n\245|\016l\250\350\277>`\177_\0240\001@\341\002\330\253\337\226\303?\200e\024\007\354\332\347\277{\376\375\327\270\225\356?\260>\305\3018-\354?\204\014\324\351\036\265\360\277\205\333\360!\352\n\'@\\o\211\027c\022\337\277\351\353E\016\203\021\341\277\346{\215C\221\265\324\277\265\247\205\213\333\321\350?)\0037\216\337`\300?\241\353\346+\203G\344\277\246\341J_\304\227\353?\260<\033\'\311\315\350\277|5\005\360\371\023\373?$ \307\220\324\231\342\277\336\216\313\253\016|\340\277\341\006,\341\276U\272?\253\323Z]&)\354\277\216\364G\033\302\226\370\277\217\245\376fk7\306?T\263P\375-n\362?J\234\375\350\254V\346?&\245\035,l\336\353\277\217\036Y\315\033\252\265?\244\324\371\\%\026\300?\302V`\253\325L\003\300\312\352\311\204\203\351\355\277\306/\301\236b\326\371?\031QEe\266_\336?[w\326z\263\016\246\277s\205\355\243O`\341?@=\331\353\310a\342\277\321L\222M\327\326\332\277\017\"U\030hP\360?\220d\000\346\263\362\364?G\275\341\265\312\343\244\277\024\3362\226\345\335\260\277\314X\330\264\005\346\326\277fE^\340\207\032\337?\363H\300p\367\246\341\277\022b\3312\304\306\346?\017\364\312\002B\312\335?|5\005\360\371\023\373?\030\215\232\343\3265\367?k5\304CzL\334\277\270\'3$\334\247\311\277oS4\362\3559\361?\376\335\226\270dj\360\277\373\362Y\"\256q\366?\217>Ci9\236\316\277cH\002\254\367\022\350\2770w\236\277\261\'\345\277\314V.\032\226\206\303\277)\237z\370\324\326\355\277cH\002\254\367\022\350\277\036?\001.92\310\277\224\251\255\315K\242\336\277P\307\276\231\277\305\366?\346\006\207\022\300\001\334\277p\'\324A\334\335\314\277\270*2\214\003\267\356\277\334\227mG\315\222\323?:_\022\361T\t\355\277\336\216\313\253\016|\340\277f\266\020\334y\017\321\277\353\370\226\020\"\223\314\277\316\222\3364ns\370?\346\006\207\022\300\001\334\277k5\304CzL\334\277k5\304CzL\334\277\241x\212\225!\363\356?a\330I\341\005\267\333\277\000\\\032\354P\026\363?E\021\244\351\205\203\213\277+\231\327\304=\317\357\277\205V\3177\226\274\306\277F\331w\034\t\031\227\277\231\020\304\374~\347\307\277B9\340R\241\271\347?G\275\341\265\312\343\244\277\256\274m\216\310\367\307?\n{\025k\220\253\274?\202\326!\237\225\346\345?\002\234\236\006\255\214\351?\327@L\346\250\307\336\277\270\031\350\360<\215\310?\244\330M\222\004\325\266?\302V`\253\325L\003\300\306\243r\002|\332\360\277tG\356\212\277*\365?\376h\220\207\223\266\367\277\303\341q\206\302z\247?\\m\337|\363\262\313\277\237\260V\\9\001{\277O\216\r\347\016\350\346\277W\364)\345A\224\332?\000\245@\242k\243\314?u\007E\327\277\225\325\277\302\377\261\207p\017\335?u\007E\327\277\225\325\277G\266\351\0372\227\357\277\302V`\253\325L\003\3005kXX\203\030\351\277\206V\033\243\307\222\022@\215\354\037\346^N\360\277\353_R\016T,\304?\270\027>V\315-\325?\217\243T\314\373\327\322?\360\330\007\246\005K\325\277\275\303&\006<A\361\277\265\245\333\360kr\345\277\017\360v\315b\013\327\277\352\256\233\302\252\213\366\277\354U[\020\224\320\251?\331\260\004\261\232#\353\277\241@\376\301?,\202\277n\247&\251\333\007\354?\253\323Z]&)\354\277$#\306\370\373\250\327?\302\371\263\267!\361\302\2778d`W4a\331\277\\\350\343}\023\205\336?\224\251\255\315K\242\336\277\344\202\205D\340l\344\277@\352k\360{\334\207?\200\357\270\010cw\335\277\236\364\210\307A^\327?\207S+l&\304\355\277\302\206W!\300\234\335\277)\031*,=\371\316?\034JMdg\250\356?}\366\260\t\262.\355\277\200\357\270\010cw\335\277.\007\346\364\277\313\330\277\270\256\330\275+5\272\277\336\324\362\371\001\372\364\277\270\'3$\334\247\311\277\300\002VS\340\007\346\277u\222>\246\356\341\334\277\031\303L.`\004\342\277\365A\310o\250\357\321\277k5\304CzL\334\277k5\304CzL\334\277\221\322>\004\037\210\214?\327+\256\025\003\337\341\277\267\3357\326d\240\363\277\374\344\216\271\263!\360?fD\t\023\320j\355?\305\366\017\354\261\370\351\277\353\370\226\020\"\223\314\277\302V`\253\325L\003\300\302V`\253\325L\003\300p\024\340\013\246T\343\277\310\335x\202\344g\322?\024Z\214d\275_\345\277\331\260\004\261\232#\353\277\354U[\020\224\320\251?{-\335\272\226\313\362?}\342g\006\304\365\341?\262u\314\331y\253\370?G(\361\350\333;\303\277\256Gg]\367C\317?\356\337\377\246T\002\345\277x\276y\275\\\037\370?\353\350\241B\023\031\330?\256Ai\215\250%\325\277\360\330\007\246\005K\325\277\2565\310\364xj\267?f\266\020\334y\017\321\277\2151\362f\232\034\343\277n\245|\016l\250\350\277\300\002VS\340\007\346\277\005\014W\321\236\350\325?\035\366Z\255y\332\363?\\_\224IT\230\312?\343\017)\256~\030\357?\365\315\026\014\217\353\352\277\270\'3$\334\247\311\277\000\030\2358\315\367\321?\2151\362f\232\034\343\277i\370>\221E\345\372?\223^]\262\034\353\366?\320\001B2\250\037\363?B\301\332\271\250\366\331\277\007\005_\320O1\346?\317\310\220\177\367A\343\277\353\372@\253\221\362\337\277U/*\226\252\272\361\2770w\236\277\261\'\345\277@=\331\353\310a\342\2773\331\013W\004i\260?\302V`\253\325L\003\300\250c\242\2224\315\337\277\023\230\213}M\225\361\277&\032$]=\222\344\277\353_R\016T,\304?u\222>\246\356\341\334\277p\031\211\016=\303\313?\365\315\026\014\217\353\352\277fs\350\365\255\240\361?@\352k\360{\334\207?\007\003\2655\340\321\342\277\327\266\247\3441+\351\277.\200@[p>\330?\n{\025k\220\253\274?xy\247<!Q\345?\212:\224\002Y3\326?p\024\340\013\246T\343\277\256\036\026\032Z\245`\277s\233\340A\255\370\357?\302vbS\261\"\311?\302V`\253\325L\003\300\205[x:-+\357?\031\306K\226\207\023\327?\255\201\022A\250\272\364?\253\323Z]&)\354\277\224b\346i%\263s?\227J\357\025\213\223\362?\000\030\2358\315\367\321?k\253\037B\003\260\346\277#\252k\222K6\330\277f\271\017D\241\036\346?0yHZ!\207\350?\353\370\226\020\"\223\314\277\224\251\255\315K\242\336\277{-\335\272\226\313\362?\034\275\251\372\310\374\343\277\224\223\272/\356\t\320\277\263#\204\275\373<\321?\346\177\341xpt\333?\316\222\3364ns\370?\241v\340\372\261\223\353\277\374n3\273*\276\365\277\274F\370\237\007E\360\277\336\324\362\371\001\372\364\277)\023,\\\356\332\324\277\302vbS\261\"\311?\352\215\207\335\020;\256\277f\274\016\254\310-\313?)\0037\216\337`\300?\212\302\216i`p\350\2773p\246\276bp\325\277\314Y-\202\275\225\350\277\326\305G\345\210\365\273\277k5\304CzL\334\277\345F0\306\277\226\373?\220c\253\030\374B\363\277\236{.a\221\353\327\277\353\352K\335\202x\313?!m\346\337\026\317\366?x\325>\310ob\001\300)\027\200\221\315\231\333?\253\323Z]&)\354\277\r\020\336s4e\003@\346{\215C\221\265\324\277\n\374\2744\221\032\323\277\236\177\202\226p\252\336?cH\002\254\367\022\350\277\244\330M\222\004\325\266?B\301\332\271\250\366\331\277H\032\246\265<!\302?\356\341\251A\304a\350?\202\324w\004&\207\342\277\024m\200\232\363\350\316\277\231\213\310\375\236\271\332?0w\236\277\261\'\345\277\302\206W!\300\234\335\277\360\333\006\016-Z\352?\360Qb\014\266\275\324?G+\360P\003K\350\277\310\335x\202\344g\322?\350\0019\254\340\251\357\277\302V`\253\325L\003\300\227\216l\311\016\262\343\277\302\206W!\300\234\335\277k5\304CzL\334\277k5\304CzL\334\277rM\221\276V2\363?\373\337\2604\363\251q\277\275\223\362U\246[\353\277\022\355\322\001\363\022\356?\250c\242\2224\315\337\2775\340^\211T\314\341\277\024m\200\232\363\350\316\277\253\323Z]&)\354\277\007\243\211\017`\234\002@\302\206W!\300\234\335\277\n\227\253\321\316\340\276\277\275\010\371\206w\017\344\277\036;\255\370Ys\261\277\022b\3312\304\306\346?\241\353\346+\203G\344\277K\322\25736%\361\277\251\334\374\370\344?\337?0\004B)P\323\357?k\253\037B\003\260\346\277Q\205kKP\321\303\277=\315 !\327\005\326\277\353\177<\252q \275\277\205\301\336j\247\024\265?\n\201\2703qH\260\277k5\304CzL\334\277p\214\345\244\236\027\321?\236{.a\221\353\327\277\034y,GE\336\362?\224\251\255\315K\242\336\277\205Xy\322\005\034\332\277\024\3440f4\374\332\277\007\005_\320O1\346?\353s\233\021Be\337?\356\341\251A\304a\350?\241\353\346+\203G\344\277\312\326\200\201\225\260\342?\276A\2529(\355\363?+?gs\\\030\360?\250c\242\2224\315\337\277!<]b\3119\357\277\260Q\3661\032L\001@\273\016\234\272\016\027\342\277b\022PanD\375?\244\\\364\303,S\342?G\245\237\204km\311?T\202\307\177\340\330\352\277aQ\244G\266)\333?\275Ou\242\"=\372?\n\002\273\004\3408\315?\327@L\346\250\307\336\277G\263\352\267\n\210\312\277\314X\330\264\005\346\326\277v\232\243\025\375\277\000@\331\260\004\261\232#\353\277\236\177\202\226p\252\336?\264\344/\327\263W\363?\302V`\253\325L\003\300\37504\242\232\210\351\277\224\227\016e\315\310\326?\"\352\024FK\313\367?y\257Y\207\252\037\360\277\364\360\244\010fm\222\277\035\366Z\255y\332\363?\2636x\3631\306\352\277\303\341q\206\302z\247?\336\216\313\253\016|\340\277\302vbS\261\"\311?\035\200\377\256\360v\371\277\021\000\004r\3241\003@\343\017)\256~\030\357?\227\220\026d~\021\347?\346\364\347\251A(\324?k5\304CzL\334\277\373\337\2604\363\251q\277L\224\260\032\246\357\344\277G\245\237\204km\311?q\007\352\245\276\351\263?Z\256\335\375\252\367\374\277\356\341\251A\304a\350?cH\002\254\367\022\350\277\363(\321\325\342\327\206\277+\020\210\220~\342\353?@\352k\360{\334\207?\324\274J\030\3112\347\277\244\240qw\260q\363\277\204\014\324\351\036\265\360\277\327@L\346\250\307\336\277tG\356\212\277*\365?dJ\254Fgr\353?\360\330\007\246\005K\325\277\346{\215C\221\265\324\277\221\322>\004\037\210\214?\360\330\007\246\005K\325\277G\245\237\204km\311?\257{o\r\021\263\366?\302vbS\261\"\311?L\223[M\356?\323\277\214\276\225\3208\310\355?$ \307\220\324\231\342\277\005\227P\240\3154\335?K\323\004\001\356\324\362?\232{\323/\220?\266?\336\324\362\371\001\372\364\277\206\007\206\203?]\364?\022\355\322\001\363\022\356?\214\276\225\3208\310\355?\251k\007\002C\253\003@\031M\361/\327\240\327\277U\272#e\331\006\371\277\317\310\220\177\367A\343\277\275\007\244\271\277_\322\277B\301\332\271\250\366\331\277\006B\t\034(\267\360?\262u\314\331y\253\370?i>f\3378c\357?\265\245\333\360kr\345\277\300\002VS\340\007\346\277q\007\352\245\276\351\263?\317\312:\032g\241\346?\256E\275\302\207\344\333?\024\3362\226\345\335\260\277\244]I\221\344\002\324?\270\216\356!\016A\301?\275\010\371\206w\017\344\277\3752\336<\n\350\354?\322\301\230~\250\212\323\277\250c\242\2224\315\337\277\307d\036\0344\365\322\277k5\304CzL\334\277O\216\r\347\016\350\346\277\370\307s\330\367\343\354\277)[\375DQ\270\374?oS4\362\3559\361?\222%\254\377k\r\347\277!<]b\3119\357\277\360Qb\014\266\275\324?\336\220uF~\333\343?\353_R\016T,\304?3`\261\360S\366\300?Wi0\026\023H\323?\341\207\323\252\277\304\320\277\\\026n\2239\013\361?\302V`\253\325L\003\300\253\323Z]&)\354\277\336\216\313\253\016|\340\277\236\3604\222b\237\320\277\365U\021s\226(\315\277G\265\224Rz\347\335\277)\023,\\\356\332\324\277+\203\344&\3406\341\277u\013\231\014\237T\334?\370\263*\325\t\253\341?G\275\341\265\312\343\244\277\300\002VS\340\007\346\277\036;\255\370Ys\261\277\237\0006fP\212\023@\234\371\326-!\266\343?\024m\200\232\363\350\316\277\357\030\261Y\005\340\364?\224\"\0104\374\024\336?\\o\211\027c\022\337\277\034JMdg\250\356?i\261\302u\232\267\344\277\024\364%4Cv\277\277\273\016\234\272\016\027\342\277"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_19"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 1167
              }
            }
            tensor_content: "_\215\311\216\367a&@\007z*\200\006\342\'@s\036:\013-N\'@\\/&\266\014\364\'@\2722\303QY\255&@[\\\364\003\272v&@\367\354u\376]L)@\261\021\na\305a(@\355\022 \271\233\027)@\3760\271\276\333\304\'@\3760\271\276\333\304\'@U\375\267\013\213\033(@fcT\307\227A(@\035G\027\202&\214(@3\304j\225\013\014)@!\362\n\376\346\003(@\272=i\263l=(@~\354\262$\324a\'@3.7/Q\233\'@\035e\321\251\025\250(@\023=*\211A\037(@\302@\321`}\202(@Q\215\263\210\252\251\'@\377\344\367\237\311j(@\353u\273\273\233T(@\333X\262\234[\343\'@\244\177!\264\3076(@_\334\001(\211\266\'@eG\353\263f6(@^m\364lM\031(@\361\026\370\226\376\200\'@s\262\271\246\013\035)@\354\264\347\345\213\\(@\211\240a\243\033\243\'@)yU\234\002\205\'@-8^H\357Q(@\002\235\336u\263\226\'@\375\274\247\236$\231(@\314\260\201K\206\253\'@\314\245:\321\005\367&@\223\000R\354\361K\'@\212\\)\335&v(@\026\231\372:\023\001&@yE\033ou\342(@n\001\344\233\356\247)@\253\376\027@\272\363\'@UQD|h\263&@\361\026\370\226\376\200\'@zx\306Y\353\n*@_\212T\026m0(@\311[q\366\326\357(@\235\337\233\010\360\346&@s\036:\013-N\'@z/\340v\357\017(@eG\353\263f6(@\311[q\366\326\357(@^m\364lM\031(@\030\200\207\242[|(@\257\343\213\274\301\020\'@\334H[a\245+\'@\200\034C\332\350D&@\234\256\221\254w)(@\236[\277\022TU)@96\266\251)\003)@*\253\357?\275\364(@\267!t\3317\315(@S\252H\246\2752\'@}\347N\001\222A)@\302@\321`}\202(@\037\\f\372\016((@\223\230#\3340y)@[)w#ux\'@\020r\347D\3072\'@\271E\314\317\257\335%@/*[:\230Y(@1\306\217\325\026b)@(\013\271\370\021\321\'@\233\222\306yE\240\'@_\334\001(\211\266\'@[)w#ux\'@+8\233y\\[\'@g\010\\\305\2229&@~\301\341y1E\'@\236\352k\022\004\330&@A,\031\247\201\324\'@\346w\017$\241\230\'@\205\033\377S\205\373(@\341\2016=?O(@\323n\337\262\320v\'@Bg\227\014\226\")@\3600\243\270\216\014)@U\177\357\361l2(@\323n\337\262\320v\'@\037\206\023\250\317:)@\362\252\300\314\355\245\'@\221\343s{B\367\'@\212\\)\335&v(@C{5p\003\217(@\255\007\'\351\346u(@\311[q\366\326\357(@H\336\363\340\337\325\'@\2729-\013T\373(@\024}0\"R\317(@B\265\334\351\303\224\'@\335\204\204V\2142\'@\324\016\312v\'\272\'@\220\272\347\306\342\343(@b\270\2609\302\333(@\203N\033\316\002\241&@\235\324\250\356\277\')@\221\343s{B\367\'@\345\221\313>\301t\'@\214p\320\023\252C(@\227\331Lb\244@\'@\203\335\'\350\363\212(@\372\352\014\223\256_\'@\010e=\020V\277(@:\244\377\234\001\207\'@K\\,0\322\323\'@s\262\271\246\013\035)@\346w\017$\241\230\'@g\363\325\214\312\322\'@\367\206\335@\312\305(@\217\255\347j\037{(@h\256\211 $%(@O\005y\351\215\214\'@\347\201\343\020\3048)@\275\2136\206(\221&@\255\372K\322\032d(@*\270\201\306\362\214\'@\206>S\341\023D(@\375KF\211X\244)@b\273H\226`\310\'@\301Mc\347\262\032\'@~\003\031\032Ss&@\253\037\373\310\003\007(@~\347UZO\364(@\237HK\230\356\215\'@\354\237\331M\345I)@\221\343s{B\367\'@\273\255\270\3519\320)@B\265\334\351\303\224\'@\352\350\216\010\330-(@\352\350\216\010\330-(@\3760\271\276\333\304\'@.\366\361\363l\")@\266\361\231\313\345\345(@\022\242\366{\304\'(@\353x\365\340j\300(@g\010\\\305\2229&@Y\326\262\201=\020(@M\374\351\035\001\347\'@\303\017l\251\032k(@X\303\000\3774\"(@2(\250\232\005.\'@\213\212\025\315\014\244\'@\373\360G\364\370\332\'@\377CkA\344\262\'@s\336<\202e\271&@\035\323Z\366D\026(@\336=\310\263G3(@\246\317\r\204\031\367\'@n\026j\324\266\016(@\253\037\373\310\003\007(@L\325\005\261\206]\'@\363fh\334-\262(@\035\220\242T\270\304(@kTq{j\016)@s\036:\013-N\'@\235t=\311m\306(@\026\335?\272t\226)@\315p\204\302\276\026\'@\026\231\372:\023\001&@\372\377\3433\236\331\'@\035\220\242T\270\304(@\331\200\307\326\034\236\'@~\301\341y1E\'@\333(\330\216\t\374\'@\3564\001\231\365*(@\3076\252G\337\313\'@\362M8\326\241\225(@\343\215\346=_G(@x\027\030^\377\334\'@\233\222\306yE\240\'@\356\233\325\375\026\303\'@\377CkA\344\262\'@\007RyP\010\210)@Q\264=\270\263\324(@eG\353\263f6(@fcT\307\227A(@m\244b\007\206n\'@\005J\272\347/Y\'@\243\312\201\325!q(@|\034w\356\351\216\'@\341\2016=?O(@\340\243ni\320\245(@\352\350\216\010\330-(@S\234\224\033z1%@5\033\240*\306\035(@s\036:\013-N\'@\236\347Zq\310\025)@h\256\211 $%(@\3076\252G\337\313\'@\204=7\200\026R)@\315\022\036\263H1(@-8^H\357Q(@\200\270v\312*\305&@\350\"\225\251j7\'@\377CkA\344\262\'@\364\3643\254L\026(@\340\243ni\320\245(@\230c\rM\034\037\'@7p\205\321\313\210\'@\204J\311\006L\352\'@\331\264hA\014\312(@*\253\357?\275\364(@3\246S\274qZ(@\221\343s{B\367\'@*\270\201\306\362\214\'@\267a\202\226\263\347(@\3600\243\270\216\014)@\231\243\323c\202<)@\301-\037\336t\224(@\036\212\342l\277;(@\3564\001\231\365*(@M\374\351\035\001\347\'@6\333\242\241\376\210\'@\2277\263q\032&&@\214\251\253=\250\365\'@\"\252s\267\316\267%@s\036:\013-N\'@&C\311\213\337\010(@\265<\352j\367c\'@F\367\306g\243\361$@\207\306\204\331N\232(@\350\353\325\206F\342\'@\222\331\002}\230](@\206\021\')wH(@Vi\302\205D\020)@gL\241D\364\316)@2h\257\340\367#\'@\025?wX\033\313(@\260>hb;[(@\240\216\361\032\307\373)@X\303\000\3774\"(@\334H[a\245+\'@\253\037\373\310\003\007(@\372\352\014\223\256_\'@O\005y\351\215\214\'@s\036:\013-N\'@\312\333\212\251@\276(@\260>hb;[(@\3760\271\276\333\304\'@\235\324\250\356\277\')@)|\217\301\321\360\'@\221\346\255\240\021c(@~\354\262$\324a\'@\001\016\362B\302\256)@\037\\f\372\016((@S\267M\346{\263)@6\333\242\241\376\210\'@\001d\331)\337\220\'@Tl7@\317\205\'@\3600\243\270\216\014)@u\035\372m\372L)@\3760\271\276\333\304\'@\007z*\200\006\342\'@\361\026\370\226\376\200\'@\364k\310\013\227\003(@w9P\212\2203(@\364\3643\254L\026(@h\256\211 $%(@\223 \345\350PA(@UQD|h\263&@\002\235\336u\263\226\'@\022\202,\262I\034(@\025?wX\033\313(@\303\215\002\n\nW)@\2670tE\277\275\'@\346w\017$\241\230\'@96\266\251)\003)@\n\264\033,\355\333&@\354\264\347\345\213\\(@\231\243\323c\202<)@\307\256\250(\3663)@W\206~\214\377\025(@\022\302);\021\261(@/6\372\252\247\315&@?,\217\220\213L(@\022\242\366{\304\'(@\226\207\037\336\204x(@\2670tE\277\275\'@\3760\271\276\333\304\'@\300\225\372-\313f)@,o\317\365\361\334(@sW8\020\016/*@\361\026\370\226\376\200\'@H\336\363\340\337\325\'@X\303\000\3774\"(@\"\255\302G\351z\'@i\240\245\025\232&(@}o\252\255\303\002)@6\333\242\241\376\210\'@)\360;\254c\242(@)yU\234\002\205\'@\212\\)\335&v(@\313\"\317\030\002N)@\372M\222Z\202i(@\362\225\2624G\223(@\303\024\301\t\336x\'@-\203\004T%\322(@\251W\013\\\321>(@b\003\355p`\364&@\3076\252G\337\313\'@\362?\204K^\224&@\254\023\363\226L\216(@\034\323\030\241\326\337(@\265\301dA\025\006(@\372/9\232\322\266(@\311\n\232\360?\302&@kI*\001\352Y(@i\020\213\023\376\323\'@\017\3171\253P\301\'@\005:D(F\374&@\001\247\334\240DW(@\035\247\010J7\326\'@v\233\207(7h\'@Zy\230\316%I(@\245O;%[\377(@\375\3705\350W\317\'@M\313$>{\341\'@\210\206\332\236Y\345\'@\312\333\212\251@\276(@\216\215\205mcy(@b\273H\226`\310\'@\000\227,\212\371~\'@*\270\201\306\362\214\'@~\301\341y1E\'@\212\330\237\221\355\215&@v\331@\362ml\'@1\306\217\325\026b)@\202m&+\031G(@+8\233y\\[\'@\221\343s{B\367\'@\037\\f\372\016((@\354\237\331M\345I)@ \021\026[\375\251)@[\252\242*\236\006\'@x\027\030^\377\334\'@~\301\341y1E\'@1\306\217\325\026b)@\200%&m#\262)@\377\223\221e[1)@g\363\325\214\312\322\'@!\232\277h\023\270(@\253\331\273\177O\333\'@\3760\271\276\333\304\'@V_\346])D&@\r\245\323\313\322\n+@\377CkA\344\262\'@:\244\377\234\001\207\'@\265<\352j\367c\'@\0215\376b\346R)@\236\260\216\326\257\344\'@\304\364\261\234\335\025%@\016B\005\370\214\232\'@\2322\300\226s$\'@#\235\3410\231\037\'@U\201\036\212\272\232&@\225\227S\033\025\234\'@\017\3171\253P\301\'@\r\360#)z\035(@*\270\201\306\362\214\'@\352\350\216\010\330-(@\302R\220\312\300\006)@\341\";%\212c\'@\274\r\233[\324R\'@\341\2016=?O(@{\317\031\331\317\265&@\212\\)\335&v(@\006\254K\365v\234\'@UQD|h\263&@fcT\307\227A(@\3760\271\276\333\304\'@x\027\030^\377\334\'@{\354J\221\211\216(@\350\"\225\251j7\'@\354wk\317\273 (@\223\230#\3340y)@\\/&\266\014\364\'@\265<\352j\367c\'@\005J\272\347/Y\'@)yU\234\002\205\'@\346\203\257\252\310Q)@\001d\331)\337\220\'@\365\010\233\374n\004*@o\351\n\333J0\'@M\374\351\035\001\347\'@<y\350Ug,(@:\244\377\234\001\207\'@h\256\211 $%(@\255\372K\322\032d(@\324\016\312v\'\272\'@\3760\271\276\333\304\'@\3076\252G\337\313\'@s\036:\013-N\'@w9P\212\2203(@\035\247\010J7\326\'@T\340\331\232\333\306(@\336=\310\263G3(@\037\3002\n\315\247\'@\277\311\004=i\266&@.\366\361\363l\")@\203\213\316\014_\014)@M\374\351\035\001\347\'@\212\265\247\2025\306)@\377CkA\344\262\'@\2035\273n\245\327(@\017\3171\253P\301\'@kY-\256\371\212\'@SS\255\347\027\240(@\240\007\311Y\303\363(@\030\200\207\242[|(@h\256\211 $%(@\233\222\306yE\240\'@w\353\241c\254\243\'@M\374\351\035\001\347\'@\364\3643\254L\026(@\2312\267\341\"\331&@\221\364X\254\266\365(@Y\334\rA\004\025&@\035\247\010J7\326\'@\333X\262\234[\343\'@Y\205\323\2528\257\'@\331\2034\\\250}\'@Z\"q2c\260&@\350\"\225\251j7\'@n\026j\324\266\016(@X\303\000\3774\"(@\3760\271\276\333\304\'@N\325\220\357\211u*@\240\261\341r\246\021+@9\326\257\306W\207(@\233\222\306yE\240\'@\225Xg\231\206\262\'@\233\222\306yE\240\'@\017\3171\253P\301\'@\344ukb\262\345(@\221\343s{B\367\'@\341\2016=?O(@A\000\1779\354B\'@\251W\013\\\321>(@\022\302);\021\261(@\265\212\\\374\230\210\'@q\340\361\333Z\340\'@\r\272Y\004\233q)@1\306\217\325\026b)@\266\024\377\244\323N)@\r\272Y\004\233q)@~\243\'RB)\'@j\306\276H\346\260*@\211\357\302\026\251\322&@\n\221j\324(\320(@\035G\027\202&\214(@\030~\204\251Sj\'@\006\022\343\233\265\302)@\341\2016=?O(@\361\026\370\226\376\200\'@\026\231\372:\023\001&@M\374\351\035\001\347\'@L\325\005\261\206]\'@\206\024\277\205\0255\'@\350\"\225\251j7\'@/\225\250\334\007\"\'@\242\350(\315@i(@\007z*\200\006\342\'@\352\350\216\010\330-(@\257\343\213\274\301\020\'@\372\352\014\223\256_\'@{\354J\221\211\216(@\226\0130\226\300\211(@\027N\252\233\001\203\'@Q\215\263\210\252\251\'@\3076\252G\337\313\'@\235\324\250\356\277\')@\204J\311\006L\352\'@\364\3643\254L\026(@\014|\013\231\037\244&@M\374\351\035\001\347\'@\250\230M\245\351!(@]\217,\231\336o(@\rBd\037_\236\'@\247\243?\366\000W\'@\204=7\200\026R)@Q\215\263\210\252\251\'@WB\322\236\351\367(@\230\216\374\302\222\302(@B\336F\r[\354&@\307\265\332\037\3744(@eG\353\263f6(@l\001\263\026\207@*@\200\270v\312*\305&@\227\331Lb\244@\'@\333(\330\216\t\374\'@\177\353\"\374.\r(@\036v`\211\275\305\'@l\026\r_G\331\'@\224\242\271X\234\315\'@\225\216\027\t\030]\'@\310\250\261\024\020l(@\2476\247\214\371B(@UQD|h\263&@nH\373U2h)@o\277/\214\346\346(@D\032\304\005\303\021(@^m\364lM\031(@\300|Ww\006\351)@\233\222\306yE\240\'@\243\332\366!5\270(@\376\003\325\214\221\355\'@\374\005c\037P\274\'@\215\274]\300\260\343\'@\253f\232_\2342(@\035\220\242T\270\304(@x\027\030^\377\334\'@<\203\2138\324I(@\027\270\002\"s\372\'@eG\353\263f6(@\217\255\347j\037{(@\3600\243\270\216\014)@\370(\303\332\034\022)@\206\024\277\205\0255\'@)\000\031\r\013\331)@z-\332dX\215(@\311[q\366\326\357(@\300\356;\t\203\211(@b\270\2609\302\333(@\017\3171\253P\301\'@{\354J\221\211\216(@\037\\f\372\016((@\004\333\254,\364\273\'@\323\367\3177\016\005)@\343\3116\3734\344&@\022\302);\021\261(@\377CkA\344\262\'@?,\217\220\213L(@}/)q\362|\'@}\202\352Ee\264(@\247\243?\366\000W\'@\223$>tC\315\'@\220\224\350\255}\272)@\037\\f\372\016((@~\371\257r\320x)@\271\037\021\317P\277&@\377\267\317\342o\362\'@\345\231GP2\357\'@\226\0130\226\300\211(@?,\217\220\213L(@\244\355\251\027\024\274(@\364\3643\254L\026(@\330G\357\314\345\351(@\215?\305-\373%)@0\207c\253&Z)@\377CkA\344\262\'@?,\217\220\213L(@3\026g\262 \312\'@\215\330\360\310\331\215)@\2670tE\277\275\'@w9P\212\2203(@\367f\360.\031\205)@|\034w\356\351\216\'@\203N\033\316\002\241&@^\317:VZ\212(@\212\330\237\221\355\215&@\2670tE\277\275\'@X\372\226E\373T(@\343\3116\3734\344&@\3760\271\276\333\304\'@\244\3353X*_(@wyW\320\202)(@s\336<\202e\271&@\334H[a\245+\'@\272BnY\344\237\'@\375\3705\350W\317\'@\352\350\216\010\330-(@\3432\251\343t\000(@\206\021\')wH(@\372\377\3433\236\331\'@5\033\240*\306\035(@Y\205\323\2528\257\'@2(\250\232\005.\'@\221\346\255\240\021c(@\337\246\006\306n\222\'@X\303\000\3774\"(@\334\317\201\200\366K\'@\2322\300\226s$\'@\2670tE\277\275\'@\272BnY\344\237\'@0\207c\253&Z)@\227\331Lb\244@\'@w9P\212\2203(@/\256Z\255T\326&@\362Pi|\322\222\'@\035G\027\202&\214(@\247\2161^ZD(@Y\205\323\2528\257\'@w9P\212\2203(@<\203\2138\324I(@\023=*\211A\037(@\037n\r\356D\201(@\311[q\366\326\357(@\220\325\031C\314n)@\316QJ\33589(@\242A\253\021\316\256\'@\345\221\313>\301t\'@\372\352\014\223\256_\'@\242\240\324\210iu)@\230c\rM\034\037\'@\365&|\237\360U(@Y\205\323\2528\257\'@[\206\215o\265\262\'@\252(\336\233\247e(@)\360;\254c\242(@\246\035\032\260\352D)@B\265\334\351\303\224\'@\010\000P\306\034\364%@\356Xf\023\022_\'@\261\021\na\305a(@#TNc.\236\'@6\333\242\241\376\210\'@\020\204\341\013?C)@\266\361\231\313\345\345(@\271\037\021\317P\277&@\340\243ni\320\245(@\n\232\354\372\244\306(@\356\233\325\375\026\303\'@8)\'\343z\007(@4T\340\007*\242\'@\030\200\207\242[|(@\215\023\331N\200\350(@\336C\276\220\250\256)@\276\351\r\321\254\244(@3\2011\330$\333(@[\252\242*\236\006\'@\234\341T|\340\371)@\307\265\332\037\3744(@fcT\307\227A(@\204J\311\006L\352\'@w9P\212\2203(@\206\024\277\205\0255\'@\377CkA\344\262\'@fcT\307\227A(@!R\254\327\014<\'@\027N\252\233\001\203\'@Es\375\263\375Y)@\361\026\370\226\376\200\'@\361V\326\210\346@(@\233\222\306yE\240\'@\362\225\2624G\223(@8\326\246\021\007<(@9\326\257\306W\207(@\035\257A\np(%@\372\377\3433\236\331\'@\310aY\317\367/(@0\212\235\320\365\305)@\256\234?m~\031*@\"\255\302G\351z\'@T\340\331\232\333\306(@)|\217\301\321\360\'@\026\247\256\305V\002(@6\333\242\241\376\210\'@\253\037\373\310\003\007(@\361\026\370\226\376\200\'@\241\3314\235\267\255(@\236\347Zq\310\025)@FG/&\345\271(@~\243\'RB)\'@\000\233\346\317\263\267(@\265<\352j\367c\'@\247\243?\366\000W\'@i\016\370Tm\247\'@\017\3171\253P\301\'@\212\330\237\221\355\215&@\350\"\225\251j7\'@\017\3171\253P\301\'@\350\"\225\251j7\'@1\244A\034\326\256(@Q\215\263\210\252\251\'@X\343\355\020\346b\'@\277\324\332\305~\360\'@z\030\314\314\261z)@\372M\222Z\202i(@^m\364lM\031(@h\256\211 $%(@\370\327\010\301\227X(@\010\353A.v\341&@b\270\2609\302\333(@\2035\273n\245\327(@I\177\245y\206\324%@-\216t\203\251c)@\027N\252\233\001\203\'@w9P\212\2203(@]\000 %\322\315&@\341\2016=?O(@M\344>#\243\024\'@\353u\273\273\233T(@\314\002\300\253\001\353&@z/\340v\357\017(@\340\243ni\320\245(@\353#\266\300\331\245*@\276\027\230\352\206_\'@U\201\036\212\272\232&@\026\247\256\305V\002(@*\270\201\306\362\214\'@\247\243?\366\000W\'@\014|\013\231\037\244&@\212\\)\335&v(@\327\023\264\330\271\240)@Y\326\262\201=\020(@-8^H\357Q(@]\000 %\322\315&@!\362\n\376\346\003(@\250\037\335\361#2(@\235\217\2264\024C)@M\374\351\035\001\347\'@>9\350\206\254\346\'@\316\227\202\216\344\352(@Vi\302\205D\020)@\204\351\024\363\332\301\'@\221\343s{B\367\'@kY-\256\371\212\'@\264\247&\354\206u(@\372M\222Z\202i(@\361\343S_\220\010(@M\374\351\035\001\347\'@~\354\262$\324a\'@\027N\252\233\001\203\'@\214\251\253=\250\365\'@_\334\001(\211\266\'@\212\\)\335&v(@\346w\017$\241\230\'@$_#\030\2759\'@\361\026\370\226\376\200\'@D\032\304\005\303\021(@M\374\351\035\001\347\'@\014HR7j\321(@\310\034E\314\346\347(@G\324\037\364\2745&@\271\037\021\317P\277&@\237:\034\272\335\341(@K\25091\316\262&@\226\306\232\337\233R\'@\317\341\263\240\262\245)@\263\320 p\354\366\'@\362Pi|\322\222\'@6}<\222\210\243(@Y\326\262\201=\020(@\017\3171\253P\301\'@A,\031\247\201\324\'@\2670tE\277\275\'@@\276G\231\312\024(@L\325\005\261\206]\'@\340\177X/\214-\'@\376\003\325\214\221\355\'@4T\340\007*\242\'@]\217,\231\336o(@fcT\307\227A(@\035\220\242T\270\304(@\373\322\025\346\360V)@\314\245:\321\005\367&@*\270\201\306\362\214\'@\311[q\366\326\357(@EK\201\355\233p\'@0\207c\253&Z)@h\256\211 $%(@\322<\002\254v}&@\346w\017$\241\230\'@+8\233y\\[\'@\265<\352j\367c\'@omW&A2(@\022\302);\021\261(@\377CkA\344\262\'@5\257\037\306\244\354)@\255\372K\322\032d(@\023=*\211A\037(@2(\250\232\005.\'@f\332\231w\303.)@\220R\002\304\210\277\'@[\257FI\217\366(@\233\222\306yE\240\'@S\362\302\004c0\'@\303\024\301\t\336x\'@\250h\332\002\253\251(@\350\"\225\251j7\'@\341\2016=?O(@{\354J\221\211\216(@\206\021\')wH(@*.\005\375\360\006)@5\033\240*\306\035(@\"\255\302G\351z\'@\021\354%\251\257r\'@\233\222\306yE\240\'@\344\347\336\334z\251\'@\253\037\373\310\003\007(@\361\026\370\226\376\200\'@Z\"q2c\260&@\372M\222Z\202i(@6}<\222\210\243(@\370\327\010\301\227X(@{\354J\221\211\216(@\006\254K\365v\234\'@\361\343S_\220\010(@}/)q\362|\'@\345\246\331\326g\207&@\346<=S\'-)@\226\3521\223\030?(@H\336\363\340\337\325\'@}\202\352Ee\264(@?,\217\220\213L(@\303\024\301\t\336x\'@kI*\001\352Y(@\206\021\')wH(@\260\025i\303\033\n(@\037\\f\372\016((@\336=\310\263G3(@\252#\034x\375\033(@R\261\317*\351\340&@\213\212\025\315\014\244\'@\307\003\252\026\025t*@)yU\234\002\205\'@\244\355\251\027\024\274(@\235\324\250\356\277\')@e-d\257\244x(@\303\024\301\t\336x\'@\352\350\216\010\330-(@\307\265\332\037\3744(@3(E\3156\341(@\350\"\225\251j7\'@_\334\001(\211\266\'@\226\306\232\337\233R\'@b\270\2609\302\333(@fcT\307\227A(@\003\357\016\317\271\030\'@T\340\331\232\333\306(@~\301\341y1E\'@\342J\t%\226\245(@\207\306\204\331N\232(@\276X\243\372\367\351\'@\312\347\247M\017\261\'@\236\347Zq\310\025)@\377CkA\344\262\'@\245\246E\000T~(@\2670tE\277\275\'@\3076\252G\337\313\'@\303\024\301\t\336x\'@\345\231GP2\357\'@U\201\036\212\272\232&@\034\2029\312\321~(@\204J\311\006L\352\'@fcT\307\227A(@\021ry\2237\247&@\002\235\336u\263\226\'@\315\177B=\272E(@\304`?Ix`(@\010\353A.v\341&@\037\3002\n\315\247\'@EK\201\355\233p\'@\001d\331)\337\220\'@\035\220\242T\270\304(@\350\"\225\251j7\'@Z\"q2c\260&@\341\2016=?O(@h\256\211 $%(@X\303\000\3774\"(@6\333\242\241\376\210\'@\004\372\255s\3636\'@\330\225`Z\254\320&@p7\230\337\303i(@d\316r\335\001?)@\303\024\301\t\336x\'@Y\205\323\2528\257\'@:\024~}\230\254(@\244\355\251\027\024\274(@\340\243ni\320\245(@\264/LD9\215*@\024}0\"R\317(@\376\003\325\214\221\355\'@\261\021\na\305a(@\223\310\375\351\202`)@\323\367\3177\016\005)@\377CkA\344\262\'@\265<\352j\367c\'@\233\222\306yE\240\'@\353x\365\340j\300(@\341\2016=?O(@;\327\205\332\244\353$@<y\350Ug,(@]\217,\231\336o(@{\354J\221\211\216(@x\027\030^\377\334\'@\030\200\207\242[|(@)|\217\301\321\360\'@*\270\201\306\362\214\'@\243~\234\\\330\036)@I\177\245y\206\324%@\3076\252G\337\313\'@:\024~}\230\254(@\340uM@\022c)@-8^H\357Q(@\216\352\204S\305\000(@\3168\230\014\354\204(@\001\247\334\240DW(@\205\341\373\342\220V\'@\200\270v\312*\305&@\346w\017$\241\230\'@\224\243\300Q\201\304\'@x\024\023\362\216\227&@\037\3002\n\315\247\'@b\003\355p`\364&@g\363\325\214\312\322\'@\352\247\0305\331$(@\224\026!\331\030\222(@SS\255\347\027\240(@\336A\207L\324\374\'@\207\306\204\331N\232(@\354\001(\004\305\330\'@\375\274\247\236$\231(@\336=\310\263G3(@\253\037\373\310\003\007(@\350\217DLc$*@\364\3643\254L\026(@\r\272Y\004\233q)@s\036:\013-N\'@S\252H\246\2752\'@*\350\010\224\256T)@\2670tE\277\275\'@\263\203\364z\300\017\'@\2269S/\031\033)@!\362\n\376\346\003(@b\270\2609\302\333(@|2bR1p\'@\215\274]\300\260\343\'@\244\3353X*_(@\362\252\300\314\355\245\'@\362?\204K^\224&@[\252\242*\236\006\'@\341\2016=?O(@\\/&\266\014\364\'@\323n\337\262\320v\'@\362Pi|\322\222\'@\245\010?YX\252(@\331s(.\033z&@2(\250\232\005.\'@\376\003\325\214\221\355\'@\215\274]\300\260\343\'@<\203\2138\324I(@\303\027Yf|e&@/\256Z\255T\326&@>\311\302\266k!(@\240\210\237`\247\351&@\302@\321`}\202(@6\333\242\241\376\210\'@\375\3705\350W\317\'@\3168\230\014\354\204(@\\/&\266\014\364\'@\364$\016\272\236\375\'@\002\235\336u\263\226\'@\203N\033\316\002\241&@\233\222\306yE\240\'@\362\252\300\314\355\245\'@+M\233m\214X)@\351\334U`\266\013\'@\035G\027\202&\214(@\235\324\250\356\277\')@\243~\234\\\330\036)@\226\306\232\337\233R\'@\261\021\na\305a(@#\235\3410\231\037\'@8\227S\350\235\337)@\371\305`bG\023(@\220\271\341 Y\270\'@B\265\334\351\303\224\'@\260R\275Q\301\351\'@\3760\271\276\333\304\'@\216\352\204S\305\000(@M\374\351\035\001\347\'@\350\"\225\251j7\'@\371\305`bG\023(@F&\036\025\340z(@\242\350(\315@i(@kY-\256\371\212\'@b\273H\226`\310\'@C\201#\210\016\302)@\374\243\017U\2660(@\251W\013\\\321>(@wyW\320\202)(@\005:D(F\374&@\371\305`bG\023(@[\252\242*\236\006\'@(\013\271\370\021\321\'@\027N\252\233\001\203\'@pr\225j\030f\'@\350\"\225\251j7\'@\324\016\312v\'\272\'@\3275Q\302\211\t&@\300\365\233\007\361\236(@\267\222ge++\'@\321\313\227\312\351\220(@Y\205\323\2528\257\'@~\301\341y1E\'@\224\312k\317\324\270)@(\013\271\370\021\321\'@s\036:\013-N\'@\3119#=\226<(@\3269\220\250\332\356(@\035\220\242T\270\304(@_\334\001(\211\266\'@\377CkA\344\262\'@\210\020\354\307\006\310\'@\303\002\023H\241\234(@\221\343s{B\367\'@ \034\274\277\031s\'@T\340\331\232\333\306(@\rBd\037_\236\'@s\031\375\t\377\027)@\204\010M\321|\r)@*\270\201\306\362\214\'@\324\276\217Z\252\200)@EK\201\355\233p\'@\315\022\036\263H1(@_\334\001(\211\266\'@\021\235\277Uw\230(@\001\247\334\240DW(@{\255\363\027\302[(@{\354J\221\211\216(@0\207c\253&Z)@\377CkA\344\262\'@\022\302);\021\261(@\207\306\204\331N\232(@\366I)}\271\256(@#\235\3410\231\037\'@\362?\204K^\224&@(3\\\262\014\320)@\245\010?YX\252(@\256\327\276\266\344\222(@w9P\212\2203(@[\252\242*\236\006\'@\214\251\253=\250\365\'@\035\247\010J7\326\'@\022\302);\021\261(@\023=*\211A\037(@\354\264\347\345\213\\(@\014V(@\341p(@\227\206=Z\272\223&@&jt\t3\375)@~\243\'RB)\'@\220R\002\304\210\277\'@\245\010?YX\252(@[\252\242*\236\006\'@\336=\310\263G3(@\225\227S\033\025\234\'@T\340\331\232\333\306(@KE\237\330\363\312&@\362\252\300\314\355\245\'@\244\355\251\027\024\274(@,\222\373\032\212>(@\216\377%\313\232\272\'@\206\021\')wH(@\027\356\270\323\3608(@\377CkA\344\262\'@\024}0\"R\317(@h\256\211 $%(@FG/&\345\271(@\004\372\255s\3636\'@O\005y\351\215\214\'@\034\231\254O\261\260\'@<y\350Ug,(@g\324L8\346\367\'@Y\205\323\2528\257\'@B\265\334\351\303\224\'@\260\025i\303\033\n(@\024z\372\377\336\003(@\217\242\240\360\236\306\'@\372M\222Z\202i(@\364$\016\272\236\375\'@pr\225j\030f\'@\200\270v\312*\305&@\227\206=Z\272\223&@\340\243ni\320\245(@\207;m<\200\331(@[\331\271\0010\306(@Y\205\323\2528\257\'@Y\326\262\201=\020(@\212\222\321\353\273\225\'@\223\000R\354\361K\'@b\270\2609\302\333(@\005\227t\036r\247\'@\345\221\313>\301t\'@*\270\201\306\362\214\'@H\336\363\340\337\325\'@\"\255\302G\351z\'@5\033\240*\306\035(@5j\212\017\200\265(@\203\rM\360{\256\'@[\252\242*\236\006\'@5j\212\017\200\265(@3F\251\210\2000)@\262\253\372\241H\353)@%\265\026Y[\253)@s\036:\013-N\'@Y\205\323\2528\257\'@\3564\001\231\365*(@\345\221\313>\301t\'@\300\365\233\007\361\236(@\177\353\"\374.\r(@\373\322\025\346\360V)@9\326\257\306W\207(@\023=*\211A\037(@\233\222\306yE\240\'@\017\026\205\232\374\310(@%\213\260ZIp(@U\300\352\317\'})@Y\205\323\2528\257\'@\303\002\023H\241\234(@\'*\312\316=H)@w9P\212\2203(@?,\217\220\213L(@\3076\252G\337\313\'@\3564\001\231\365*(@\310\250\261\024\020l(@\264\257\275\2673=\'@\233\276`\347\3321(@\330\225`Z\254\320&@\331\264hA\014\312(@\n\375\034\336\335\355(@)yU\234\002\205\'@s\336<\202e\271&@\303\024\301\t\336x\'@*.\005\375\360\006)@)|\217\301\321\360\'@\221\343s{B\367\'@\030\200\207\242[|(@\255\224\256>\346\243\'@\244\355\251\027\024\274(@\330\225`Z\254\320&@\271\037\021\317P\277&@\037\\f\372\016((@\203\".?\376.(@\333\210X\352l\300\'@\204=7\200\026R)@\017\3171\253P\301\'@\202m&+\031G(@\324\016\312v\'\272\'@y\373\241\331\332\257(@x\027\030^\377\334\'@\3564\001\231\365*(@\255\345\364\'q\375(@\032\220:\301m\361)@\2670tE\277\275\'@\006\254K\365v\234\'@\226\0130\226\300\211(@\241@\316\245\227\371(@\233\222\306yE\240\'@\022\333\220\001\315\177(@\232\300D\2666\002)@g\363\325\214\312\322\'@\2312\267\341\"\331&@"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "TensorSliceDataset/tensors/component_0:output:0"
      input: "TensorSliceDataset/tensors/component_1:output:0"
      input: "TensorSliceDataset/tensors/component_2:output:0"
      input: "TensorSliceDataset/tensors/component_3:output:0"
      input: "TensorSliceDataset/tensors/component_4:output:0"
      input: "TensorSliceDataset/tensors/component_5:output:0"
      input: "TensorSliceDataset/tensors/component_6:output:0"
      input: "TensorSliceDataset/tensors/component_7:output:0"
      input: "TensorSliceDataset/tensors/component_8:output:0"
      input: "TensorSliceDataset/tensors/component_9:output:0"
      input: "TensorSliceDataset/tensors/component_10:output:0"
      input: "TensorSliceDataset/tensors/component_11:output:0"
      input: "TensorSliceDataset/tensors/component_12:output:0"
      input: "TensorSliceDataset/tensors/component_13:output:0"
      input: "TensorSliceDataset/tensors/component_14:output:0"
      input: "TensorSliceDataset/tensors/component_15:output:0"
      input: "TensorSliceDataset/tensors/component_16:output:0"
      input: "TensorSliceDataset/tensors/component_17:output:0"
      input: "TensorSliceDataset/tensors/component_18:output:0"
      input: "TensorSliceDataset/tensors/component_19:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "BatchDatasetV2/batch_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 10
          }
        }
      }
    }
    node_def {
      name: "BatchDatasetV2/drop_remainder"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
    }
    node_def {
      name: "BatchDatasetV2"
      op: "BatchDatasetV2"
      input: "TensorSliceDataset:handle:0"
      input: "BatchDatasetV2/batch_size:output:0"
      input: "BatchDatasetV2/drop_remainder:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset/count"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset"
      op: "RepeatDataset"
      input: "BatchDatasetV2:handle:0"
      input: "RepeatDataset/count:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/buffer_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 10000
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset"
      op: "ShuffleDataset"
      input: "RepeatDataset:handle:0"
      input: "ShuffleDataset/buffer_size:output:0"
      input: "ShuffleDataset/seed:output:0"
      input: "ShuffleDataset/seed2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
      attr {
        key: "reshuffle_each_iteration"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "OptimizeDataset"
      op: "OptimizeDataset"
      input: "ShuffleDataset:handle:0"
      input: "optimizations:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
    }
    node_def {
      name: "ModelDataset"
      op: "ModelDataset"
      input: "OptimizeDataset:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_DOUBLE
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_UINT8
            type: DT_DOUBLE
            type: DT_DOUBLE
          }
        }
      }
    }
    ret {
      key: "modeldataset"
      value: "ModelDataset:handle:0"
    }
  }
}
versions {
  producer: 27
  min_consumer: 12
}
